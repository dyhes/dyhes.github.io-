<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>白玉京 on 飞鸿踏雪泥</title><link>https://dyhes.github.io/categories/temple/</link><description>Recent content in 白玉京 on 飞鸿踏雪泥</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 13 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://dyhes.github.io/categories/temple/index.xml" rel="self" type="application/rss+xml"/><item><title>【ArkTs】struct</title><link>https://dyhes.github.io/p/arktsstruct/</link><pubDate>Mon, 13 Jan 2025 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/arktsstruct/</guid><description>&lt;h2 id="typescript">TypeScript
&lt;/h2>&lt;p>在 TypeScript 中，&lt;code>struct&lt;/code> 并不是一个内置的关键字或概念。TypeScript 主要基于 JavaScript，而 JavaScript 是一种动态类型的语言，没有像 C 或 C++ 中的 &lt;code>struct&lt;/code> 这样的结构体类型。&lt;/p>
&lt;p>不过，TypeScript 提供了几种方式来定义和操作复杂的数据结构，类似于 &lt;code>struct&lt;/code> 的功能：&lt;/p>
&lt;h3 id="1-使用-interface">1. 使用 &lt;code>interface&lt;/code>
&lt;/h3>&lt;p>&lt;code>interface&lt;/code> 是 TypeScript 中定义对象形状的主要方式。你可以使用 &lt;code>interface&lt;/code> 来定义一个结构化的数据类型。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">Person&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">age&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">isStudent&lt;/span>: &lt;span class="kt">boolean&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">person&lt;/span>: &lt;span class="kt">Person&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Alice&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">age&lt;/span>: &lt;span class="kt">25&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">isStudent&lt;/span>: &lt;span class="kt">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-使用-type">2. 使用 &lt;code>type&lt;/code>
&lt;/h3>&lt;p>&lt;code>type&lt;/code> 是另一种定义复杂数据类型的方式，功能与 &lt;code>interface&lt;/code> 类似。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">Person&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">age&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">isStudent&lt;/span>: &lt;span class="kt">boolean&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">person&lt;/span>: &lt;span class="kt">Person&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Bob&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">age&lt;/span>: &lt;span class="kt">30&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">isStudent&lt;/span>: &lt;span class="kt">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="3-使用-class">3. 使用 &lt;code>class&lt;/code>
&lt;/h3>&lt;p>如果你需要更复杂的行为（如方法），可以使用 &lt;code>class&lt;/code> 来定义一个结构。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">Person&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">age&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">isStudent&lt;/span>: &lt;span class="kt">boolean&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">age&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">isStudent&lt;/span>: &lt;span class="kt">boolean&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">age&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">age&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">isStudent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">isStudent&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">greet() {&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`Hello, my name is &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">person&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Person&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Charlie&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">28&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">person&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">greet&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="4-使用-type-和-interface-的组合">4. 使用 &lt;code>type&lt;/code> 和 &lt;code>interface&lt;/code> 的组合
&lt;/h3>&lt;p>你可以将 &lt;code>type&lt;/code> 和 &lt;code>interface&lt;/code> 结合使用，以创建更复杂的数据结构。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">Address&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">street&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">city&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">zipCode&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">Person&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">age&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">address&lt;/span>: &lt;span class="kt">Address&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">person&lt;/span>: &lt;span class="kt">Person&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;David&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">age&lt;/span>: &lt;span class="kt">35&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">address&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">street&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;123 Main St&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">city&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Anytown&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">zipCode&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;12345&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="5-使用-readonly-和-optional-属性">5. 使用 &lt;code>readonly&lt;/code> 和 &lt;code>optional&lt;/code> 属性
&lt;/h3>&lt;p>你还可以使用 &lt;code>readonly&lt;/code> 和 &lt;code>?&lt;/code> 来定义只读和可选属性。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">Person&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">id&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">age?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 可选属性
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">person&lt;/span>: &lt;span class="kt">Person&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">id&lt;/span>: &lt;span class="kt">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Eve&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="总结">总结
&lt;/h3>&lt;p>虽然 TypeScript 没有直接的 &lt;code>struct&lt;/code> 概念，但通过 &lt;code>interface&lt;/code>、&lt;code>type&lt;/code> 和 &lt;code>class&lt;/code>，你可以轻松定义和使用复杂的数据结构。这些工具提供了比传统 &lt;code>struct&lt;/code> 更强大和灵活的功能。&lt;/p>
&lt;p>在 ArkTS（ArkUI TypeScript）中，&lt;code>struct&lt;/code> 是一种用于定义自定义组件的核心数据结构。它类似于 TypeScript 中的 &lt;code>class&lt;/code> 或 &lt;code>interface&lt;/code>，但具有特定的用途和限制，主要用于声明式 UI 开发。以下是关于 ArkTS 中 &lt;code>struct&lt;/code> 的详细说明：&lt;/p>
&lt;hr>
&lt;h2 id="1-struct-的基本概念">1. &lt;strong>&lt;code>struct&lt;/code> 的基本概念&lt;/strong>
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;strong>定义方式&lt;/strong>：&lt;code>struct&lt;/code> 是 ArkTS 中用于定义自定义组件的基础结构，通常与装饰器（如 &lt;code>@Component&lt;/code> 和 &lt;code>@Entry&lt;/code>）结合使用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">@Component&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">struct&lt;/span> &lt;span class="nx">MyComponent&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 成员变量和方法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">build() {&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// UI 描述
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>作用&lt;/strong>：&lt;code>struct&lt;/code> 用于封装组件的状态、属性和 UI 描述，使其成为一个可复用的独立单元。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>与 &lt;code>class&lt;/code> 和 &lt;code>interface&lt;/code> 的区别&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;code>struct&lt;/code> 主要用于定义数据模型和 UI 组件，通常与 UI 绑定紧密相关。&lt;/li>
&lt;li>&lt;code>struct&lt;/code> 不支持继承，也不能扩展或实现其他类或接口。&lt;/li>
&lt;li>&lt;code>struct&lt;/code> 通常设计为可序列化，便于在应用程序中传递数据。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="2-struct-的核心特性">2. &lt;strong>&lt;code>struct&lt;/code> 的核心特性&lt;/strong>
&lt;/h2>&lt;h3 id="1component-装饰器">（1）&lt;strong>&lt;code>@Component&lt;/code> 装饰器&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>&lt;code>@Component&lt;/code> 是 ArkTS 中用于修饰 &lt;code>struct&lt;/code> 的装饰器，使其具备组件化的能力。&lt;/li>
&lt;li>被 &lt;code>@Component&lt;/code> 装饰的 &lt;code>struct&lt;/code> 必须实现 &lt;code>build()&lt;/code> 方法，用于定义组件的 UI 描述。
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">@Component&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">struct&lt;/span> &lt;span class="nx">MyComponent&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">build() {&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Column() {&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Text&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Hello, ArkTS!&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="2entry-装饰器">（2）&lt;strong>&lt;code>@Entry&lt;/code> 装饰器&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>&lt;code>@Entry&lt;/code> 用于标记页面的入口组件，每个页面只能有一个 &lt;code>@Entry&lt;/code> 装饰的组件。
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">@Entry&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">@Component&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">struct&lt;/span> &lt;span class="nx">MainPage&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">build() {&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Column() {&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Text&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;This is the main page&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="3build-方法">（3）&lt;strong>&lt;code>build()&lt;/code> 方法&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>&lt;code>build()&lt;/code> 方法是自定义组件的核心，用于声明组件的 UI 结构。&lt;/li>
&lt;li>必须遵循以下规则：
&lt;ul>
&lt;li>根节点唯一且必要，通常为容器组件（如 &lt;code>Column&lt;/code>、&lt;code>Row&lt;/code>）。&lt;/li>
&lt;li>不允许声明本地变量或创建本地作用域。&lt;/li>
&lt;li>不允许直接调用未使用 &lt;code>@Builder&lt;/code> 装饰的方法。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="3-struct-的成员变量与函数">3. &lt;strong>&lt;code>struct&lt;/code> 的成员变量与函数&lt;/strong>
&lt;/h2>&lt;h3 id="1成员变量">（1）&lt;strong>成员变量&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>成员变量用于存储组件的状态和数据，通常使用装饰器（如 &lt;code>@State&lt;/code>、&lt;code>@Prop&lt;/code>、&lt;code>@Link&lt;/code>）进行修饰。&lt;/li>
&lt;li>成员变量是私有的，不支持静态变量。
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">@Component&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">struct&lt;/span> &lt;span class="nx">MyComponent&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">@State&lt;/span> &lt;span class="nx">message&lt;/span>: &lt;span class="kt">string&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;Hello, ArkTS!&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">build() {&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Column() {&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Text&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">message&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="2成员函数">（2）&lt;strong>成员函数&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>成员函数用于定义组件的逻辑，通常用于事件处理或数据操作。&lt;/li>
&lt;li>成员函数是私有的，不支持静态函数。
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">@Component&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">struct&lt;/span> &lt;span class="nx">MyComponent&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">@State&lt;/span> &lt;span class="nx">count&lt;/span>: &lt;span class="kt">number&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">private&lt;/span> &lt;span class="nx">increaseCount() {&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">count&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">build() {&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Column() {&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Text&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`Count: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">count&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Button&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Increase&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">onClick&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">increaseCount&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="4-struct-的使用场景">4. &lt;strong>&lt;code>struct&lt;/code> 的使用场景&lt;/strong>
&lt;/h2>&lt;h3 id="1自定义组件">（1）&lt;strong>自定义组件&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>&lt;code>struct&lt;/code> 是 ArkTS 中定义自定义组件的基础，开发者可以通过组合系统组件（如 &lt;code>Text&lt;/code>、&lt;code>Button&lt;/code>）和自定义逻辑来创建复杂的 UI 组件。&lt;/li>
&lt;/ul>
&lt;h3 id="2状态管理">（2）&lt;strong>状态管理&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>通过装饰器（如 &lt;code>@State&lt;/code>、&lt;code>@Prop&lt;/code>、&lt;code>@Link&lt;/code>），&lt;code>struct&lt;/code> 可以实现组件内部状态的管理，并驱动 UI 更新。&lt;/li>
&lt;/ul>
&lt;h3 id="3模块化开发">（3）&lt;strong>模块化开发&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>使用 &lt;code>export&lt;/code> 关键字导出 &lt;code>struct&lt;/code>，可以在其他文件中导入并复用自定义组件。
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// MyComponent.ets
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">@Component&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="nx">struct&lt;/span> &lt;span class="nx">MyComponent&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">build() {&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Column() {&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Text&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;This is a reusable component&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// MainPage.ets
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">MyComponent&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s1">&amp;#39;./MyComponent&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">@Entry&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">@Component&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">struct&lt;/span> &lt;span class="nx">MainPage&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">build() {&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Column() {&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">MyComponent&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="5-struct-的限制">5. &lt;strong>&lt;code>struct&lt;/code> 的限制&lt;/strong>
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>不支持继承&lt;/strong>：&lt;code>struct&lt;/code> 不能继承其他类或接口。&lt;/li>
&lt;li>&lt;strong>实例化&lt;/strong>：&lt;code>struct&lt;/code> 的实例化可以省略 &lt;code>new&lt;/code> 关键字。&lt;/li>
&lt;li>&lt;strong>命名规则&lt;/strong>：自定义组件名、类名、函数名不能与系统组件名相同。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="总结-1">总结
&lt;/h2>&lt;p>在 ArkTS 中，&lt;code>struct&lt;/code> 是一种用于定义自定义组件的核心数据结构，具有以下特点：&lt;/p>
&lt;ol>
&lt;li>与 &lt;code>@Component&lt;/code> 和 &lt;code>@Entry&lt;/code> 装饰器结合使用，用于声明式 UI 开发。&lt;/li>
&lt;li>支持成员变量和函数，用于管理组件状态和逻辑。&lt;/li>
&lt;li>不支持继承，但可以通过模块化实现代码复用。&lt;/li>
&lt;li>主要用于构建可复用的 UI 组件，并支持状态驱动的 UI 更新。&lt;/li>
&lt;/ol>
&lt;p>通过合理使用 &lt;code>struct&lt;/code>，开发者可以高效地构建复杂的用户界面，并实现灵活的状态管理。&lt;/p></description></item><item><title>【Python】.venv</title><link>https://dyhes.github.io/p/python.venv/</link><pubDate>Mon, 13 Jan 2025 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/python.venv/</guid><description>&lt;p>The .venv directory is typically a folder that contains a &lt;strong>virtual environment&lt;/strong> for Python projects. A virtual environment is a self-contained directory that holds a specific version of Python and any packages or libraries your project requires. This helps isolate your project’s dependencies from the global Python environment on your system, ensuring that each project has its own environment and dependencies without interfering with other projects.
When you execute a Python script in VS Code, if it’s using a .venv directory, it means that the script is running within this virtual environment. The .venv directory is often created by using the python -m venv .venv command or through VS Code’s environment setup.
Key points about .venv:&lt;/p>
&lt;ul>
&lt;li>It’s not a Python package itself but a directory.&lt;/li>
&lt;li>It helps in managing dependencies for a specific project.&lt;/li>
&lt;li>You can activate it using source .venv/bin/activate (Linux/macOS) or .venv\Scripts\activate (Windows) in the terminal.&lt;/li>
&lt;/ul>
&lt;p>⠀VS Code typically detects virtual environments and allows you to select the appropriate interpreter for your project, ensuring that Python uses the version and packages from the virtual environment rather than the system-wide installation.&lt;/p></description></item><item><title>【Java】String split</title><link>https://dyhes.github.io/p/javastring-split/</link><pubDate>Mon, 23 Sep 2024 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/javastring-split/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">parts&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;\\.&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>而非&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">parts&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;\.&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>【Java】Enum</title><link>https://dyhes.github.io/p/javaenum/</link><pubDate>Sun, 14 Jul 2024 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/javaenum/</guid><description>&lt;img src="https://dyhes.github.io/covers/cover19.png" alt="Featured image of post 【Java】Enum" />&lt;p>Java enums are a special type of class used to define collections of constants. They provide a way to represent a fixed set of values, which can be useful for categorizing data and ensuring type safety.&lt;/p>
&lt;h2 id="key-points">Key Points
&lt;/h2>&lt;ul>
&lt;li>Implicitly final and static: Enum constants are implicitly public, static, and final.&lt;/li>
&lt;li>values() method: Every enum has a static values() method that returns an array of all enum constants.&lt;/li>
&lt;li>valueOf(String) method: This static method returns the &lt;strong>enum constant&lt;/strong> with the specified name.&lt;/li>
&lt;li>The name() method returns the name of the enum constant as declared in its enum declaration. It&amp;rsquo;s an instance method available on all enum constants.&lt;/li>
&lt;li>valueOf(String) and name() provide a way to convert between the Enum and String.&lt;/li>
&lt;li>ordinal() method: Returns the &lt;strong>position&lt;/strong> of the enum constant (zero-based).&lt;/li>
&lt;li>Constructors, Fields, and Methods: Enums can have constructors, fields, and methods, allowing you to associate data and behavior with each constant.&lt;/li>
&lt;li>Implementing Interfaces: Enums can implement interfaces, providing a way to define behavior for each constant.&lt;/li>
&lt;li>EnumSet and EnumMap: These are specialized Set and Map implementations for use with enum types, offering &lt;strong>better performance&lt;/strong> than their general-purpose counterparts.&lt;/li>
&lt;li>Constant-specific method implementation: You can &lt;strong>override methods for specific enum&lt;/strong> constants, allowing for different behavior per constant.&lt;/li>
&lt;li>Abstract methods in enums: You can define abstract methods in an enum, forcing each constant to provide its own implementation.&lt;/li>
&lt;/ul>
&lt;h2 id="example">example
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Basic enum definition&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">enum&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Day&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">MONDAY&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">TUESDAY&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">WEDNESDAY&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">THURSDAY&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">FRIDAY&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">SATURDAY&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">SUNDAY&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// Enum with constructor, fields, and methods&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">enum&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Planet&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">MERCURY&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">3&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">303e&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">23&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">4397e6&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">VENUS&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">4&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">869e&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">24&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">6&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">0518e6&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">EARTH&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">5&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">976e&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">24&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">6&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">37814e6&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">mass&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// in kilograms&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">radius&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// in meters&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Planet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">mass&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">radius&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">mass&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">mass&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">radius&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">radius&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">getMass&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">mass&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">getRadius&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">radius&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Enum constant-specific method implementation&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">surfaceGravity&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">6&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">67300E&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">11&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">mass&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">radius&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">radius&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// Usage examples&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">EnumExample&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Basic usage&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Day&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">today&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Day&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">MONDAY&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Today is &amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">today&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Switch statement with enum&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">switch&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">today&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">case&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">MONDAY&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Start of the work week&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">case&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">FRIDAY&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;TGIF!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">default&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Midweek&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Using enum methods&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Planet&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">earth&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Planet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">EARTH&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Earth&amp;#39;s mass: &amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">earth&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getMass&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Earth&amp;#39;s surface gravity: &amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">earth&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">surfaceGravity&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Iterating over enum values&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Planet&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">planet&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Planet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">values&lt;/span>&lt;span class="p">())&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">planet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">name&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;: &amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">planet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">surfaceGravity&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="usage-with-pageable">Usage with Pageable
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">enum&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">UserSortField&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">ID&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;id&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">FIRST_NAME&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;firstName&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">LAST_NAME&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;lastName&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">EMAIL&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;email&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">CREATED_DATE&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;createdDate&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">fieldName&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">UserSortField&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">fiel&lt;/span>&lt;span class="err">&lt;/span>&lt;span class="n">dName&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">fieldName&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">fieldName&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">getFieldName&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">fieldName&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nd">@RestController&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nd">@RequestMapping&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/api/users&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">UserController&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Autowired&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">UserService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">userService&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@GetMapping&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ResponseEntity&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">getAllUsers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@RequestParam&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">defaultValue&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;0&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">page&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@RequestParam&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">defaultValue&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;10&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@RequestParam&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">defaultValue&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;ID&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">UserSortField&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sortBy&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Page&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">User&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">userPage&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">userService&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getAllUsers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">page&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sortBy&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// ... rest of the method remains the same&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nd">@Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">UserService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Autowired&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">UserRepository&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">userRepository&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Page&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">User&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">getAllUsers&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">page&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">UserSortField&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sortBy&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Pageable&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pageable&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">PageRequest&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">of&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">page&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Sort&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">by&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sortBy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getFieldName&lt;/span>&lt;span class="p">()));&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">userRepository&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">findAll&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pageable&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="usage-with-spring-data-jpa">Usage with Spring Data JPA
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">enum&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Status&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">ACTIVE&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">INACTIVE&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">PENDING&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kn">import&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nn">javax.persistence.*&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nd">@Entity&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">User&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Id&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@GeneratedValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">strategy&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">GenerationType&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">IDENTITY&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Long&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Enumerated&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">EnumType&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">STRING&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Status&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">status&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// getters and setters&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The @Enumerated annotation is used to specify how the Enum should be persisted in the database. There are two options:&lt;/p>
&lt;p>EnumType.ORDINAL: Stores the Enum as an integer (the ordinal value of the Enum constant).
EnumType.STRING: Stores the Enum as a string (the name of the Enum constant).&lt;/p>
&lt;h3 id="enumtypeordinal">EnumType.ORDINAL
&lt;/h3>&lt;h4 id="pros">Pros
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>Database efficiency&lt;/strong>: Stores enums as integers, which typically use less storage space than strings.&lt;/li>
&lt;li>&lt;strong>Potentially faster queries&lt;/strong>: Integer comparisons are generally faster than string comparisons.&lt;/li>
&lt;li>&lt;strong>Simpler database representation&lt;/strong>: The database column is a simple integer type.&lt;/li>
&lt;/ul>
&lt;h4 id="cons">Cons
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>Fragility to enum order changes&lt;/strong>: If you add, remove, or reorder enum constants, the ordinal values change, which can corrupt existing data.&lt;/li>
&lt;li>&lt;strong>Less readable in raw database queries&lt;/strong>: You see numbers instead of meaningful names.&lt;/li>
&lt;li>&lt;strong>Potential for invalid states&lt;/strong>: If the database contains an integer that doesn’t correspond to any enum constant, it can lead to runtime errors.&lt;/li>
&lt;/ul>
&lt;h3 id="enumtypestring">EnumType.STRING
&lt;/h3>&lt;h4 id="pros-1">Pros
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>Readability&lt;/strong>: The database stores the actual names of the enum constants, making raw database queries more understandable.&lt;/li>
&lt;li>&lt;strong>Resilience to enum order changes&lt;/strong>: Adding or reordering enum constants doesn’t affect existing data.&lt;/li>
&lt;li>&lt;strong>Self-documenting&lt;/strong>: The database schema itself documents the possible enum values.&lt;/li>
&lt;li>&lt;strong>Safety&lt;/strong>: It’s harder to accidentally introduce invalid states, as any string not matching an enum constant will be rejected.&lt;/li>
&lt;/ul>
&lt;h4 id="cons-1">Cons
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>Less efficient storage&lt;/strong>: Strings typically use more storage space than integers.&lt;/li>
&lt;li>&lt;strong>Potentially slower queries&lt;/strong>: String comparisons can be slower than integer comparisons, especially for large datasets.&lt;/li>
&lt;li>&lt;strong>Case sensitivity&lt;/strong>: By default, the comparison is case-sensitive, which might lead to issues if not handled carefully.&lt;/li>
&lt;/ul>
&lt;h3 id="recommendation">Recommendation
&lt;/h3>&lt;p>In most cases, EnumType.STRING is the safer and more maintainable choice, despite the slight performance trade-off. The benefits of readability, safety, and resilience to changes &lt;strong>usually outweigh&lt;/strong> the minor efficiency gains of EnumType.ORDINAL.&lt;/p>
&lt;p>However, if you’re dealing with a very large dataset where performance and storage efficiency are critical, and you can guarantee that the enum order will never change, EnumType.ORDINAL might be considered.&lt;/p>
&lt;h3 id="best-practices">Best Practices
&lt;/h3>&lt;p>&lt;strong>Default&lt;/strong> to EnumType.STRING unless you have a compelling reason not to.
If using EnumType.ORDINAL, document it clearly and warn about the dangers of changing the enum order.
Consider using a &lt;strong>custom UserType&lt;/strong> for more complex enum persistence scenarios.
If using EnumType.STRING, be aware of &lt;strong>case sensitivity&lt;/strong> in your database queries.&lt;/p></description></item><item><title>【Java】Dates and Times</title><link>https://dyhes.github.io/p/javadates-and-times/</link><pubDate>Fri, 12 Jul 2024 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/javadates-and-times/</guid><description>&lt;img src="https://dyhes.github.io/covers/cover19.png" alt="Featured image of post 【Java】Dates and Times" />&lt;h2 id="javautildate">&lt;code>java.util.Date&lt;/code>
&lt;/h2>&lt;p>You&amp;rsquo;re right to ask about the Date class. The pre-Java 8 java.util.Date class is indeed still available, but it&amp;rsquo;s generally considered &lt;strong>outdated&lt;/strong> for modern Java projects.&lt;/p>
&lt;h3 id="issues">Issues
&lt;/h3>&lt;ul>
&lt;li>Mutable (not &lt;strong>thread-safe&lt;/strong>)&lt;/li>
&lt;li>Poorly designed API&lt;/li>
&lt;li>Doesn&amp;rsquo;t handle time zones well&lt;/li>
&lt;li>Only &lt;strong>millisecond&lt;/strong> precision&lt;/li>
&lt;li>Confusing method names (e.g., getYear() returns year since 1900)&lt;/li>
&lt;/ul>
&lt;h3 id="modern-alternatives">Modern alternatives
&lt;/h3>&lt;ul>
&lt;li>Java 8+ java.time package (recommended)&lt;/li>
&lt;li>Third-party libraries like Joda-Time (for pre-Java 8 projects)&lt;/li>
&lt;/ul>
&lt;h3 id="migration">Migration
&lt;/h3>&lt;ul>
&lt;li>java.time provides methods to convert between old and new date/time classes&lt;/li>
&lt;/ul>
&lt;h2 id="javatime">&lt;code>java.time&lt;/code>
&lt;/h2>&lt;p>&lt;code>java.time&lt;/code> introduced in Java 8, provides a comprehensive and much-improved API for handling dates, times, and durations.&lt;/p>
&lt;h3 id="localdate">LocalDate
&lt;/h3>&lt;p>Represents a date without time or time zone.&lt;/p>
&lt;h3 id="localtime">LocalTime
&lt;/h3>&lt;p>Represents a time without date or time zone.&lt;/p>
&lt;h3 id="localdatetime">LocalDateTime
&lt;/h3>&lt;p>Combines date and time, without a time zone.&lt;/p>
&lt;h3 id="zoneddatetime">ZonedDateTime
&lt;/h3>&lt;p>Date and time with a time zone.&lt;/p>
&lt;h3 id="zoneid">ZoneId
&lt;/h3>&lt;p>represents a time zone&lt;/p>
&lt;h3 id="instant">Instant
&lt;/h3>&lt;p>Instant represents a point in time on the timeline, typically in UTC (Coordinated Universal Time). It&amp;rsquo;s essentially a &lt;strong>timestamp&lt;/strong> with nanosecond precision.&lt;/p>
&lt;h3 id="period">Period
&lt;/h3>&lt;p>Represents a &lt;strong>date-based&lt;/strong> amount of time.&lt;/p>
&lt;h3 id="duration">Duration
&lt;/h3>&lt;p>Represents a &lt;strong>time-based&lt;/strong> amount of time.&lt;/p>
&lt;h3 id="datetimeformatter">DateTimeFormatter
&lt;/h3>&lt;p>is used for parsing and formatting date-time objects.&lt;/p>
&lt;h2 id="usage-in-database">Usage in Database
&lt;/h2>&lt;h3 id="recommended-classes">Recommended classes
&lt;/h3>&lt;ul>
&lt;li>LocalDate: For date-only fields (e.g., birthdate)&lt;/li>
&lt;li>LocalDateTime: For date and time without time zone&lt;/li>
&lt;li>Instant: For timestamps (e.g., created_at, updated_at)&lt;/li>
&lt;li>ZonedDateTime: If you need to store time zone information&lt;/li>
&lt;/ul>
&lt;h3 id="considerations">Considerations
&lt;/h3>&lt;ul>
&lt;li>Instant is often preferred &lt;strong>for timestamps&lt;/strong> because it&amp;rsquo;s always in UTC and avoids time zone ambiguities.&lt;/li>
&lt;li>If using an &lt;strong>older version of Hibernate&lt;/strong> (pre-5.0), you might need additional configuration or converters.&lt;/li>
&lt;li>Some databases might require specific column definitions. For example, &lt;strong>PostgreSQL might need @Column(columnDefinition = &amp;ldquo;TIMESTAMP WITH TIME ZONE&amp;rdquo;) for Instant&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;h3 id="database-specific-notes">Database-specific notes
&lt;/h3>&lt;ul>
&lt;li>MySQL: LocalDateTime is typically stored as DATETIME, Instant as TIMESTAMP.&lt;/li>
&lt;li>PostgreSQL: Supports all types well, but ensure your JDBC driver is up to date.&lt;/li>
&lt;li>Oracle: May require additional configuration for LocalDate and LocalDateTime.&lt;/li>
&lt;/ul>
&lt;h3 id="best-practices">Best practices
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>Use Instant for audit fields&lt;/strong> (created_at, updated_at).&lt;/li>
&lt;li>Use LocalDateTime for user-entered date-times if time zone isn&amp;rsquo;t important.&lt;/li>
&lt;li>Always consider time zone implications in your application logic.
You can set the following property to ensure proper handling of JDBC time zones:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">spring&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">jpa&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">properties&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">hibernate&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">jdbc&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">time_zone&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">UTC&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="example">example
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nn">javax.persistence.*&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kn">import&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nn">java.time.Instant&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kn">import&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nn">java.time.LocalDate&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kn">import&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nn">java.time.LocalDateTime&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nd">@Entity&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">User&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Id&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@GeneratedValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">strategy&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">GenerationType&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">IDENTITY&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Long&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">LocalDate&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">birthDate&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">LocalDateTime&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">lastLogin&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Column&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">columnDefinition&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;TIMESTAMP&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Instant&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">createdAt&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// getters and setters&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="instant-usage">Instant usage
&lt;/h2>&lt;p>Use Instant for:&lt;/p>
&lt;ul>
&lt;li>System-generated timestamps (created_at, updated_at)&lt;/li>
&lt;li>Event occurrences (lastLogin, orderPlacedAt)&lt;/li>
&lt;li>Any time you need to record a specific moment and &lt;strong>might deal with different time zones&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h3 id="audit-field">Audit field
&lt;/h3>&lt;ul>
&lt;li>created_at: When a record was created&lt;/li>
&lt;li>updated_at: When a record was last modified&lt;/li>
&lt;li>sometimes deleted_at: When a record was soft-deleted&lt;/li>
&lt;/ul>
&lt;h3 id="benifits">Benifits
&lt;/h3>&lt;p>Querying&lt;/p>
&lt;ul>
&lt;li>Easy to query for records created or updated within a specific time range.&lt;/li>
&lt;/ul>
&lt;p>Sorting&lt;/p>
&lt;ul>
&lt;li>Straightforward to sort records by creation or update time.&lt;/li>
&lt;/ul>
&lt;p>Time zone handling&lt;/p>
&lt;ul>
&lt;li>When displaying to users, you can easily convert Instant to their local time zone.&lt;/li>
&lt;/ul>
&lt;p>Potential pitfall to avoid&lt;/p>
&lt;ul>
&lt;li>Don&amp;rsquo;t use LocalDateTime for audit fields unless you&amp;rsquo;re absolutely sure all your servers and databases will always be in the same time zone.&lt;/li>
&lt;/ul>
&lt;p>Converting for display&lt;/p>
&lt;ul>
&lt;li>When you need to display these times to users
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">ZoneId&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">userZone&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ZoneId&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">of&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;America/New_York&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">Instant&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">createdAt&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">entity&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getCreatedAt&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">ZonedDateTime&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">userTime&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ZonedDateTime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">ofInstant&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">createdAt&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">userZone&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="database-considerations">Database considerations
&lt;/h3>&lt;ul>
&lt;li>For MySQL: Use TIMESTAMP column type&lt;/li>
&lt;li>For PostgreSQL: Use TIMESTAMP WITH TIME ZONE&lt;/li>
&lt;/ul>
&lt;h3 id="jpa-auditting">JPA Auditting
&lt;/h3>&lt;p>If you want to use Spring Data JPA&amp;rsquo;s automatic auditing features, such as:&lt;/p>
&lt;ul>
&lt;li>@CreatedDate&lt;/li>
&lt;li>@LastModifiedDate&lt;/li>
&lt;li>@CreatedBy&lt;/li>
&lt;li>@LastModifiedBy
enable JPA Auditing.&lt;/li>
&lt;/ul>
&lt;h3 id="manual-auditting">manual Auditting
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Entity&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">MyEntity&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// other fields&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Column&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">updatable&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Instant&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">createdAt&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Instant&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">updatedAt&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@PrePersist&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">protected&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">onCreate&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">createdAt&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Instant&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">now&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">updatedAt&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Instant&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">now&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@PreUpdate&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">protected&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">onUpdate&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">updatedAt&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Instant&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">now&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="example-1">example
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nn">org.springframework.data.annotation.CreatedDate&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kn">import&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nn">org.springframework.data.annotation.LastModifiedDate&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kn">import&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nn">org.springframework.data.jpa.domain.support.AuditingEntityListener&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kn">import&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nn">javax.persistence.*&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kn">import&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nn">java.time.Instant&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nd">@Entity&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nd">@EntityListeners&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">AuditingEntityListener&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">AuditedEntity&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Id&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@GeneratedValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">strategy&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">GenerationType&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">IDENTITY&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Long&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@CreatedDate&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Column&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">updatable&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Instant&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">createdAt&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@LastModifiedDate&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Instant&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">updatedAt&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// getters and setters&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nd">@Configuration&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nd">@EnableJpaAuditing&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">JpaConfig&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// other configurations &lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="other-usage">Other usage
&lt;/h3>&lt;p>It&amp;rsquo;s often a good practice to store times as Instant and convert to appropriate local times when presenting to users.&lt;/p>
&lt;p>This ensures consistent storage and easier querying, while still allowing flexible display options.&lt;/p>
&lt;p>While Instant is great for many scenarios, there are cases where other types might be more appropriate:&lt;/p>
&lt;ul>
&lt;li>a) LocalDate: When you only need the date without time (e.g., birthDate, holidayDate).&lt;/li>
&lt;li>b) LocalDateTime: When you need date and time, but the time zone is implicit or unnecessary.&lt;/li>
&lt;li>c) ZonedDateTime: When you need to &lt;strong>preserve&lt;/strong> the specific time zone information.&lt;/li>
&lt;/ul></description></item><item><title>【Java】Releases</title><link>https://dyhes.github.io/p/javareleases/</link><pubDate>Fri, 12 Jul 2024 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/javareleases/</guid><description>&lt;img src="https://dyhes.github.io/covers/cover9.png" alt="Featured image of post 【Java】Releases" />&lt;p>Oracle has moved to a new release model since Java 9:&lt;/p>
&lt;ul>
&lt;li>There are new Java releases every six months.&lt;/li>
&lt;li>Every two (three before java17) years, the September release is designated as an LTS release.&lt;/li>
&lt;li>Non-LTS releases are supported only until the next release.&lt;/li>
&lt;/ul>
&lt;h2 id="java-10-1996">Java 1.0 (1996)
&lt;/h2>&lt;ul>
&lt;li>First public release&lt;/li>
&lt;/ul>
&lt;h2 id="java-11-1997">Java 1.1 (1997)
&lt;/h2>&lt;ul>
&lt;li>Inner classes&lt;/li>
&lt;li>JavaBeans&lt;/li>
&lt;li>JDBC&lt;/li>
&lt;li>RMI (Remote Method Invocation)&lt;/li>
&lt;/ul>
&lt;h2 id="java-12-1998">Java 1.2 (1998)
&lt;/h2>&lt;ul>
&lt;li>Collections framework&lt;/li>
&lt;li>Swing GUI&lt;/li>
&lt;li>JIT (Just-In-Time) compiler&lt;/li>
&lt;/ul>
&lt;h2 id="java-13-2000">Java 1.3 (2000)
&lt;/h2>&lt;ul>
&lt;li>HotSpot JVM&lt;/li>
&lt;li>JNDI (Java Naming and Directory Interface)&lt;/li>
&lt;/ul>
&lt;h2 id="java-14-2002">Java 1.4 (2002)
&lt;/h2>&lt;ul>
&lt;li>Assert keyword&lt;/li>
&lt;li>Regular expressions&lt;/li>
&lt;li>Logging API&lt;/li>
&lt;li>NIO (New Input/Output)&lt;/li>
&lt;/ul>
&lt;h2 id="java-5-2004">Java 5 (2004)
&lt;/h2>&lt;ul>
&lt;li>Generics&lt;/li>
&lt;li>Annotations&lt;/li>
&lt;li>Autoboxing/Unboxing&lt;/li>
&lt;li>Enumerations&lt;/li>
&lt;li>Varargs&lt;/li>
&lt;li>Enhanced for loop&lt;/li>
&lt;/ul>
&lt;h2 id="java-6-2006">Java 6 (2006)
&lt;/h2>&lt;ul>
&lt;li>Scripting language support&lt;/li>
&lt;li>JDBC 4.0&lt;/li>
&lt;li>Java Compiler API&lt;/li>
&lt;/ul>
&lt;h2 id="java-7-2011">Java 7 (2011)
&lt;/h2>&lt;ul>
&lt;li>Try-with-resources&lt;/li>
&lt;li>Diamond operator&lt;/li>
&lt;li>Switch with Strings&lt;/li>
&lt;li>NIO 2.0&lt;/li>
&lt;/ul>
&lt;h2 id="java-8-2014---lts">Java 8 (2014) - LTS
&lt;/h2>&lt;ul>
&lt;li>Lambda expressions&lt;/li>
&lt;li>Stream API&lt;/li>
&lt;li>Optional class&lt;/li>
&lt;li>Default methods in interfaces&lt;/li>
&lt;li>New Date and Time API&lt;/li>
&lt;/ul>
&lt;h2 id="java-9-2017">Java 9 (2017)
&lt;/h2>&lt;ul>
&lt;li>Module system (Project Jigsaw)&lt;/li>
&lt;li>JShell (REPL)&lt;/li>
&lt;li>Private methods in interfaces&lt;/li>
&lt;/ul>
&lt;h2 id="java-10-2018">Java 10 (2018)
&lt;/h2>&lt;ul>
&lt;li>Local variable type inference (var keyword)&lt;/li>
&lt;/ul>
&lt;h2 id="java-11-2018---lts">Java 11 (2018) - LTS
&lt;/h2>&lt;ul>
&lt;li>HTTP Client API&lt;/li>
&lt;li>Launch single-file source-code programs&lt;/li>
&lt;/ul>
&lt;h2 id="java-12-2019">Java 12 (2019)
&lt;/h2>&lt;ul>
&lt;li>Switch expressions (preview)&lt;/li>
&lt;/ul>
&lt;h2 id="java-13-2019">Java 13 (2019)
&lt;/h2>&lt;ul>
&lt;li>Text blocks (preview)&lt;/li>
&lt;/ul>
&lt;h2 id="java-14-2020">Java 14 (2020)
&lt;/h2>&lt;ul>
&lt;li>Records (preview)&lt;/li>
&lt;li>Pattern matching for instanceof (preview)&lt;/li>
&lt;/ul>
&lt;h2 id="java-15-2020">Java 15 (2020)
&lt;/h2>&lt;ul>
&lt;li>Sealed classes (preview)&lt;/li>
&lt;li>Hidden classes&lt;/li>
&lt;/ul>
&lt;h2 id="java-16-2021">Java 16 (2021)
&lt;/h2>&lt;ul>
&lt;li>Pattern matching for instanceof (finalized)&lt;/li>
&lt;li>Records (finalized)&lt;/li>
&lt;/ul>
&lt;h2 id="java-17-2021---lts">Java 17 (2021) - LTS
&lt;/h2>&lt;ul>
&lt;li>Sealed classes (finalized)&lt;/li>
&lt;li>Pattern matching for switch (preview)&lt;/li>
&lt;/ul>
&lt;h2 id="java-18-2022">Java 18 (2022)
&lt;/h2>&lt;ul>
&lt;li>Simple web server&lt;/li>
&lt;li>Code snippets in Java API documentation&lt;/li>
&lt;/ul>
&lt;h2 id="java-19-2022">Java 19 (2022)
&lt;/h2>&lt;ul>
&lt;li>Virtual threads (preview)&lt;/li>
&lt;li>Pattern matching for switch (second preview)&lt;/li>
&lt;/ul>
&lt;h2 id="java-20-2023">Java 20 (2023)
&lt;/h2>&lt;ul>
&lt;li>Scoped values (incubator)&lt;/li>
&lt;li>Record patterns (second preview)&lt;/li>
&lt;/ul>
&lt;h2 id="java-212023---lts">Java 21(2023) - LTS
&lt;/h2>&lt;ul>
&lt;li>Virtual Threads (finalized)&lt;/li>
&lt;li>Pattern Matching for Switch (finalized)&lt;/li>
&lt;li>Record Patterns (finalized)&lt;/li>
&lt;li>Sequenced Collections&lt;/li>
&lt;li>String Templates (preview)&lt;/li>
&lt;li>Unnamed Classes and Instance Main Methods (preview)&lt;/li>
&lt;li>Unnamed Patterns and Variables (preview)&lt;/li>
&lt;li>Scoped Values (preview)&lt;/li>
&lt;li>Foreign Function &amp;amp; Memory API (preview)&lt;/li>
&lt;li>Structured Concurrency (preview)&lt;/li>
&lt;li>Vector API (incubator)&lt;/li>
&lt;/ul></description></item><item><title>【Solidity】Concepts</title><link>https://dyhes.github.io/p/solidityconcepts/</link><pubDate>Thu, 13 Oct 2022 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/solidityconcepts/</guid><description>&lt;h2 id="smart-contract">smart contract
&lt;/h2>&lt;p>A contract in the sense of Solidity is a collection of code (its &lt;em>functions&lt;/em>) and data (its &lt;em>state&lt;/em>) that resides at a specific address on the Ethereum blockchain.&lt;/p>
&lt;h2 id="transactions">Transactions
&lt;/h2>&lt;p>A transaction is a message that is sent from one account to another account (which might be the same or empty, see below). It can include binary data (which is called “payload”) and Ether.&lt;/p>
&lt;p>If the target account contains code, that code is executed and the payload is provided as input data.&lt;/p>
&lt;p>If the target account is not set (the transaction does not have a recipient or the recipient is set to null), the transaction creates a new contract. As already mentioned, the address of that contract is not the zero address but an address derived from the sender and its number of transactions sent (the “nonce”). The payload of such a contract creation transaction is taken to be EVM bytecode and executed. The output data of this execution is permanently stored as the code of the contract. This means that in order to create a contract, you do not send the actual code of the contract, but in fact code that returns that code when executed.&lt;/p>
&lt;h2 id="gas">Gas
&lt;/h2>&lt;p>Upon creation, each transaction is charged with a certain amount of &lt;strong>gas&lt;/strong> that has to be paid for by the originator of the transaction (&lt;code>tx.origin&lt;/code>). While the EVM executes the transaction, the gas is gradually depleted according to specific rules. If the gas is used up at any point (i.e. it would be negative), an out-of-gas exception is triggered, which ends execution and reverts all modifications made to the state in the current call frame.&lt;/p>
&lt;h2 id="storage-memory-and-stacks">Storage, Memory and Stacks
&lt;/h2>&lt;p>The Ethereum Virtual Machine has three areas where it can store data: storage, memory and the stack.&lt;/p>
&lt;p>Each account has a data area called &lt;strong>storage&lt;/strong>, which is persistent between function calls and transactions. Storage is a key-value store that maps 256-bit words to 256-bit words. It is not possible to enumerate storage from within a contract, it is comparatively costly to read, and even more to initialise and modify storage. Because of this cost, you should minimize what you store in persistent storage to what the contract needs to run. Store data like derived calculations, caching, and aggregates outside of the contract. A contract can neither read nor write to any storage apart from its own.&lt;/p>
&lt;p>The second data area is called &lt;strong>memory&lt;/strong>, of which a contract obtains a freshly cleared instance for each message call. Memory is linear and can be addressed at byte level, but reads are limited to a width of 256 bits, while writes can be either 8 bits or 256 bits wide. Memory is expanded by a word (256-bit), when accessing (either reading or writing) a previously untouched memory word (i.e. any offset within a word). At the time of expansion, the cost in gas must be paid. Memory is more costly the larger it grows (it scales quadratically).&lt;/p>
&lt;p>The EVM is not a register machine but a stack machine, so all computations are performed on a data area called the &lt;strong>stack&lt;/strong>. It has a maximum size of 1024 elements and contains words of 256 bits. Access to the stack is limited to the top end in the following way: It is possible to copy one of the topmost 16 elements to the top of the stack or swap the topmost element with one of the 16 elements below it. All other operations take the topmost two (or one, or more, depending on the operation) elements from the stack and push the result onto the stack. Of course it is possible to move stack elements to storage or memory in order to get deeper access to the stack, but it is not possible to just access arbitrary elements deeper in the stack without first removing the top of the stack.&lt;/p></description></item><item><title>【Rust】Basics</title><link>https://dyhes.github.io/p/rustbasics/</link><pubDate>Mon, 12 Sep 2022 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/rustbasics/</guid><description>&lt;h2 id="expressions-and--statements">Expressions and Statements
&lt;/h2>&lt;p>&lt;em>Statements&lt;/em> are instructions that perform some action and do not return a value. &lt;em>Expressions&lt;/em> evaluate to a resulting value.&lt;/p>
&lt;h2 id="ownship">Ownship
&lt;/h2>&lt;p>&lt;em>Ownership&lt;/em> is a set of rules that governs how a Rust program manages memory.&lt;/p>
&lt;p>All data stored on the stack must have a known, fixed size. Data with an unknown size at compile time or a size that might change must be stored on the heap instead.&lt;/p>
&lt;p>Keeping track of what parts of code are using what data on the heap, minimizing the amount of duplicate data on the heap, and cleaning up unused data on the heap so you don’t run out of space are all problems that ownership addresses.&lt;/p>
&lt;h3 id="ownership-ruleshttpsdocrust-langorgstablebookch04-01-what-is-ownershiphtmlownership-rules">&lt;a class="link" href="https://doc.rust-lang.org/stable/book/ch04-01-what-is-ownership.html#ownership-rules" target="_blank" rel="noopener"
>Ownership Rules&lt;/a>
&lt;/h3>&lt;ul>
&lt;li>Each value in Rust has an &lt;em>owner&lt;/em>.&lt;/li>
&lt;li>There can only be one owner at a time.&lt;/li>
&lt;li>When the owner goes out of scope, the value will be dropped.&lt;/li>
&lt;/ul>
&lt;p>The ownership of a variable follows the same pattern every time: assigning a value to another variable moves it.&lt;/p>
&lt;p>A reference is like a pointer in that it’s an address we can follow to access the data stored at that address; that data is owned by some other variable.&lt;/p>
&lt;h2 id="module-systems">Module Systems
&lt;/h2>&lt;ul>
&lt;li>&lt;strong>Packages:&lt;/strong> A Cargo feature that lets you build, test, and share crates&lt;/li>
&lt;li>&lt;strong>Crates:&lt;/strong> A tree of modules that produces a library or executable&lt;/li>
&lt;li>&lt;strong>Modules&lt;/strong> and &lt;strong>use:&lt;/strong> Let you control the organization, scope, and privacy of paths&lt;/li>
&lt;li>&lt;strong>Paths:&lt;/strong> A way of naming an item, such as a struct, function, or module&lt;/li>
&lt;/ul></description></item><item><title>【Kotlin】Basics</title><link>https://dyhes.github.io/p/kotlinbasics/</link><pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/kotlinbasics/</guid><description>&lt;p>In Kotlin, code statements do not have to end with a semicolon (&lt;code>;&lt;/code>)&lt;/p>
&lt;p>The &lt;code>println()&lt;/code> function is used to output values/print text&lt;/p>
&lt;p>There is also a &lt;code>print()&lt;/code> function, which is similar to &lt;code>println()&lt;/code>. The only difference is that it does not insert a new line at the end of the output&lt;/p>
&lt;h2 id="variables">Variables
&lt;/h2>&lt;p>To create a variable, use &lt;code>var&lt;/code> or &lt;code>val&lt;/code>, and assign a value to it with the equal sign (&lt;code>=&lt;/code>):&lt;/p>
&lt;p>The difference between &lt;code>var&lt;/code> and &lt;code>val&lt;/code> is that variables declared with the &lt;code>var&lt;/code> keyword &lt;strong>can be changed/modified&lt;/strong>, while &lt;code>val&lt;/code> variables &lt;strong>cannot&lt;/strong>.&lt;/p>
&lt;p>Unlike many other programming languages, variables in Kotlin do not need to be declared with a specified &lt;em>type&lt;/em>&lt;/p>
&lt;p>However, it is possible to specify the type if you insist&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">var&lt;/span> &lt;span class="py">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;John&amp;#34;&lt;/span> &lt;span class="c1">// String
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">birthyear&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1975&lt;/span> &lt;span class="c1">// Int
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can also declare a variable without assigning the value, and assign the value later. &lt;strong>However&lt;/strong>, this is only possible when you specify the type&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">var&lt;/span> &lt;span class="py">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">name&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;John&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can also use the &lt;code>+&lt;/code> character to add a variable to another variable&lt;/p>
&lt;h4 id="name-rules">name rules
&lt;/h4>&lt;p>The general rule for Kotlin variables are:&lt;/p>
&lt;ul>
&lt;li>Names can contain letters, digits, underscores, and dollar signs&lt;/li>
&lt;li>Names should start with a letter&lt;/li>
&lt;li>Names can also begin with $ and _ (but we will not use it in this tutorial)&lt;/li>
&lt;li>Names are case sensitive (&amp;ldquo;myVar&amp;rdquo; and &amp;ldquo;myvar&amp;rdquo; are different variables)&lt;/li>
&lt;li>Names should start with a lowercase letter and it cannot contain whitespace&lt;/li>
&lt;li>Reserved words (like Kotlin keywords, such as &lt;code>var&lt;/code> or &lt;code>String&lt;/code>) cannot be used as names&lt;/li>
&lt;/ul>
&lt;h4 id="date-type">Date Type
&lt;/h4>&lt;p>Data types are divided into different groups:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Numbers&lt;/p>
&lt;p>Number types are divided into two groups:&lt;/p>
&lt;p>&lt;strong>Integer types&lt;/strong> store whole numbers, positive or negative (such as 123 or -456), without decimals. Valid types are &lt;code>Byte&lt;/code>, &lt;code>Short&lt;/code>, &lt;code>Int&lt;/code> and &lt;code>Long&lt;/code>.&lt;/p>
&lt;p>&lt;strong>Floating point types&lt;/strong> represent numbers with a fractional part, containing one or more decimals. There are two types: &lt;code>Float&lt;/code> and &lt;code>Double&lt;/code>.&lt;/p>
&lt;p>To convert a numeric data type to another type, you must use one of the following functions: &lt;code>toByte()&lt;/code>, &lt;code>toShort()&lt;/code>, &lt;code>toInt()&lt;/code>, &lt;code>toLong()&lt;/code>, &lt;code>toFloat()&lt;/code>, &lt;code>toDouble()&lt;/code> or &lt;code>toChar()&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Characters&lt;/p>
&lt;p>The &lt;code>Char&lt;/code> data type is used to store a &lt;strong>single&lt;/strong> character. A char value must be surrounded by &lt;strong>single&lt;/strong> quotes&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Booleans&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Strings&lt;/p>
&lt;p>Instead of concatenation, you can also use &amp;ldquo;string templates&amp;rdquo;, which is an easy way to add variables and expressions inside a string.&lt;/p>
&lt;p>Just refer to the variable with the &lt;code>$&lt;/code> symbol:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">var&lt;/span> &lt;span class="py">firstName&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;John&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">var&lt;/span> &lt;span class="py">lastName&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;Doe&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;My name is &lt;/span>&lt;span class="si">$firstName&lt;/span>&lt;span class="s2"> &lt;/span>&lt;span class="si">$lastName&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Arrays&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="condition">Condition
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;code>if..else&lt;/code>:In Kotlin, you can also use &lt;code>if..else&lt;/code> statements as expressions (assign a value to a variable and return it):&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Instead of writing many &lt;code>if..else&lt;/code> expressions, you can use the &lt;code>when&lt;/code> expression(like &lt;code>switch-case&lt;/code>), which is much easier to read. The &lt;code>when&lt;/code> expression is similar to the &lt;code>switch&lt;/code> statement in Java.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">val&lt;/span> &lt;span class="py">day&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">val&lt;/span> &lt;span class="py">result&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">when&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">day&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">1&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="s2">&amp;#34;Monday&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">2&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="s2">&amp;#34;Tuesday&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">3&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="s2">&amp;#34;Wednesday&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">4&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="s2">&amp;#34;Thursday&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">5&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="s2">&amp;#34;Friday&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">6&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="s2">&amp;#34;Saturday&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">7&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="s2">&amp;#34;Sunday&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="s2">&amp;#34;Invalid day.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;code>for...in&lt;/code>&lt;/p>
&lt;p>With the &lt;a class="link" href="https://www.w3schools.com/kotlin/kotlin_for_loop.php" target="_blank" rel="noopener"
>&lt;code>for&lt;/code> loop&lt;/a>, you can also create &lt;strong>ranges&lt;/strong> of values with &amp;ldquo;&lt;code>..&lt;/code>&amp;rdquo;:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">chars&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="sc">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="sc">&amp;#39;x&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">chars&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="arrays">Arrays
&lt;/h2>&lt;p>Arrays are used to store multiple values in a single variable, instead of creating separate variables for each value.&lt;/p>
&lt;p>To create an array, use the &lt;code>arrayOf()&lt;/code> function, and place the values in a comma-separated list inside it:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">val&lt;/span> &lt;span class="py">cars&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">arrayOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Volvo&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;BMW&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Ford&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Mazda&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="functions">Functions
&lt;/h2>&lt;p>The &lt;code>fun&lt;/code> keyword is used to declare a function.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">myFunction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="m">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There is also a shorter syntax for returning values. You can use the &lt;code>=&lt;/code> operator instead of &lt;code>return&lt;/code> without specifying the return type. Kotlin is smart enough to automatically find out what it is:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">myFunction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="n">y&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">var&lt;/span> &lt;span class="py">result&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">myFunction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="class">Class
&lt;/h2>&lt;p>we can use the class name to create objects.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Class&lt;/span> &lt;span class="n">Car&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">..&lt;/span>&lt;span class="p">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">var&lt;/span> &lt;span class="py">car&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="n">Car&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="inheritance">inheritance
&lt;/h4>&lt;p>Use the &lt;code>open&lt;/code> keyword in front of the &lt;strong>superclass&lt;/strong>/parent, to make this the class other classes should inherit properties and functions from.&lt;/p>
&lt;p>To inherit from a class, specify the name of the &lt;strong>subclass&lt;/strong>, followed by a colon &lt;code>:&lt;/code>, and then the name of the &lt;strong>superclass&lt;/strong>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Superclass
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">open&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">MyParentClass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">x&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Subclass
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">MyChildClass&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">MyParentClass&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fun&lt;/span> &lt;span class="nf">myFunction&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// x is now inherited from the superclass
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Create an object of MyChildClass and call myFunction
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">myObj&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">MyChildClass&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">myObj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">myFunction&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>*unrar x -o- -y dtu_training.rar /home/lab303/PointMVSNet/&lt;/p></description></item><item><title>【Scala】浅窥</title><link>https://dyhes.github.io/p/scala%E6%B5%85%E7%AA%A5/</link><pubDate>Mon, 13 Jun 2022 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/scala%E6%B5%85%E7%AA%A5/</guid><description>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-scala" data-lang="scala">&lt;span class="line">&lt;span class="cl">&lt;span class="k">object&lt;/span> &lt;span class="nc">HelloWorld&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="k">:&lt;/span> &lt;span class="kt">Array&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="kt">String&lt;/span>&lt;span class="o">])&lt;/span>&lt;span class="k">:&lt;/span> &lt;span class="kt">Unit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Hello, world!&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Static members (methods or fields) do not exist in Scala. Rather than defining static members, the Scala programmer declares these members in singleton objects.&lt;/p>
&lt;p>To compile the example, we use &lt;code>scalac&lt;/code>, the Scala compiler.&lt;/p>
&lt;p>One of Scala’s strengths is that it makes it very easy to interact with Java code. All classes from the &lt;code>java.lang&lt;/code> package are imported by default, while others need to be imported explicitly.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-scala" data-lang="scala">&lt;span class="line">&lt;span class="cl">&lt;span class="k">import&lt;/span> &lt;span class="nn">java.util.&lt;/span>&lt;span class="o">{&lt;/span>&lt;span class="nc">Date&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nc">Locale&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">import&lt;/span> &lt;span class="nn">java.text.DateFormat._&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">object&lt;/span> &lt;span class="nc">FrenchDate&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="k">:&lt;/span> &lt;span class="kt">Array&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="kt">String&lt;/span>&lt;span class="o">])&lt;/span>&lt;span class="k">:&lt;/span> &lt;span class="kt">Unit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="n">now&lt;/span> &lt;span class="k">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nc">Date&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="n">df&lt;/span> &lt;span class="k">=&lt;/span> &lt;span class="n">getDateInstance&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nc">LONG&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nc">Locale&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="nc">FRANCE&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">df&lt;/span> &lt;span class="n">format&lt;/span> &lt;span class="n">now&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This last line shows an interesting property of Scala’s syntax. Methods taking one argument can be used with an infix syntax.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-scala" data-lang="scala">&lt;span class="line">&lt;span class="cl">&lt;span class="n">df&lt;/span> &lt;span class="n">format&lt;/span> &lt;span class="n">now&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">df&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">now&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Scala is a pure object-oriented language in the sense that &lt;em>everything&lt;/em> is an object, including numbers or functions.&lt;/p>
&lt;p>Classes in Scala are declared using a syntax which is close to Java’s syntax. One important difference is that classes in Scala can have parameters.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-scala" data-lang="scala">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Complex&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">real&lt;/span>&lt;span class="k">:&lt;/span> &lt;span class="kt">Double&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">imaginary&lt;/span>&lt;span class="k">:&lt;/span> &lt;span class="kt">Double&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="n">re&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">=&lt;/span> &lt;span class="n">real&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="n">im&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">=&lt;/span> &lt;span class="n">imaginary&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//a better way
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Complex&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">real&lt;/span>&lt;span class="k">:&lt;/span> &lt;span class="kt">Double&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">imaginary&lt;/span>&lt;span class="k">:&lt;/span> &lt;span class="kt">Double&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="n">re&lt;/span> &lt;span class="k">=&lt;/span> &lt;span class="n">real&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="n">im&lt;/span> &lt;span class="k">=&lt;/span> &lt;span class="n">imaginary&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-scala" data-lang="scala">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Complex&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">real&lt;/span>&lt;span class="k">:&lt;/span> &lt;span class="kt">Double&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">imaginary&lt;/span>&lt;span class="k">:&lt;/span> &lt;span class="kt">Double&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="n">re&lt;/span> &lt;span class="k">=&lt;/span> &lt;span class="n">real&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="n">im&lt;/span> &lt;span class="k">=&lt;/span> &lt;span class="n">imaginary&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">override&lt;/span> &lt;span class="k">def&lt;/span> &lt;span class="n">toString&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="k">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">re&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">im&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="s">&amp;#34;+&amp;#34;&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">im&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;i&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-scala" data-lang="scala">&lt;span class="line">&lt;span class="cl">&lt;span class="k">type&lt;/span> &lt;span class="kt">Environment&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nc">String&lt;/span> &lt;span class="k">=&amp;gt;&lt;/span> &lt;span class="nc">Int&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>【JS】Interview Preparation</title><link>https://dyhes.github.io/p/jsinterview-preparation/</link><pubDate>Thu, 05 May 2022 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/jsinterview-preparation/</guid><description>&lt;h3 id="1-原型--构造函数--实例">1. 原型 / 构造函数 / 实例
&lt;/h3>&lt;ul>
&lt;li>原型&lt;code>(prototype)&lt;/code>: 一个简单的对象，用于实现对象的 &lt;strong>属性继承&lt;/strong>。在 Firefox 和 Chrome 中，每个&lt;code>JavaScript&lt;/code>对象中都包含一个&lt;code>__proto__&lt;/code> (非标准)的属性指向该对象的原型，可通过&lt;code>obj.__proto__&lt;/code>进行访问。&lt;/li>
&lt;li>构造函数: 可以通过&lt;code>new&lt;/code>来 &lt;strong>新建一个对象&lt;/strong> 的函数。&lt;/li>
&lt;li>实例: 通过构造函数和&lt;code>new&lt;/code>创建出来的对象，便是实例。 &lt;strong>实例通过&lt;code>__proto__&lt;/code>指向原型，通过&lt;code>constructor&lt;/code>指向构造函数（借助原型）&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 实例
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">instance&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Object&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>则此时， &lt;strong>实例为&lt;code>instance&lt;/code>&lt;/strong>, &lt;strong>构造函数为&lt;code>Object&lt;/code>&lt;/strong>，我们知道，构造函数拥有一个&lt;code>prototype&lt;/code>的属性指向原型，因此原型为:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 原型
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">prototype&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prototype&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>三者的关系:&lt;/p>
&lt;pre tabindex="0">&lt;code>实例.__proto__ === 原型
原型.constructor === 构造函数
构造函数.prototype === 原型
&lt;/code>&lt;/pre>&lt;h3 id="2原型链">2.原型链
&lt;/h3>&lt;p>&lt;strong>原型链是由原型对象组成&lt;/strong>，每个对象都有 &lt;code>__proto__&lt;/code> 属性，指向了创建该对象的构造函数的原型，&lt;code>__proto__&lt;/code> 将对象连接起来组成了原型链。是一个用来&lt;strong>实现继承和共享属性&lt;/strong>的有限的对象链。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>属性查找机制&lt;/strong>: 当查找对象的属性时，如果实例对象自身不存在该属性，则&lt;strong>沿着原型链&lt;/strong>往上一级查找，找到时则输出，不存在时，则继续沿着原型链往上一级查找，直至最顶级的原型对象&lt;code>Object.prototype&lt;/code>，如还是没找到，则输出 &lt;code>undefined&lt;/code>；&lt;/li>
&lt;li>&lt;strong>属性修改机制&lt;/strong>: 只会修改实例对象本身的属性，如果不存在，则进行添加该属性，如果需要修改原型的属性时，则可以用: &lt;code>b.prototype.x = 2&lt;/code>；但是这样会造成&lt;strong>所有&lt;/strong>继承于该对象的实例的属性发生改变。&lt;/li>
&lt;/ul>
&lt;h3 id="3-对象的拷贝">3. 对象的拷贝
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>浅拷贝: 以赋值的形式拷贝引用对象，仍指向同一个地址，&lt;strong>修改时原对象也会受到影响&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>Object.assign&lt;/code>&lt;/li>
&lt;li>展开运算符(&amp;hellip;)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>深拷贝: 完全拷贝一个新对象，&lt;strong>修改时原对象不再受到任何影响&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">JSON&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">JSON&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stringify&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">obj&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>: 性能最快&lt;/p>
&lt;ul>
&lt;li>具有循环引用的对象时，报错&lt;/li>
&lt;li>当值为函数、&lt;code>undefined&lt;/code>、或&lt;code>symbol&lt;/code>时，无法拷贝&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>递归进行逐一赋值&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="4-new运算符的执行过程">4. new运算符的执行过程
&lt;/h3>&lt;ul>
&lt;li>新生成一个对象&lt;/li>
&lt;li>链接到原型: &lt;code>obj.__proto__ = Con.prototype&lt;/code>&lt;/li>
&lt;li>绑定this: &lt;code>apply&lt;/code>&lt;/li>
&lt;li>返回新对象(如果构造函数有自己 retrun 时，则返回该值)&lt;/li>
&lt;/ul>
&lt;h3 id="5-instanceof原理">5. instanceof原理
&lt;/h3>&lt;p>能在实例的 &lt;strong>原型对象链&lt;/strong> 中找到该构造函数的&lt;code>prototype&lt;/code>属性所指向的 &lt;strong>原型对象&lt;/strong>，就返回&lt;code>true&lt;/code>。即:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// __proto__: 代表原型对象链
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">instance&lt;/span>&lt;span class="p">.[&lt;/span>&lt;span class="nx">__proto__&lt;/span>&lt;span class="p">...]&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="nx">instance&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">constructor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prototype&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// return true
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="6-类型转换">6. 类型转换
&lt;/h3>&lt;ul>
&lt;li>-、*、/、% ：一律转换成数值后计算&lt;/li>
&lt;li>+：
&lt;ul>
&lt;li>数字 + 字符串 = 字符串， 运算顺序是从左到右&lt;/li>
&lt;li>数字 + 对象， 优先调用对象的&lt;code>valueOf&lt;/code> -&amp;gt; &lt;code>toString&lt;/code>&lt;/li>
&lt;li>数字 + &lt;code>boolean/null&lt;/code> -&amp;gt; 数字&lt;/li>
&lt;li>数字 + &lt;code>undefined&lt;/code> -&amp;gt; &lt;code>NaN&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>[1].toString() === '1'&lt;/code>&lt;/li>
&lt;li>&lt;code>{}.toString() === '[object object]'&lt;/code>&lt;/li>
&lt;li>&lt;code>NaN&lt;/code> !== &lt;code>NaN&lt;/code> 、`+undefined 为 NaN&lt;/li>
&lt;/ul>
&lt;h3 id="7-防抖与节流">7. 防抖与节流
&lt;/h3>&lt;p>防抖与节流函数是一种最常用的 &lt;strong>高频触发优化方式&lt;/strong>，能对性能有较大的帮助。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>防抖 (debounce)&lt;/strong>: 将多次高频操作优化为只在最后一次执行，通常使用的场景是：用户输入，只需再输入完成后做一次输入校验即可。&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>function debounce(fn, wait, immediate) {
let timer = null
return function() {
let args = arguments
let context = this
if (immediate &amp;amp;&amp;amp; !timer) {
fn.apply(context, args)
}
if (timer) clearTimeout(timer)
timer = setTimeout(() =&amp;gt; {
fn.apply(context, args)
}, wait)
}
}
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;strong>节流(throttle)&lt;/strong>: 每隔一段时间后执行一次，也就是降低频率，将高频操作优化成低频操作，通常使用场景: 滚动条事件 或者 resize 事件，通常每隔 100~500 ms执行一次即可。&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>function throttle(fn, wait, immediate) {
let timer = null
let callNow = immediate
return function() {
let context = this,
args = arguments
if (callNow) {
fn.apply(context, args)
callNow = false
}
if (!timer) {
timer = setTimeout(() =&amp;gt; {
fn.apply(context, args)
timer = null
}, wait)
}
}
}
&lt;/code>&lt;/pre></description></item><item><title>【Java】注解与反射</title><link>https://dyhes.github.io/p/java%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84/</link><pubDate>Fri, 07 Jan 2022 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/java%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84/</guid><description>&lt;h2 id="class类">Class类
&lt;/h2>&lt;p>Class类的实例提供了特定数据类型的相关信息。&lt;/p>
&lt;p>一个Class类的对象实际上表示的是&lt;strong>一种类型&lt;/strong>。&lt;/p>
&lt;p>获取Class的三种方式&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//（1）.getClass()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">Employee&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">Class&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getClass&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">//（2）Class.forName()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">Class&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">info&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Class&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">forName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;java.util.Date&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">//（3）T.Class&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">Class&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">info1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">Class&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">info2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Double&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="反射">反射
&lt;/h3>&lt;p>所谓“反射（Reflection）”，就是把Java类中的各种成份映射成相应的另外一些特殊的Java类的实例，从而允许程序在运行时动态地完成一些工作：比如动态装载类型并创建实例，查询类的成员信息，动态地调用方法等。反射技术的&lt;strong>核心类型&lt;/strong>是Class类。&lt;/p>
&lt;p>不管每个类型创建了多少个实例，也不管你用什么方法获取此类型的Class实例，每个类型都只对应一个Class实例。&lt;/p>
&lt;h2 id="动态创建对象">动态创建对象
&lt;/h2>&lt;p>使用构造方法对象或Class对象的&lt;code>newInstance()&lt;/code>方法动态创建指定类型的对象&lt;/p>
&lt;h2 id="注解">注解
&lt;/h2>&lt;p>注解相当于一种标记，加了注解就等于给代码打上了某个标记。javac编译器、 IntelliJ之类IDE以及其他一些注解处理工具（Annotation Processing Tool，APT）就 可以利用它来完成一些特殊的工作。&lt;/p>
&lt;ul>
&lt;li>@Deprecated：标记类的成员已过时&lt;/li>
&lt;li>@Override：要求子类必须覆盖基类的方法&lt;/li>
&lt;li>@Serializable：指定某个类是可以序列化的&lt;/li>
&lt;li>@FunctionalInterface：指定某个方法重写了基类的同名方法&lt;/li>
&lt;/ul>
&lt;h3 id="自定义">自定义
&lt;/h3>&lt;p>注解，其实就是一个使用@interface定义的接口&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nd">@interface&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">MyTestAnnotation&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="元注解">元注解
&lt;/h3>&lt;p>定义注解的类型也可以添加“注解”，这种针对“注解”的“注解”， 称为“元注解（meta-annotation）”&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Retention&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">RetentionPolicy&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">RUNTIME&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//指明注解生存的时间&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nd">@Target&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="n">ElementType&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">METHOD&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">ElementType&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">TYPE&lt;/span>&lt;span class="p">})&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//指明注解适用的场合&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nd">@interface&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">MyTestAnnotation&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>【Java】IO</title><link>https://dyhes.github.io/p/javaio/</link><pubDate>Wed, 05 Jan 2022 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/javaio/</guid><description>&lt;p>从文件中读取内容，向文件中写入内容，截短文件、合并文 件、压缩文件……，诸如此类的操作，称为&lt;strong>文件存取操作&lt;/strong>， 主要使用“流（Stream）”来完成&lt;/p>
&lt;p>与文件操作相关的类，集中于java.io包中。&lt;/p>
&lt;p>Java 1.4中加入了一个New I/O API，提供了一些类完成文件和流操作。&lt;/p>
&lt;p>Java 7中又加入了一些新类型，称为NIO.2，NIO.2中最重要的是引入了&lt;strong>Path&lt;/strong>和 &lt;strong>AutoCloseable&lt;/strong>接口，还有一个&lt;strong>Files类&lt;/strong>，它的静态方法封装了文件的常用操作。&lt;/p>
&lt;h2 id="file类">File类
&lt;/h2>&lt;p>Java使用File类来统一操作文件和文件夹。&lt;/p>
&lt;ul>
&lt;li>java.io.File代表与平台无关的文件或目录。也就是说可以通过File类在Java程序中操作文件或目录；&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>File类只能用来&lt;strong>操作&lt;/strong>文件或目录（包括新建、删除、重命名文件和目录等操作），但&lt;strong>不能用来访问&lt;/strong>文件中的内容；&lt;/li>
&lt;li>如果需要访问文件中的内容，则需要使用输入/输出流。&lt;/li>
&lt;/ul>
&lt;p>&lt;code>RandomAccessFile&lt;/code>（随机文件操作）：一个独立的类，直接继承至Object.它的功能丰富，可以从文件的任意位置进行存取（输入输出）操作。&lt;code>RandomAccessFile&lt;/code>类支持“随机访问”方式，这里“随机”是指可以跳转到文件的任意位置处读写数据。 在访问一个文件的时候，不必把文件从头读到尾，而是希望像访问一个数据库一样“随心所欲”地访问一个文件的某个部分，这时使用类就是最佳选择。‎
&lt;code>RandomAccessFile&lt;/code>对象类有个&lt;strong>位置指示器‎&lt;/strong>‎，指向当前读写处的位置，当前读写n个字节后，文件指示器将指向这n个字节后面的下一个字节处。 刚打开文件时，文件指示器指向文件的开头处，可以移动文件指示器到新的位置，随后的读写操作将从新的位置开始。 类在数据等长记录格式文件的随机（相对顺序而言）读取时有很大的优势，但该类仅限于操作文件，不能访问其他的I/O设备，如网络、内存映像等。&lt;/p>
&lt;h2 id="io-stream">&lt;strong>IO Stream&lt;/strong>
&lt;/h2>&lt;h4 id="分类">分类
&lt;/h4>&lt;ul>
&lt;li>
&lt;p>根据操作数据类型（&lt;em>能用记事本打开并能看到其中的字符内容的是文本文件，反之是二进制文件&lt;/em>）&lt;/p>
&lt;ul>
&lt;li>
&lt;p>字节流：二进制，以字节为单位&lt;/p>
&lt;p>字节流的两个基类 InputStream和OutputStream&lt;/p>
&lt;p>凡是以InputStream或OutputStream结尾的类型为字节流&lt;/p>
&lt;/li>
&lt;li>
&lt;p>字符流：文本,以字符（2个字节）为单位&lt;/p>
&lt;p>字符流的两个基类 Reader和Writer&lt;/p>
&lt;p>凡是以Reader或Writer结尾的均为字符流&lt;/p>
&lt;/li>
&lt;li>
&lt;p>区别&lt;/p>
&lt;ul>
&lt;li>字节流没有缓冲区，是直接输出的，而字符流是输出到缓冲区的。因此在输出时，字节流不调用&lt;code>colse()&lt;/code>方法时，信息已经输出了，而字符流只有在调用close()方法关闭缓冲区时，信息才输出。要想字符流在未关闭时输出信息，则需要手动调用flush()方法；&lt;/li>
&lt;li>读写单位不同：字节流以字节（&lt;code>8bit&lt;/code>）为单位，字符流以字符为单位，根据码表映射字符，一次可能读多个字节；&lt;/li>
&lt;li>处理对象不同：字节流能处理所有类型的数据（如图片、&lt;code>avi&lt;/code>等），而字符流只能处理字符类型的数据；&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>根据流向&lt;/p>
&lt;ul>
&lt;li>输入流&lt;/li>
&lt;li>输出流&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>根据具体功能&lt;/p>
&lt;ul>
&lt;li>
&lt;p>节点流：以从或向一个特定的地方（节点）读写数据。&lt;/p>
&lt;p>1、文件： &lt;code>FileInputStream&lt;/code> 、&lt;code>FileOutputStream&lt;/code>、 &lt;code>FileReader&lt;/code>和 &lt;code>FileWriter&lt;/code> 文件进行处理的节点流； 　　&lt;/p>
&lt;p>2、字符串： &lt;code>StringReader&lt;/code> 和&lt;code>StringWriter&lt;/code> 对字符串进行处理的节点流； 　　&lt;/p>
&lt;p>3、数组： &lt;code>ByteArrayInputStream&lt;/code>、&lt;code>ByteArrayOutputStream&lt;/code>、&lt;code>CharArrayReader&lt;/code>和&lt;code>CharArrayWriter&lt;/code> 对数组进行处理的节点流(对应的不再是文件，而是内存中的一个数组)； 　　&lt;/p>
&lt;p>4、管道： &lt;code>PipedInputStream&lt;/code> 、&lt;code>PipedOutputStream&lt;/code> 和&lt;code>PipedReaderPipedWriter&lt;/code>对管道进行处理的节点流； 　　&lt;/p>
&lt;p>5、基类： &lt;code>InputStream&lt;/code>、 &lt;code>OutputStream&lt;/code>、 &lt;code>Reader&lt;/code>和 &lt;code>Writer&lt;/code>；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>处理流：是对一个已存在的流的&lt;strong>连接和封装&lt;/strong>，通过所封装的流的功能调用实现数据读写。处理流的构造方法总是要带一个其他的流对象做参数。一个流对象经过其他流的多次包装，称为流的链接。&lt;/p>
&lt;p>1、缓冲流：&lt;code>BufferedInputStream&lt;/code>、 &lt;code>BufferedOutputStream&lt;/code>、 &lt;code>BufferedReader&lt;/code>和&lt;code>BufferedWriter&lt;/code> 　增加缓冲功能，避免频繁读写硬盘。 　　&lt;/p>
&lt;p>2、转换流：&lt;code>InputStreamReader&lt;/code>和 &lt;code>OutputStreamReader&lt;/code>实现字节流和字符流之间的转换。 　　&lt;/p>
&lt;p>3、数据流 &lt;code>DataInputStream&lt;/code>和&lt;code>DataOutputStream&lt;/code>等提供将基础数据类型写入到文件中，或者读取出来。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://pics2.baidu.com/feed/6159252dd42a28341e23dde5587a81ec17cebfa8.jpeg?token=201587ab58af94624ef1a60c83d1e396&amp;amp;s=C8611F7091BFE5CC1C5D95CB000030B2"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>&lt;img src="https://pic4.zhimg.com/80/v2-a001c51e37e77edf5a73dbba3bc80153_1440w.jpg"
loading="lazy"
alt="img"
>&lt;/p>
&lt;h4 id="关闭流">关闭流
&lt;/h4>&lt;p>&lt;strong>流关闭的原则&lt;/strong>：先打开先关闭；如果A依赖B，则先关闭A再关闭B；对于处理流如果将节点流关闭以后再关闭处理流，会抛出IO异常，所以直接关闭处理流就行了，会自动调用关闭里面节点流的方法。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>注意&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>如果将节点流关闭以后再关闭处理流，会抛出IO异常&lt;/li>
&lt;li>如果关闭了处理流，在关闭与之相关的节点流，也可能出现IO异常。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h4 id="inputstream">InputStream
&lt;/h4>&lt;p>&lt;img src="https://pic1.zhimg.com/80/v2-d464303fd5be6fdb7b11678857824520_1440w.jpg"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>&lt;code>ByteArrayInputStream&lt;/code>：字节数组输入流，它的内部缓冲区就是一个字节数组，该类的功能就是从字节数组(&lt;code>byte[]&lt;/code>)中进行以字节为单位的读取资源文件；&lt;/p>
&lt;p>&lt;code>PipedInputStream&lt;/code>：管道字节输入流，它和&lt;code>PipedOutputStream&lt;/code>一起使用，能实现**多线程间的管道通信。**多线程管道通信的主要流程是在一个线程中向&lt;code>PipedOutputStream&lt;/code>写入数据，这些数据会自动传送到对应的管道输入流&lt;code>PipedInputStream&lt;/code>中，其他线程通过读取&lt;code>PipeInputStream&lt;/code>中缓冲的数据实现多线程间通信；&lt;/p>
&lt;p>&lt;code>FilterInputStream&lt;/code> ：过滤输入流，装饰者模式中处于装饰者，具体的装饰者都要继承它，所以在该类的子类下都是用来装饰别的流的，也就是处理类。常见的子类有&lt;code>DataInputStream&lt;/code>和&lt;code>BufferedInputStream&lt;/code>；&lt;/p>
&lt;p>&lt;code>BufferedInputStream&lt;/code>：缓冲输入流，由于基础输入流一个字节一个字节读取,频繁与磁盘进行交互,造成读取速度较低.缓冲流的存在就是先将数据读取到缓冲流(内存中),然后一次性从内存中读取多个字符.提高读取的效率；&lt;/p>
&lt;p>&lt;code>DataInputStream&lt;/code>：数据输入流,以机器无关的方式读取Java的基本类型；&lt;/p>
&lt;p>&lt;code>FileInputSream&lt;/code>：文件输入流，它通常用于对文件进行读取操作；&lt;/p>
&lt;p>&lt;code>File&lt;/code>：对指定目录的文件进行操作。注意，该类虽然是在IO包下，但是并不继承自四大基础类；&lt;/p>
&lt;p>&lt;code>ObjectInputStream&lt;/code>：对象输入流，用来提供对“基本数据或对象”的持久存储。通俗点讲，也就是能直接传输对象（反序列化中使用）。&lt;/p>
&lt;h4 id="outputstream">OutputStream
&lt;/h4>&lt;p>&lt;img src="https://pic4.zhimg.com/80/v2-e208c6f6b8021e0d2a3c519fcbecb6d7_1440w.jpg"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>&lt;code>ByteArrayOutputStream&lt;/code>：字节数组输出流，它的内部缓冲区就是一个字节数组，该类的功能就是从字节数组(&lt;code>byte[]&lt;/code>)中进行以字节为单位的写入资源文件；&lt;/p>
&lt;p>&lt;code>PipedOutputStream&lt;/code> ：管道字节输出流，它和&lt;code>PipedInputStream&lt;/code>一起使用，能实现&lt;strong>多线程间的管道通信。&lt;/strong>&lt;/p>
&lt;p>&lt;code>FilterOutputStream&lt;/code> ：过滤输出流，装饰者模式中处于装饰者，具体的装饰者都要继承它，所以在该类的子类下都是用来装饰别的流的，也就是处理类。常见的子类有&lt;code>DatOutputStream&lt;/code>、&lt;code>BufferedOutputStream&lt;/code>和&lt;/p>
&lt;p>&lt;code>BufferedOutputStream&lt;/code>：缓冲输出流，由于基础输入流一个字节一个字节写入,频繁与磁盘进行交互,造成读取速度较低.缓冲流的存在就是先将数据写入到缓冲流(内存中),然后一次性从内存中写入多个字符.提高读取的效率；&lt;/p>
&lt;p>&lt;code>DataOutputStream&lt;/code>：数据输出流,以机器无关的方式读取Java的基本类型；&lt;/p>
&lt;p>&lt;code>PrintStream&lt;/code>：继承了&lt;code>FilterOutputStream&lt;/code>。是&amp;quot;装饰类&amp;quot;的一种,所以属于字节流体系中(与&lt;code>PrintStream&lt;/code>相似的流&lt;code>PrintWriter&lt;/code>继承于&lt;code>Writer&lt;/code>,属于字符流体系中),为其他的输出流添加功能.使它们能够方便打印各种数据值的表示形式；&lt;/p>
&lt;p>&lt;code>FileOutputStream&lt;/code> ：文件输出流，它通常用于对文件进行写入操作；&lt;/p>
&lt;p>&lt;code>ObjectOutputStream&lt;/code> ：对象输出流，用来提供对“基本数据或对象”的持久存储。通俗点讲，也就是能直接传输对象（反序列化中使用），和所有&lt;code>FilterOutputStream&lt;/code> 的子类都是装饰流(序列化中使用)。&lt;/p>
&lt;h4 id="reader">Reader
&lt;/h4>&lt;p>&lt;img src="https://pic1.zhimg.com/80/v2-0e823bac3cb2feab11a1d7db5b598dc4_1440w.jpg"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>&lt;code>CharArrayReader&lt;/code> :字符数组输入流。它和&lt;code>ByteArrayInputStream&lt;/code>类似，只不过&lt;code>ByteArrayInputStream&lt;/code>是字节数组输入流，而&lt;code>CharArray&lt;/code>是字符数组输入流&lt;/p>
&lt;p>&lt;code>PipedReader&lt;/code>:管道字符流， 是从与其它线程共用的管道中读取数据。&lt;/p>
&lt;p>&lt;code>FilterReader&lt;/code>：过滤输入字符流， 是所有自定义具体装饰流的父类，为所有装饰类提供一个标准、只是简单重写了父类Reader的所有方法、要求子类必须重写核心方法、和提供具有自己特色的方法、这里没有像字节流那样有很多的子类来实现不同的功能、可能是因为字符流本来就是字节流的一种装饰、所以在这里没有必要再对其进行装饰、只是提供一个扩展的接口而已；&lt;/p>
&lt;p>&lt;code>BufferedReader&lt;/code>：缓冲字符流， 为了提高字符流读写的效率，引入了缓冲机制，进行字符批量的读写，提高了单个字符读写的效率；&lt;/p>
&lt;p>&lt;code>InputStreamReader&lt;/code>是一个连接字节流和字符流的桥梁，它将字节流转变为字符流；&lt;/p>
&lt;p>&lt;code>FileReader&lt;/code>：继承&lt;code>InputStreamReader&lt;/code>，可以说是一个达到此功能、常用的工具类，在其源代码中明显使用了将&lt;code>FileInputStream&lt;/code> 转变为&lt;code>Reader&lt;/code> 的方法。我们可以从这个类中得到一定的技巧。&lt;code>Reader&lt;/code> 中各个类的用途和使用方法基本和&lt;code>InputStream&lt;/code> 中的类使用一致。后面会有&lt;code>Reader&lt;/code> 与&lt;code>InputStream&lt;/code> 的对应关系。&lt;/p>
&lt;h4 id="writer">Writer
&lt;/h4>&lt;p>&lt;img src="https://pic1.zhimg.com/80/v2-e0bddfb105d00fe202435737684e8240_1440w.jpg"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>&lt;code>CharArrayWriter&lt;/code>、&lt;code>StringWriter&lt;/code> 是两种基本的介质流，它们分别向&lt;code>Char&lt;/code> 数组、&lt;code>String&lt;/code> 中写入数据。&lt;/p>
&lt;p>&lt;code>PipedWriter&lt;/code> 是向与其它线程共用的管道中写入数据 &lt;code>BufferedWriter&lt;/code> 是一个装饰器为&lt;code>Writer&lt;/code> 提供缓冲功能。&lt;/p>
&lt;p>&lt;code>PrintWriter&lt;/code> 和&lt;code>PrintStream&lt;/code> 极其类似，功能和使用也非常相似。&lt;/p>
&lt;p>&lt;code>OutputStreamWriter&lt;/code> 是&lt;code>OutputStream&lt;/code> 到&lt;code>Writer&lt;/code> 转换的桥梁，它的子类&lt;code>FileWriter&lt;/code> 其实就是一个实现此功能的具体类。功能和使用和&lt;code>OutputStream&lt;/code> 极其类似。&lt;/p>
&lt;p>转换流&lt;/p>
&lt;p>&lt;strong>4.1、定义&lt;/strong>：字符和字节直接的转换，是字符流和字节流之间的桥梁，文本文件在硬盘中以字节流的形式存储时，通过&lt;code>InputStreamReader&lt;/code>读取后转化为字符流给程序处理，即可对读取到的字节数据经过指定编码转换成字符；程序处理的字符流通过&lt;code>OutputStreamWriter&lt;/code>转换为字节流保存，即可对读取到的字符数据经过指定编码转换成字节。&lt;/p>
&lt;p>&lt;strong>4.2、何时使用转换流？&lt;/strong>&lt;/p>
&lt;p>①当字节和字符之间有转换动作时； ②流操作的数据需要编码或解码时。&lt;/p>
&lt;p>&lt;strong>4.3、具体的对象体现：&lt;/strong>&lt;/p>
&lt;p>&lt;code>InputStreamReader&lt;/code>:字节到字符的桥梁 &lt;code>OutputStreamWriter&lt;/code>:字符到字节的桥梁 这两个流对象是字符体系中的成员，它们有转换作用，本身又是字符流，所以在构造的时候需要传入字节流对象进来，即：&lt;/p>
&lt;p>&lt;code>InputStreamReader(InputStream in&lt;/code>)：将字节流以字符流输入。&lt;/p>
&lt;p>&lt;code>OutputStreamWriter&lt;/code>(&lt;code>OutStreamout&lt;/code>):将字节流以字符流输出。&lt;/p>
&lt;h4 id="systemin-and-systemout">&lt;code>System.in&lt;/code> and &lt;code>System.out&lt;/code>
&lt;/h4>&lt;p>&lt;strong>System.in&lt;/strong>和&lt;strong>System.out&lt;/strong>分别代表了系统标准的输入和输出设备
默认输入设备是：键盘，输出设备是：显示器
System.in的类型是InputStream
System.out的类型是PrintStream&lt;/p>
&lt;h4 id="对象流">对象流
&lt;/h4>&lt;p>ObjectInputStream和OjbectOutputSteam用于存储和读取基本数据类型数据或对象的处理流。它的强大之处就是可以把Java中的对象写入到数据源中，也能把对象从数据源中还原回来。&lt;/p>
&lt;ul>
&lt;li>序列化：用ObjectOutputStream类保存基本类型数据或对象的机制&lt;/li>
&lt;li>反序列化：用ObjectInputStream类读取基本类型数据或对象的机制&lt;/li>
&lt;/ul>
&lt;p>ObjectOutputStream和ObjectInputStream不能序列化static和transient修饰的成员变量&lt;/p>
&lt;h4 id="总结">总结
&lt;/h4>&lt;p>&lt;code>InputStream&lt;/code>类的功能不足被&lt;code>Scanner&lt;/code>解决了&lt;/p>
&lt;p>&lt;code>OutputStream&lt;/code>类的功能不足被&lt;code>PrintStream&lt;/code>解决了&lt;/p>
&lt;p>&lt;code>Reader&lt;/code>类功能不足被&lt;code>BufferReader&lt;/code>解决了&lt;/p>
&lt;p>&lt;code>Writer&lt;/code>类的功能不足被&lt;code>PrintWriter&lt;/code>解决了&lt;/p>
&lt;p>输出数据用&lt;code>printStream&lt;/code>，&lt;code>printwriter&lt;/code>读取数据用&lt;code>Scanner&lt;/code>其次是&lt;code>bufferReader&lt;/code>&lt;/p>
&lt;h2 id="nio">NIO
&lt;/h2>&lt;p>java.nio全称java non-blocking IO，是指jdk1.4 及以上版本里提供的新api（New IO） ，为所有的原始类型（boolean类型除外）提供缓存支持的数据容器，使用它可以提供非阻塞式的高伸缩性网络。&lt;/p></description></item><item><title>【Java】金旭亮-Java程序设计</title><link>https://dyhes.github.io/p/java%E9%87%91%E6%97%AD%E4%BA%AE-java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</link><pubDate>Sat, 11 Dec 2021 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/java%E9%87%91%E6%97%AD%E4%BA%AE-java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</guid><description>&lt;h2 id="string">String
&lt;/h2>&lt;h3 id="stringbuffer">StringBuffer
&lt;/h3>&lt;p>线程安全&lt;/p>
&lt;ul>
&lt;li>&lt;code>stringbuffer.toString()&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="stringbuilder">StringBuilder
&lt;/h3>&lt;p>线程不安全，因而性能相对更高&lt;/p>
&lt;h2 id="arrays类">Arrays类
&lt;/h2>&lt;p>Arrays类中封装了与数组有关的静态方法&lt;/p>
&lt;ul>
&lt;li>&lt;code>Arrays.CcopyOf()&lt;/code>&lt;/li>
&lt;li>&lt;code>Arrays.sort()&lt;/code>&lt;/li>
&lt;li>&lt;code>Arrays.fill()&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>等&lt;/p>
&lt;h2 id="对象连接">对象连接
&lt;/h2>&lt;p>在“+ ”运算中，当一个对象与一个String对象连接时，会 隐式地调用其toString()方法，默认情况下，此方法返回 “类名 @ + hashCode” 。 为了返回有意义的信息，子类可以重写toString()方法。&lt;/p>
&lt;h2 id="接口">接口
&lt;/h2>&lt;p>在面向对象世界中，可以使用“接口（interface）”来抽象对象的&lt;strong>行为特性&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>eg:能否把“会游泳”、“能被吃”这种特性独立出来作为一种“可选项”，可以被“附加” 到具体对象上？ 这样一来，水鸟可以拥有“会游泳”这个特性，其它种类的鸟就不具备这个特性，但它 可能有其他的特性。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>如果接口不声明为public的，则自动变为package&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>接口类型 接口类型的变量＝ new 实现了接口的具体类型（）；&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以通过继承接口来扩充已有接口，并形成一个新的接口&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="函数式接口">函数式接口
&lt;/h3>&lt;p>JDK中引入了一种“函数式”接口，这种接口只定义有一个公有 方法，使用@FunctionalInterface注解加以标注，这种类型的接口，主要用于“函数式编程”场景&lt;/p>
&lt;h2 id="异常">异常
&lt;/h2>&lt;p>&lt;img src="C:%5cUsers%5cdyhes%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20220417171405687.png"
loading="lazy"
alt="image-20220417171405687"
>&lt;/p>
&lt;ul>
&lt;li>可以有多个catch语句块，每个代码块捕获一种异常。在某个try块后有两个不同的catch 块捕获两个相同类型的异常是语法错误。&lt;/li>
&lt;li>使用catch语句，只能捕获Exception类及其子类的对象。因此，一个捕获Exception对象的catch语句块可以捕获所有“可捕获”的异常。&lt;/li>
&lt;li>将catch(Exception e)放在别的catch块前面会使这些catch块都不执行，因此Java不会编译这个程序&lt;/li>
&lt;/ul>
&lt;p>Java 7 及以后的版本，允许在一个catch块中捕获多个异常。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="k">catch&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SocketException&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">SecurityException&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">NullPointerException&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="泛型">泛型
&lt;/h2>&lt;ul>
&lt;li>不能定义泛型化数组&lt;/li>
&lt;li>不能直接创建泛型类型的实例&lt;/li>
&lt;li>泛型类型不能直接或间接继承自Throwable&lt;/li>
&lt;li>不能定义静态泛型成员&lt;/li>
&lt;li>不允许基类中有泛型参数，从泛型基类派生时，应该给其指定一个具体的类型&lt;/li>
&lt;li>可以在普通类或泛型类中定义泛型方法&lt;/li>
&lt;li>泛型方法支持使用“…”定义个数可变的参数&lt;/li>
&lt;/ul>
&lt;h2 id="泛型约束">泛型约束
&lt;/h2>&lt;ul>
&lt;li>类型约束&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">extends&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Comparable&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">min&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">//…&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">//T extends Comparable &amp;amp; Serializable&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">//多个约束条件中最多只能有一个是类，且必须放在第一位&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>类型通配符&lt;/p>
&lt;p>在泛型约束中使用“?”，可以匹配任意类型。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">printList&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;?&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">lst&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">lst&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="内部类">内部类
&lt;/h2>&lt;p>一个类中包容许多方法和字段，有些字段和方法从逻辑上看具有比较紧密的联系，可以把它们“放在一块”，“视为一个整体”。&lt;/p>
&lt;p>内部类可看成是外部类的成员，其地位等同于类中的其他成员。内部类编译以后，每个内部类都会产生一个.class文件，其文件名通常具有以下格式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">外部类名$内部类名&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="comparable接口">Comparable接口
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//old&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">interface&lt;/span> &lt;span class="nc">Comparable&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">compareTo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">other&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">//new and recomended&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">inteface&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Comparable&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">compareTo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">other&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">X&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">compareTo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Y&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">//对象X和Y相等，返回0&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">//对象X&amp;lt;Y,返回-1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">//X&amp;gt;Y，返回1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>凡是支持大小比较的类型（比如Integer），都实现了Comparable接口。&lt;/p>
&lt;h2 id="-and-equals">‘==’ and &lt;code>equals()&lt;/code>
&lt;/h2>&lt;p>“ ==”施加于对象类型，是比较两个对象变量是否引用同一对象。如果需要比对对象的“内容（即各字段的值）”，通常是调用对象的 equals方法。&lt;/p>
&lt;p>equals方法由Object类所定义，其默认实现如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">boolean&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">equals&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>子类可根据实际情况，“重写（Override）”Object类的equals方法&lt;/p>
&lt;p>重写Object的equals方法，注意其&lt;strong>参数类型必须是“Object”&lt;/strong>&lt;/p>
&lt;p>另外，为了让对象能放入各种容器中，通常还需要重写 hashCode方法。&lt;/p>
&lt;h2 id="对象组合">对象组合
&lt;/h2>&lt;p>一个对象包容另一个对象，称为“对象组合”&lt;/p>
&lt;p>方式：&lt;/p>
&lt;ul>
&lt;li>A对象完全包容B对象，容器对象管理被包容对象的生命期&lt;/li>
&lt;li>B对象是独立的，A对象引用现成的B对象&lt;/li>
&lt;/ul>
&lt;h2 id="cloneable">Cloneable
&lt;/h2>&lt;p>JDK中提供了一个Cloneable接口，需要实现深复制的对象应该实现这一接口。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">interface&lt;/span> &lt;span class="nc">Cloneable&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>像这种根本就没有定义任何一个成员的接口，称为“标记接口”。&lt;/p>
&lt;h2 id="collection">Collection
&lt;/h2>&lt;p>&lt;img src="C:%5cUsers%5cdyhes%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20220417184028233.png"
loading="lazy"
alt="image-20220417184028233"
>&lt;/p>
&lt;h2 id="iterator">Iterator
&lt;/h2>&lt;p>Iterator接口定义了3个方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Iterator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">E&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kt">boolean&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">hasNext&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 是否还有下一个元素&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">E&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">next&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 获取下一个元素&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">remove&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 移除iterator返回的上一个元素&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>所有实现了Collection接口的集合对象，都提供了一个iterator()方法， 以获取一个iterator对象&lt;/p>
&lt;p>JDK 5以后，Collection接口派生自Iterable，因此JDK中内置的所有集合都可以使 用新的foreach语句完成遍历工作&lt;/p>
&lt;p>集合对象有一个forEach()方法，它可以接收一个Lambda表达式，可用于遍历集合元素， 它与foreach循环不是一回事， foreach循环是一种语法特性， forEach则是JDK为集合类型提供的一个方法。&lt;/p>
&lt;p>如果在遍历时非要删除集合中的元素，则必须通过迭代器对象的remove方法， 而不能通过集合对象直接删除。&lt;/p>
&lt;p>尽管确实可以在迭代时移除当前访问的元素，但并不推荐这么做，特别是在多线程环境下，会带来很大的麻烦。推荐的作法是使用Stream API中的filter()方法，过滤掉不需要的元素。&lt;/p>
&lt;h2 id="hashtable">HashTable
&lt;/h2>&lt;p>HashMap和HashTable两者功能与用法基本一样，但HashTable是&lt;strong>线程安全&lt;/strong>的， 另外，HashMap可以使用null作为Key。&lt;/p>
&lt;h3 id="properties">Properties
&lt;/h3>&lt;p>Properties派生自HashTable，可以方便地处理“属性-值”对，并且可以很方便地将其保存到文件中，在编程中很常用&lt;/p>
&lt;h2 id="collections">Collections
&lt;/h2>&lt;p>Java提供了一个工具类Collections，封装了一些集合的常规操作。&lt;/p>
&lt;ul>
&lt;li>更改集合中元素的顺序：reverse、rotate、shuffle、sort和swap&lt;/li>
&lt;li>用一个集合填充另一个集合：copy、fill和replaceAll、 addAll&lt;/li>
&lt;li>获取集合中的最大和最小元素：max、min&lt;/li>
&lt;li>查找元素： binarySearch、 indexOfSubList和lastIndexOfSubList&lt;/li>
&lt;li>创建包容多个相同元素的集合：nCopies&lt;/li>
&lt;/ul>
&lt;h2 id="函数式编程">函数式编程
&lt;/h2>&lt;p>Java对“函数式编程”范式的支持，是从JDK 8引入Lambda表达式之后才开始的，主要包容以下几个部分：&lt;/p>
&lt;ul>
&lt;li>Lambda表达式与函数式接口特性（JDK 8起）&lt;/li>
&lt;li>Stream API（JDK 8起）与Flow API（JDK 9起）&lt;/li>
&lt;li>对JDK原有组件进行改造，以支持函数式编程范式&lt;/li>
&lt;/ul>
&lt;h3 id="函数式接口-1">函数式接口
&lt;/h3>&lt;p>能接收一个Lambda表达式的变量，必须是接口类型，并且这种接口，还必 须是一种“函数式接口（functional interface）”。所谓“函数式接口”，就是“只定义有一个抽象方法的接口”。Java 8中，使用“@FunctionalInterface”标识一个“函数式接口”。&lt;/p>
&lt;p>JDK8 以后接口可有默认方法和静态方法&lt;/p>
&lt;h3 id="方法引用">方法引用
&lt;/h3>&lt;p>&lt;code>ClassName::Method&lt;/code>&lt;/p>
&lt;p>可以把方法引用看作针对仅仅涉及单一方法的Lambda的“语法 糖”&lt;/p>
&lt;h3 id="stream-api">Stream API
&lt;/h3>&lt;p>不同于文件操作中的Stream,而是&lt;strong>从支持数据处理操作的源生成的元素序列&lt;/strong>&lt;/p>
&lt;p>Stream API采用一种“即抽取即使用即丢弃”的方式处理数据，不需要把所有数据都加载到内存中（集合就是这样的）才能工作，所以，能处理很大的数据集&lt;/p>
&lt;p>Stream API中定义的数据处理函数，通常可以级联调用，构成一个数据处理链条&lt;/p>
&lt;p>Stream API中定义的数据处理函数，可以分为&lt;strong>中间操作&lt;/strong>和&lt;strong>终端操作&lt;/strong>&lt;/p>
&lt;p>intermediate operation&lt;/p>
&lt;ul>
&lt;li>&lt;code>peek()&lt;/code>:similar to &lt;code>forEach()&lt;/code>&lt;/li>
&lt;li>&lt;code>limit()&lt;/code>&lt;/li>
&lt;li>&lt;code>skip()&lt;/code>&lt;/li>
&lt;li>&lt;code>filter()&lt;/code>&lt;/li>
&lt;li>&lt;code>sorted()&lt;/code>&lt;/li>
&lt;li>&lt;code>map()&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>terminal operation&lt;/p>
&lt;ul>
&lt;li>&lt;code>forEach()&lt;/code>&lt;/li>
&lt;li>&lt;code>reduce()&lt;/code>&lt;/li>
&lt;li>&lt;code>collect()&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="创建流对象">创建流对象
&lt;/h4>&lt;ul>
&lt;li>基于集合：所有集合对象都实现的Collection接口定义了一个Stream()或 parallelStream()方法，可以通过它来创建流对象&lt;/li>
&lt;li>使用&lt;code>Stream.Of&lt;/code>&lt;/li>
&lt;li>使用&lt;code>Stream.Builder&lt;/code>接口&lt;/li>
&lt;li>针对int、long、double这三种原始数值类型，java 8提供了单独的流类型： IntStream、LongStream和DoubleStream&lt;/li>
&lt;li>&lt;code>Stream.empty()&lt;/code>创建空流&lt;/li>
&lt;/ul>
&lt;h2 id="模块化开发">模块化开发
&lt;/h2>&lt;p>JPMS（Java Platform Module System），是 JDK 9引入的最重要的新特性之一。&lt;/p>
&lt;p>模块化之后，整个程序被分解为若干个严格限定依赖关系的模块。只要不显式声明导出，模块中的所有类外界都是不可访问的。&lt;/p>
&lt;p>模块（module）是包含代码的可识别软件构件，使用了元数据（metadata）来描述模块及其与其他模块的关系。 可以把模块看成是一组用于代码重用的包（package）。模块化（ modularization）是指将系统分解成独立且相互连接的模块的过程。&lt;/p>
&lt;p>打散后的JDK模块， 以.jmod作为文件扩展名。&lt;/p>
&lt;p>模块之间存在着“单向”依赖关系，Java模块系统不允许模块之间 存在编译时的循环依赖&lt;/p>
&lt;p>每个模块都隐式依赖于一个名为“java.base”的特殊模块，它是 一种“聚合器模块（aggregator module）”，这种类型的模块主要用于对其他模块进行逻辑分组，避免在module-info.java中导入太多的模块声明。&lt;/p>
&lt;p>模块设计三个核心原则&lt;/p>
&lt;ul>
&lt;li>强封装性&lt;/li>
&lt;li>定义良好的接口&lt;/li>
&lt;li>显式依赖&lt;/li>
&lt;/ul>
&lt;h2 id="gui-javafx">GUI-JavaFX
&lt;/h2>&lt;p>JavaFX在设计之初就考虑了应用MVC设计模式，整个JavaFX应用 框架围绕着MVC设计模式而展开。&lt;/p>
&lt;p>&lt;img src="C:%5cUsers%5cdyhes%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20220419095921802.png"
loading="lazy"
alt="image-20220419095921802"
>&lt;/p>
&lt;h2 id="javabean">JavaBean
&lt;/h2>&lt;p>JavaBean可以看成是一种编程约定，按照这种约定编写Java类，开发者之间就易于协作，并且代码也易于重用，并且有一些开发工具（比如 NetBeans这样的IDE）能识别JavaBean所定义的各种属性、方法和事件。&lt;/p>
&lt;p>&lt;img src="C:%5cUsers%5cdyhes%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20220419101022585.png"
loading="lazy"
alt="image-20220419101022585"
>&lt;/p>
&lt;p>&lt;a class="link" href="http://www.blog.dyhes.cn/wp-content/uploads/2022/04/image-20220419101022585.png" target="_blank" rel="noopener"
>http://www.blog.dyhes.cn/wp-content/uploads/2022/04/image-20220419101022585.png&lt;/a>&lt;/p></description></item><item><title>【React Native】Concepts</title><link>https://dyhes.github.io/p/react-nativeconcepts/</link><pubDate>Mon, 11 Oct 2021 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/react-nativeconcepts/</guid><description>&lt;p>In Android and iOS development, a &lt;strong>view&lt;/strong> is the &lt;strong>basic building block&lt;/strong> of UI: &lt;strong>a small rectangular element&lt;/strong> on the screen which can be used to display text, images, or respond to user input. Even the smallest visual elements of an app, like a line of text or a button, are kinds of views. Some kinds of views can &lt;strong>contain other views&lt;/strong>.&lt;/p>
&lt;h2 id="native-components">Native Components
&lt;/h2>&lt;p>In Android development, you write views in &lt;strong>Kotlin or Java&lt;/strong>;&lt;/p>
&lt;p>in iOS development, you use &lt;strong>Swift or Objective-C&lt;/strong>.&lt;/p>
&lt;p>With React Native, you can invoke these views with &lt;strong>JavaScript&lt;/strong> using React components.&lt;/p>
&lt;p>At runtime, React Native creates the corresponding Android and iOS views for those components. Because React Native components are backed by the same views as Android and iOS, React Native apps look, feel, and perform like any other apps.&lt;/p>
&lt;p>We call these platform-backed components &lt;strong>Native Components.&lt;/strong>&lt;/p>
&lt;h3 id="core-components">Core Components
&lt;/h3>&lt;p>React Native comes with a set of essential, ready-to-use Native Components you can use to start building your app today. These are React Native&amp;rsquo;s &lt;strong>Core Components&lt;/strong>.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">REACT NATIVE UI COMPONENT&lt;/th>
&lt;th style="text-align: left">ANDROID VIEW&lt;/th>
&lt;th style="text-align: left">IOS VIEW&lt;/th>
&lt;th style="text-align: left">WEB ANALOG&lt;/th>
&lt;th style="text-align: left">DESCRIPTION&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">&lt;code>&amp;lt;View&amp;gt;&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>&amp;lt;ViewGroup&amp;gt;&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>&amp;lt;UIView&amp;gt;&lt;/code>&lt;/td>
&lt;td style="text-align: left">A non-scrollling &lt;code>&amp;lt;div&amp;gt;&lt;/code>&lt;/td>
&lt;td style="text-align: left">A container that supports layout with flexbox, style, some touch handling, and accessibility controls&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;code>&amp;lt;Text&amp;gt;&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>&amp;lt;TextView&amp;gt;&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>&amp;lt;UITextView&amp;gt;&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>&amp;lt;p&amp;gt;&lt;/code>&lt;/td>
&lt;td style="text-align: left">Displays, styles, and nests strings of text and even handles touch events&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;code>&amp;lt;Image&amp;gt;&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>&amp;lt;ImageView&amp;gt;&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>&amp;lt;UIImageView&amp;gt;&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>&amp;lt;img&amp;gt;&lt;/code>&lt;/td>
&lt;td style="text-align: left">Displays different types of images&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;code>&amp;lt;ScrollView&amp;gt;&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>&amp;lt;ScrollView&amp;gt;&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>&amp;lt;UIScrollView&amp;gt;&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>&amp;lt;div&amp;gt;&lt;/code>&lt;/td>
&lt;td style="text-align: left">A generic scrolling container that can contain multiple components and views&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;code>&amp;lt;TextInput&amp;gt;&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>&amp;lt;EditText&amp;gt;&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>&amp;lt;UITextField&amp;gt;&lt;/code>&lt;/td>
&lt;td style="text-align: left">&lt;code>&amp;lt;input type=&amp;quot;text&amp;quot;&amp;gt;&lt;/code>&lt;/td>
&lt;td style="text-align: left">Allows the user to enter text&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;img src="https://reactnative.dev/docs/assets/diagram_react-native-components.svg"
loading="lazy"
alt="A diagram showing React Natives Core Components are a subset of React Components that ship with React Native."
>&lt;/p>
&lt;h2 id="platform-specific--code">Platform Specific Code
&lt;/h2>&lt;p>When building a cross-platform app, you&amp;rsquo;ll want to re-use as much code as possible. Scenarios may arise where it makes sense for the code to be different, for example you may want to implement separate visual components for Android and iOS.&lt;/p>
&lt;p>React Native provides two ways to organize your code and separate it by platform:&lt;/p>
&lt;ul>
&lt;li>Using the &lt;a class="link" href="https://reactnative.dev/docs/platform-specific-code#platform-module" target="_blank" rel="noopener"
>&lt;code>Platform&lt;/code> module&lt;/a>.&lt;/li>
&lt;li>Using &lt;a class="link" href="https://reactnative.dev/docs/platform-specific-code#platform-specific-extensions" target="_blank" rel="noopener"
>platform-specific file extensions&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>Certain components may have properties that work on one platform only. All of these props are annotated with &lt;code>@platform&lt;/code> and have a small badge next to them on the website.&lt;/p>
&lt;h3 id="using-platform-specific-file-extensionshttpsreactnativedevdocsplatform-specific-codeplatform-specific-extensions">Using &lt;a class="link" href="https://reactnative.dev/docs/platform-specific-code#platform-specific-extensions" target="_blank" rel="noopener"
>platform-specific file extensions&lt;/a>.
&lt;/h3>&lt;p>For example, say you have the following files in your project:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">BigButton.ios.js
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">BigButton.android.js
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can then require the component as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="nx">BigButton&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;./BigButton&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>React Native will automatically pick up the right file based on the running platform.&lt;/p>
&lt;p>You can also use the &lt;code>.native.js&lt;/code> extension when a module needs to be shared between NodeJS/Web and React Native but it has no Android/iOS differences. This is especially useful for projects that have common code shared among React Native and ReactJS.&lt;/p>
&lt;p>For example, say you have the following files in your project:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">Container.js &lt;span class="c1">## picked up by Webpack, Rollup or any other Web bundler&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Container.native.js &lt;span class="c1">## picked up by the React Native bundler for both Android and iOS (Metro)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can still require it without the &lt;code>.native&lt;/code> extension, as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="nx">Container&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;./Container&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Pro tip:&lt;/strong> Configure your Web bundler to ignore &lt;code>.native.js&lt;/code> extensions in order to avoid having unused code in your production bundle, thus reducing the final bundle size.&lt;/p>
&lt;h2 id="style">Style
&lt;/h2>&lt;p>With React Native, you style your application using JavaScript. All of the core components accept a prop named &lt;code>style&lt;/code>. The style names and &lt;a class="link" href="https://reactnative.dev/docs/colors" target="_blank" rel="noopener"
>values&lt;/a> usually match how CSS works on the web, except names are written using camel casing&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">styles&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">StyleSheet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">create&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">container&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">marginTop&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">50&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">bigBlue&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">color&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;blue&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fontWeight&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;bold&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fontSize&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">30&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">red&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">color&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;red&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="dimensions">Dimensions
&lt;/h3>&lt;h4 id="fixed-dimensions">Fixed Dimensions
&lt;/h4>&lt;p>The general way to set the dimensions of a component is by adding a fixed &lt;code>width&lt;/code> and &lt;code>height&lt;/code> to style. All dimensions in React Native are unitless, and represent density-independent pixels.&lt;/p>
&lt;h4 id="flex-dimensions">Flex Dimensions
&lt;/h4>&lt;p>Use &lt;code>flex&lt;/code> in a component&amp;rsquo;s style to have the component expand and shrink dynamically based on available space. Normally you will use &lt;code>flex: 1&lt;/code>, which tells a component to fill all available space, shared evenly amongst other components with the same parent. The larger the &lt;code>flex&lt;/code> given, the higher the ratio of space a component will take compared to its siblings.&lt;/p>
&lt;blockquote>
&lt;p>A component can only expand to fill available space if its parent has dimensions greater than &lt;code>0&lt;/code>. If a parent does not have either a fixed &lt;code>width&lt;/code> and &lt;code>height&lt;/code> or &lt;code>flex&lt;/code>, the parent will have dimensions of &lt;code>0&lt;/code> and the &lt;code>flex&lt;/code> children will not be visible.&lt;/p>
&lt;/blockquote>
&lt;h4 id="percentage-dimensions">Percentage Dimensions
&lt;/h4>&lt;p>If you want to fill a certain portion of the screen, but you &lt;em>don&amp;rsquo;t&lt;/em> want to use the &lt;code>flex&lt;/code> layout, you &lt;em>can&lt;/em> use &lt;strong>percentage values&lt;/strong> in the component&amp;rsquo;s style. Similar to flex dimensions, percentage dimensions require parent with a defined size.&lt;/p>
&lt;h3 id="layout">Layout
&lt;/h3>&lt;p>You will normally use a combination of &lt;code>flexDirection&lt;/code>, &lt;code>alignItems&lt;/code>, and &lt;code>justifyContent&lt;/code> to achieve the right layout.&lt;/p>
&lt;h4 id="flexdirection">flexDirection
&lt;/h4>&lt;p>controls the direction in which the children of a node are laid out. This is also referred to as the main axis. The cross axis is the axis perpendicular to the main axis, or the axis which the wrapping lines are laid out in.&lt;/p>
&lt;ul>
&lt;li>column(default)&lt;/li>
&lt;li>row&lt;/li>
&lt;li>column-reverse&lt;/li>
&lt;li>row-reverse&lt;/li>
&lt;/ul>
&lt;h4 id="justifycontent">justifyContent
&lt;/h4>&lt;p>describes how to align children within the main axis of their container.&lt;/p>
&lt;ul>
&lt;li>flex-start(default)&lt;/li>
&lt;li>flex-end&lt;/li>
&lt;li>center&lt;/li>
&lt;li>space-between&lt;/li>
&lt;li>space-around&lt;/li>
&lt;li>space=evenly&lt;/li>
&lt;/ul>
&lt;h4 id="alignitems">alignItems
&lt;/h4>&lt;p>describes how to align children along the cross axis of their container. It is very similar to &lt;code>justifyContent&lt;/code> but instead of applying to the main axis, &lt;code>alignItems&lt;/code> applies to the cross axis.&lt;/p>
&lt;ul>
&lt;li>stretch (default):Stretch children of a container to match the &lt;code>height&lt;/code> of the container&amp;rsquo;s cross axis.&lt;/li>
&lt;li>flex-start&lt;/li>
&lt;li>flex-end&lt;/li>
&lt;li>center&lt;/li>
&lt;li>baseline:Align children of a container along a common baseline. Individual children can be set to be the reference baseline for their parents.&lt;/li>
&lt;/ul>
&lt;h4 id="alignself">alignSelf
&lt;/h4>&lt;p>has the same options and effect as &lt;code>alignItems&lt;/code> but instead of affecting the children within a container, you can apply this property to a single child to change its alignment within its parent. &lt;code>alignSelf&lt;/code> overrides any option set by the parent with &lt;code>alignItems&lt;/code>.&lt;/p>
&lt;blockquote>
&lt;p>The &lt;a class="link" href="https://reactnative.dev/docs/layout-props#flexwrap" target="_blank" rel="noopener"
>&lt;code>flexWrap&lt;/code>&lt;/a> property is set on containers and it controls what happens when children overflow the size of the container along the main axis. By default, children are forced into a single line (which can shrink elements). If wrapping is allowed, items are wrapped into multiple lines along the main axis if needed. When wrapping lines, &lt;code>alignContent&lt;/code> can be used to specify how the lines are placed in the container&lt;/p>
&lt;/blockquote>
&lt;h4 id="flex-basis-grow-and-shrink">Flex Basis, Grow, and Shrink
&lt;/h4>&lt;p>&lt;a class="link" href="https://reactnative.dev/docs/layout-props#flexbasis" target="_blank" rel="noopener"
>&lt;code>flexBasis&lt;/code>&lt;/a> is an axis-independent way of providing the default size of an item along the main axis.&lt;/p>
&lt;p>&lt;a class="link" href="https://reactnative.dev/docs/layout-props#flexgrow" target="_blank" rel="noopener"
>&lt;code>flexGrow&lt;/code>&lt;/a> describes how any space within a container should be distributed among its children along the main axis.&lt;/p>
&lt;p>&lt;a class="link" href="https://reactnative.dev/docs/layout-props#flexshrink" target="_blank" rel="noopener"
>&lt;code>flexShrink&lt;/code>&lt;/a> describes how to shrink children along the main axis in the case in which the total size of the children overflows the size of the container on the main axis.&lt;/p>
&lt;h3 id="image">Image
&lt;/h3>&lt;h4 id="static-image-resources">Static Image Resources
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Image&lt;/span> &lt;span class="na">source&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./img/check.png&amp;#39;&lt;/span>&lt;span class="p">)}&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that image sources required this way include size (width, height) info for the Image. If you need to scale the image dynamically (i.e. via flex), you may need to manually set &lt;code>{ width: undefined, height: undefined }&lt;/code> on the style attribute.&lt;/p>
&lt;h4 id="network-images">Network Images
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Image&lt;/span> &lt;span class="na">source&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{{&lt;/span>&lt;span class="nx">uri&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;https://reactjs.org/logo-og.png&amp;#39;&lt;/span>&lt;span class="p">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{{&lt;/span>&lt;span class="nx">width&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">400&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">height&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">400&lt;/span>&lt;span class="p">}}&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="background-image">Background Image
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">ImageBackground&lt;/span> &lt;span class="na">source&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{...}&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{{&lt;/span>&lt;span class="nx">width&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;100%&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">height&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;100%&amp;#39;&lt;/span>&lt;span class="p">}}&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Text&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">Inside&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">Text&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">ImageBackground&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="handling-touches">Handling Touches
&lt;/h2>&lt;p>Users interact with mobile apps mainly through touch.&lt;/p>
&lt;p>&lt;a class="link" href="https://reactnative.dev/docs/button" target="_blank" rel="noopener"
>Button&lt;/a> provides a basic button component that is rendered nicely on all platforms.&lt;/p>
&lt;p>If the basic button doesn&amp;rsquo;t look right for your app, you can build your own button using any of the &amp;ldquo;Touchable&amp;rdquo; components provided by React Native.&lt;/p>
&lt;h2 id="navigation">Navigation
&lt;/h2>&lt;p>Mobile apps are rarely made up of a single screen. Managing the presentation of, and transition between, multiple screens is typically handled by what is known as a navigator.&lt;/p>
&lt;p>If you are getting started with navigation, you will probably want to use &lt;a class="link" href="https://reactnative.dev/docs/navigation#react-navigation" target="_blank" rel="noopener"
>React Navigation&lt;/a>.&lt;/p>
&lt;p>If you&amp;rsquo;re integrating React Native into an app that already manages navigation natively, or looking for an alternative to React Navigation, the following library provides native navigation on both platforms: &lt;a class="link" href="https://github.com/wix/react-native-navigation" target="_blank" rel="noopener"
>react-native-navigation&lt;/a>.&lt;/p>
&lt;h3 id="react-navigation">React Navigation
&lt;/h3>&lt;p>Now, you need to wrap the whole app in &lt;code>NavigationContainer&lt;/code>. Usually you&amp;rsquo;d do this in your entry file, such as &lt;code>index.js&lt;/code> or &lt;code>App.js&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">App&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">NavigationContainer&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="cm">/* Rest of your app code */&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">NavigationContainer&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="animation">Animation
&lt;/h2>&lt;p>React Native provides two complementary animation systems: &lt;a class="link" href="https://reactnative.dev/docs/animations#animated-api" target="_blank" rel="noopener"
>&lt;code>Animated&lt;/code>&lt;/a> for granular and interactive control of specific values, and &lt;a class="link" href="https://reactnative.dev/docs/animations#layoutanimation-api" target="_blank" rel="noopener"
>&lt;code>LayoutAnimation&lt;/code>&lt;/a> for animated global layout transactions.&lt;/p>
&lt;p>&lt;code>Animated&lt;/code> exports six animatable component types: &lt;code>View&lt;/code>, &lt;code>Text&lt;/code>, &lt;code>Image&lt;/code>, &lt;code>ScrollView&lt;/code>, &lt;code>FlatList&lt;/code> and &lt;code>SectionList&lt;/code>, but you can also create your own using &lt;code>Animated.createAnimatedComponent()&lt;/code>.&lt;/p></description></item><item><title>【Node】Basics</title><link>https://dyhes.github.io/p/nodebasics/</link><pubDate>Sun, 16 May 2021 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/nodebasics/</guid><description>&lt;h2 id="introduction">Introduction
&lt;/h2>&lt;p>Node.js is an open-source and cross-platform &lt;strong>JavaScript runtime environment.&lt;/strong>&lt;/p>
&lt;p>Node.js runs the &lt;strong>V8 JavaScript engine&lt;/strong>, the core of Google Chrome, outside of the browser.&lt;/p>
&lt;p>A Node.js app runs in a &lt;strong>single process&lt;/strong>, without creating a new thread for every request. Node.js provides a set of &lt;strong>asynchronous I/O&lt;/strong> primitives in its standard library that prevent JavaScript code from &lt;strong>blocking&lt;/strong> and generally, libraries in Node.js are written using &lt;strong>non-blocking paradigms&lt;/strong>, making blocking behavior the exception rather than the norm.&lt;/p>
&lt;p>When Node.js performs an I/O operation, like reading from the network, accessing a database or the filesystem, instead of blocking the thread and wasting CPU cycles waiting, Node.js will resume the operations when the response comes back.&lt;/p>
&lt;p>Node.js is a &lt;strong>low-level&lt;/strong> platform. In order to make things easy and exciting for developers, thousands of libraries were built upon Node.js by the community.&lt;/p>
&lt;p>Many of those established over time as popular options. Here is a non-comprehensive list of the ones worth learning:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Express&lt;/strong>: It provides one of the most &lt;strong>simple yet powerful&lt;/strong> ways to create a web server.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>koa&lt;/strong>: It is built by the same team behind Express, aims to be &lt;strong>even simpler and smaller&lt;/strong>,&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Egg.js&lt;/strong>: A framework to build &lt;strong>better enterprise frameworks and apps&lt;/strong> with Node.js &amp;amp; Koa.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Gatsby&lt;/strong>: A &lt;strong>React-based&lt;/strong>, &lt;strong>GraphQL-powered&lt;/strong>, &lt;strong>static site generator&lt;/strong> with a very rich ecosystem of plugins and starters.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Next.js&lt;/strong>: React framework that gives you the best developer experience with all the features you need for production: &lt;strong>hybrid static &amp;amp; server rendering, TypeScript support, smart bundling, route pre-fetching&lt;/strong>, and more.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="difference-to-browsers">Difference to Browsers
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>You can use &lt;strong>Babel&lt;/strong> to transform your code to be ES5-compatible before shipping it to the browser, but in Node.js, you won&amp;rsquo;t need that.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Another difference is that Node.js uses the &lt;strong>CommonJS module system&lt;/strong>, while in the browser we are starting to see the ES Modules standard being implemented. In practice, this means that for the time being you use &lt;code>require()&lt;/code> in Node.js and &lt;code>import&lt;/code> in the browser.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="v8-javascript-engine">V8 javascript engine
&lt;/h3>&lt;p>V8 is the name of the JavaScript engine that powers Google Chrome. V8 was chosen to be the engine that powered Node.js back in &lt;strong>2009&lt;/strong>. The Node.js ecosystem is huge and thanks to V8 which also powers desktop apps, with projects like Electron.&lt;/p>
&lt;p>V8 is written in &lt;strong>C++&lt;/strong>, and it&amp;rsquo;s continuously improved. It is portable and runs on Mac, Windows, Linux and several other systems.&lt;/p>
&lt;p>JavaScript is generally considered an interpreted language, but modern JavaScript engines no longer just interpret JavaScript, they &lt;strong>compile&lt;/strong> it. This has been happening since 2009, when the &lt;strong>SpiderMonkey JavaScript compiler&lt;/strong> was added to Firefox 3.5, and everyone followed this idea. JavaScript is internally compiled by V8 with &lt;strong>just-in-time&lt;/strong> (JIT) &lt;strong>compilation&lt;/strong> to speed up the execution.&lt;/p>
&lt;h2 id="run-and-exit">Run and Exit
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>RUN&lt;/p>
&lt;p>The usual way to run a Node.js program is to run the &lt;code>node&lt;/code> globally available command (once you install Node.js) and pass the name of the file you want to execute.&lt;/p>
&lt;p>to restart the application automatically, &lt;code>nodemon&lt;/code> module is used.&lt;/p>
&lt;p>Run the application using nodemon followed by application file name.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">nodemon app.js
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>EXIT&lt;/p>
&lt;ul>
&lt;li>
&lt;p>When running a program in the console you can close it with &lt;code>ctrl-C&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &lt;code>process&lt;/code> core module provides&lt;code>process.exit()&lt;/code> that allows you to programmatically exit from a Node.js program. When Node.js runs this line, the process is immediately forced to &lt;strong>terminate&lt;/strong>. This means that any callback that&amp;rsquo;s pending, any network request still being sent, any filesystem access, or processes writing to &lt;code>stdout&lt;/code> or &lt;code>stderr&lt;/code> - all is going to be &lt;strong>ungracefully&lt;/strong> terminated right away.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Note: &lt;code>process&lt;/code> does not require a &amp;ldquo;require&amp;rdquo;, it&amp;rsquo;s automatically available.&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>By default the exit code is &lt;code>0&lt;/code>, which means success. Different exit codes have different meaning, which you might want to use in your own system to have the program communicate to other programs.&lt;/p>
&lt;p>You can also set the &lt;code>process.exitCode&lt;/code> property&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">exitCode&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Many times with Node.js we start servers, like this HTTP server:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">express&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;express&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">app&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">express&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Hi!&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3000&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Server ready&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Express is a framework that uses the http module under the hood, app.listen() returns an instance of http. You would use https.createServer if you needed to serve your app using HTTPS, as app.listen only uses the http module.&lt;/p>
&lt;/blockquote>
&lt;p>This program is never going to end. If you call &lt;code>process.exit()&lt;/code>, any currently pending or running request is going to be aborted. This is &lt;em>&lt;strong>not nice&lt;/strong>&lt;/em>.&lt;/p>
&lt;p>In this case you need to send the command a SIGTERM signal, and handle that with the process signal handler:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">express&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;express&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">app&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">express&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Hi!&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">server&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3000&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Server ready&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;SIGTERM&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">server&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">close&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Process terminated&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>SIGKILL&lt;/code> is the signal that tells a process to immediately terminate, and would ideally act like &lt;code>process.exit()&lt;/code>.&lt;/p>
&lt;p>&lt;code>SIGTERM&lt;/code> is the signal that tells a process to &lt;strong>gracefully terminate&lt;/strong>. It is the signal that&amp;rsquo;s sent from process managers like &lt;code>upstart&lt;/code> or &lt;code>supervisord&lt;/code> and many others.&lt;/p>
&lt;p>You can send this signal from inside the program, in another function&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">kill&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">pid&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;SIGTERM&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Or from another Node.js running program, or any other app running in your system that knows the PID of the process you want to terminate.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="environment-variables">Environment variables
&lt;/h2>&lt;p>The &lt;code>process&lt;/code> core module of Node.js provides the &lt;code>env&lt;/code> property which hosts all the environment variables that were set at the moment the process was started.&lt;/p>
&lt;p>The below code runs &lt;code>app.js&lt;/code> and set &lt;code>USER_ID&lt;/code> and &lt;code>USER_KEY&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">USER_ID&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">239482&lt;/span> &lt;span class="nv">USER_KEY&lt;/span>&lt;span class="o">=&lt;/span>foobar node app.js
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and you can access them like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">env&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">USER_ID&lt;/span> &lt;span class="c1">// &amp;#34;239482&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">env&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">USER_KEY&lt;/span> &lt;span class="c1">// &amp;#34;foobar&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you have multiple environment variables in your node project, you can also create an &lt;code>.env&lt;/code> file in the root directory of your project, and then use the &lt;strong>dotenv package&lt;/strong> to load them during runtime.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;dotenv&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">config&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>You can also run your js file with &lt;code>node -r dotenv/config index.js&lt;/code> command if you don&amp;rsquo;t want to import the package in your code.&lt;/p>
&lt;/blockquote>
&lt;h2 id="repl">REPL
&lt;/h2>&lt;p>If we run the &lt;code>node&lt;/code> command without any script to execute or without any arguments, we start a REPL session:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">node
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Note: REPL stands for Read Evaluate Print Loop, and it is a programming language environment (basically a console window) that takes single expression as user input and returns the result back to the console after execution. The REPL session provides a convenient way to quickly test simple JavaScript code.&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>JavaScript objects&lt;/p>
&lt;p>Try entering the name of a JavaScript class, like &lt;code>Number&lt;/code>, add a dot and press &lt;code>tab&lt;/code>. The REPL will print all the properties and methods you can access on that class&lt;/p>
&lt;/li>
&lt;li>
&lt;p>global objects&lt;/p>
&lt;p>You can inspect the globals you have access to by typing &lt;code>global.&lt;/code> and pressing &lt;code>tab&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Special commands&lt;/p>
&lt;p>The REPL has some special commands, all starting with a dot &lt;code>.&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>.help&lt;/code>: shows the dot &lt;strong>commands help&lt;/strong>&lt;/li>
&lt;li>&lt;code>.editor&lt;/code>: enables &lt;strong>editor mode&lt;/strong>, to write multiline JavaScript code with ease. Once you are in this mode, enter &lt;strong>ctrl-D to run&lt;/strong> the code you wrote.&lt;/li>
&lt;li>&lt;code>.break&lt;/code>: when inputting a multi-line expression, entering the &lt;code>.break&lt;/code> command will abort further input. Same as pressing ctrl-C.&lt;/li>
&lt;li>&lt;code>.clear&lt;/code>: resets the REPL context to an &lt;strong>empty&lt;/strong> object and clears any multi-line expression currently being input.&lt;/li>
&lt;li>&lt;code>.load&lt;/code>: loads a JavaScript file, &lt;strong>relative&lt;/strong> to the current working directory&lt;/li>
&lt;li>&lt;code>.save&lt;/code>: saves all you entered in the REPL session to a file (specify the filename)&lt;/li>
&lt;li>&lt;code>.exit&lt;/code>: exits the repl (same as pressing ctrl-C two times)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="accept-argument">Accept argument
&lt;/h2>&lt;p>The way you retrieve accepted arguments is using the &lt;code>process&lt;/code> object built into Node.js.&lt;/p>
&lt;p>It exposes an &lt;code>argv&lt;/code> property, which is an &lt;strong>array&lt;/strong> that contains all the command line invocation arguments.&lt;/p>
&lt;p>The first element is the &lt;strong>full path&lt;/strong> &lt;strong>of the &lt;code>node&lt;/code> command&lt;/strong>.&lt;/p>
&lt;p>The second element is the &lt;strong>full path of the file&lt;/strong> being executed.&lt;/p>
&lt;p>All the additional arguments are present from the third position going forward.&lt;/p>
&lt;p>You can get only the additional arguments by creating a new array that excludes the first 2 params:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">args&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">argv&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">slice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this case:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">node app.js &lt;span class="nv">name&lt;/span>&lt;span class="o">=&lt;/span>joe
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>args[0]&lt;/code> is &lt;code>name=joe&lt;/code>, and you need to parse it. The best way to do so is by using the &lt;a class="link" href="https://www.npmjs.com/package/minimist" target="_blank" rel="noopener"
>&lt;code>minimist&lt;/code>&lt;/a> library, which helps dealing with arguments:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">args&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;minimist&amp;#39;&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">argv&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">slice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">args&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;name&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="c1">//joe
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="input">Input
&lt;/h2>&lt;p>Node.js since version 7 provides the &lt;a class="link" href="https://nodejs.org/api/readline.html" target="_blank" rel="noopener"
>&lt;code>readline&lt;/code> module&lt;/a> to perform exactly this: get input from a readable stream such as the &lt;code>process.stdin&lt;/code> stream, which during the execution of a Node.js program is the terminal input, one line at a time.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">readline&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;readline&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">createInterface&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">input&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stdin&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">output&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stdout&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">readline&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">question&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`What&amp;#39;s your name?`&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">name&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`Hi &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">!`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">readline&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="output">Output
&lt;/h2>&lt;p>Node.js provides a &lt;a class="link" href="https://nodejs.org/api/console.html" target="_blank" rel="noopener"
>&lt;code>console&lt;/code> module&lt;/a> which provides tons of very useful ways to interact with the command line.&lt;/p>
&lt;p>It is basically the same as the &lt;code>console&lt;/code> object you find in the browser.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>console.log()&lt;/code>&lt;/p>
&lt;p>The most basic and most used method is &lt;code>console.log()&lt;/code>, which prints the string you pass to it to the console.&lt;/p>
&lt;p>If you pass an object, it will render it as a string.&lt;/p>
&lt;p>You can also pass multiple variables to &lt;code>console.log()&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>console.clear()&lt;/code>&lt;/p>
&lt;p>``console.clear()` clears the console (the behavior might depend on the console used)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>console.count()&lt;/code>&lt;/p>
&lt;p>What happens is that &lt;code>console.count()&lt;/code> will count the number of times a string is printed, and print the count next to it.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>console.countReset()&lt;/code>&lt;/p>
&lt;p>The &lt;code>console.countReset()&lt;/code> method resets counter used with &lt;code>console.count()&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>console.trace()&lt;/code>&lt;/p>
&lt;p>There might be cases where it&amp;rsquo;s useful to print the call stack trace of a function, maybe to answer the question how did you reach that part of the code&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">function2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">trace&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">function1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">function2&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">function1&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>output:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">Trace
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at function2 &lt;span class="o">(&lt;/span>repl:1:33&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at function1 &lt;span class="o">(&lt;/span>repl:1:25&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at repl:1:1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at ContextifyScript.Script.runInThisContext &lt;span class="o">(&lt;/span>vm.js:44:33&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at REPLServer.defaultEval &lt;span class="o">(&lt;/span>repl.js:239:29&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at bound &lt;span class="o">(&lt;/span>domain.js:301:14&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at REPLServer.runBound &lt;span class="o">[&lt;/span>as eval&lt;span class="o">]&lt;/span> &lt;span class="o">(&lt;/span>domain.js:314:12&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at REPLServer.onLine &lt;span class="o">(&lt;/span>repl.js:440:10&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at emitOne &lt;span class="o">(&lt;/span>events.js:120:20&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> at REPLServer.emit &lt;span class="o">(&lt;/span>events.js:210:7&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>&lt;code>console.time()&lt;/code> and &lt;code>console.timeEnd()&lt;/code>&lt;/p>
&lt;p>You can easily calculate how much time a function takes to run, using &lt;code>time()&lt;/code> and &lt;code>timeEnd()&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">doSomething&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;test&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">measureDoingSomething&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">time&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;doSomething()&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//do something, and measure the time it takes
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">doSomething&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">timeEnd&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;doSomething()&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">measureDoingSomething&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>&lt;code>console.error()&lt;/code>&lt;/p>
&lt;p>As we saw &lt;code>console.log&lt;/code> is great for printing messages in the Console. This is what&amp;rsquo;s called the standard output, or &lt;code>stdout&lt;/code>.&lt;/p>
&lt;p>&lt;code>console.error&lt;/code> prints to the &lt;code>stderr&lt;/code> stream. It will not appear in the console, but it will appear in the error log.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="colorful">Colorful
&lt;/h3>&lt;p>The simplest way to go about coloring the console output is by using a library. &lt;a class="link" href="https://github.com/chalk/chalk" target="_blank" rel="noopener"
>Chalk&lt;/a> is such a library, and in addition to coloring it also helps with other styling facilities, like making text bold, italic or underlined.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">chalk&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;chalk&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">chalk&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">yellow&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;hi!&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="progress-bar">Progress bar
&lt;/h3>&lt;p>&lt;a class="link" href="https://www.npmjs.com/package/progress" target="_blank" rel="noopener"
>Progress&lt;/a> is an awesome package to create a progress bar in the console. Install it using &lt;code>npm install progress&lt;/code>&lt;/p>
&lt;p>This snippet creates a 10-step progress bar, and every 100ms one step is completed. When the bar completes we clear the interval:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">ProgressBar&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;progress&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">bar&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">ProgressBar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;:bar&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">total&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">timer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">setInterval&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">bar&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">tick&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">bar&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">complete&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">clearInterval&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">timer&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">},&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="export">Export
&lt;/h2>&lt;p>Node.js has a built-in module system. A Node.js file can import functionality exposed by other Node.js files.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">car&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">brand&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Ford&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">model&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Fiesta&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">exports&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">car&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">car&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./car&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">car&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">brand&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Ford&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">model&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Fiesta&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">exports&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">car&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">car&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//or
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">exports&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">car&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">brand&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Ford&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">model&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Fiesta&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">items&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./items&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">car&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">items&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">car&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">car&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./items&amp;#39;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">car&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">car&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./items&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The difference between &lt;code>module.exports&lt;/code> and &lt;code>exports&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>module.exports&lt;/code> : exposes &lt;strong>the object&lt;/strong> it points to.&lt;/li>
&lt;li>&lt;code>exports&lt;/code>: exposes &lt;em>&lt;strong>the properties&lt;/strong>&lt;/em> of the object it points to.&lt;/li>
&lt;/ul>
&lt;h2 id="production">Production
&lt;/h2>&lt;p>Node.js assumes it&amp;rsquo;s always running in a development environment. You can signal Node.js that you are running in production by setting the &lt;code>NODE_ENV=production&lt;/code> environment variable or:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">NODE_ENV&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nx">production&lt;/span> &lt;span class="nx">node&lt;/span> &lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">js&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="npm">&lt;strong>Npm&lt;/strong>
&lt;/h2>&lt;h3 id="install">Install
&lt;/h3>&lt;p>If a project has a &lt;code>package.json&lt;/code> file, by running&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">npm install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>it will install everything the project needs, in the &lt;code>node_modules&lt;/code> folder, creating it if it&amp;rsquo;s not existing already.&lt;/p>
&lt;p>You can also install a specific package by running&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">npm install &amp;lt;package-name&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Furthermore, since npm 5, this command adds &lt;code>&amp;lt;package-name&amp;gt;&lt;/code> to the &lt;code>package.json&lt;/code> file &lt;em>dependencies&lt;/em>. &lt;strong>Before version 5&lt;/strong>, you needed to add the flag &lt;code>--save&lt;/code>.&lt;/p>
&lt;p>Often you&amp;rsquo;ll see more &lt;strong>flags&lt;/strong> added to this command:&lt;/p>
&lt;ul>
&lt;li>&lt;code>--save-dev&lt;/code> installs and adds the entry to the &lt;code>package.json&lt;/code> file &lt;em>devDependencies&lt;/em>&lt;/li>
&lt;li>&lt;code>--no-save&lt;/code> installs but does not add the entry to the &lt;code>package.json&lt;/code> file &lt;em>dependencies&lt;/em>&lt;/li>
&lt;li>&lt;code>--save-optional&lt;/code> installs and adds the entry to the &lt;code>package.json&lt;/code> file &lt;em>optionalDependencies&lt;/em>&lt;/li>
&lt;li>&lt;code>--no-optional&lt;/code> will prevent optional dependencies from being installed&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Shorthands&lt;/strong> of the flags can also be used:&lt;/p>
&lt;ul>
&lt;li>-S: &amp;ndash;save&lt;/li>
&lt;li>-D: &amp;ndash;save-dev&lt;/li>
&lt;li>-O: &amp;ndash;save-optional&lt;/li>
&lt;/ul>
&lt;p>The difference between &lt;em>devDependencies&lt;/em> and &lt;em>dependencies&lt;/em> is that the former contains development tools, like a testing library, while the latter is bundled with the app in production.&lt;/p>
&lt;p>As for the &lt;em>optionalDependencies&lt;/em> the difference is that build failure of the dependency will not cause installation to fail. But it is your program&amp;rsquo;s responsibility to handle the lack of the dependency.&lt;/p>
&lt;p>A global installation is performed using the &lt;code>-g&lt;/code> flag:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">npm install -g lodash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can install an old version of an npm package using the &lt;code>@&lt;/code> syntax:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">npm install &amp;lt;package&amp;gt;@&amp;lt;version&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You might also be interested in listing all the previous versions of a package. You can do it with &lt;code>npm view &amp;lt;package&amp;gt; versions&lt;/code>&lt;/p>
&lt;p>When you install a package using &lt;code>npm install &amp;lt;packagename&amp;gt;&lt;/code>, the &lt;strong>latest available&lt;/strong> version of the package is downloaded and put in the &lt;code>node_modules&lt;/code> folder, and a corresponding entry is added to the &lt;code>package.json&lt;/code> and &lt;code>package-lock.json&lt;/code> files that are present in your current folder.&lt;/p>
&lt;h3 id="uninstall">Uninstall
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">npm uninstall &amp;lt;package-name&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Using the &lt;code>-S&lt;/code> flag, or &lt;code>--save&lt;/code>, this operation will also remove the reference in the &lt;code>package.json&lt;/code> file.&lt;/p>
&lt;p>&lt;code>package.json&lt;/code> will be &lt;strong>automatically&lt;/strong> updated with devDependency and dependency once you uninstall npm package.&lt;/p>
&lt;p>If the package is installed &lt;strong>globally&lt;/strong>, you need to add the &lt;code>-g&lt;/code> / &lt;code>--global&lt;/code> flag:&lt;/p>
&lt;h3 id="update">Update
&lt;/h3>&lt;p>Updating is also made easy, by running&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">npm&lt;/span> &lt;span class="nx">update&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>npm&lt;/code> will check all packages for a newer version that satisfies your versioning constraints.&lt;/p>
&lt;p>You can specify a single package to update as well:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="go">npm update &amp;lt;package-name&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Since npm version 5.0.0, &lt;code>npm update&lt;/code> will update the &lt;code>package.json&lt;/code> with the updated version. Use &lt;code>npm update --no-save&lt;/code> to &lt;strong>not update&lt;/strong> &lt;code>package.json&lt;/code>.&lt;/p>
&lt;p>To discover new releases of the packages, you run &lt;code>npm outdated&lt;/code>.&lt;/p>
&lt;p>Some of those updates are major releases. Running &lt;code>npm update&lt;/code> won&amp;rsquo;t update the version of those. Major releases are never updated in this way because they (by definition) introduce breaking changes, and &lt;code>npm&lt;/code> wants to save you trouble.&lt;/p>
&lt;p>To update all packages to a new major version, install the &lt;code>npm-check-updates&lt;/code> package globally:&lt;/p>
&lt;p>then run :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">ncu -u
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="script">Script
&lt;/h3>&lt;p>The &lt;code>package.json&lt;/code> file supports a format for specifying command line tasks that can be run by using&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="err">npm&lt;/span> &lt;span class="err">run&lt;/span> &lt;span class="err">&amp;lt;task-name&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;scripts&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;start-dev&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;node lib/server-development&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;#34;start&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s2">&amp;#34;node lib/server-production&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>npm root -g&lt;/code> command will tell you where that global installation location is on your machine.&lt;/p>
&lt;h3 id="packagejson">&lt;code>Package.json&lt;/code>
&lt;/h3>&lt;p>The &lt;code>package.json&lt;/code> file is kind of a &lt;strong>manifest&lt;/strong> for your project. It can do a lot of things, completely unrelated. It&amp;rsquo;s a central repository of configuration for tools, for example. It&amp;rsquo;s also where &lt;code>npm&lt;/code> and &lt;code>yarn&lt;/code> store the names and versions for all the installed packages.&lt;/p>
&lt;p>There are no fixed requirements of what should be in a &lt;code>package.json&lt;/code> file, for an application. The only requirement is that it &lt;strong>respects the JSON format&lt;/strong>, otherwise it cannot be read by programs that try to access its properties programmatically.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>main&lt;/p>
&lt;p>Sets the &lt;strong>entry point&lt;/strong> for the package. When you import this package in an application, that&amp;rsquo;s where the application will search for the module exports.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>private&lt;/p>
&lt;p>if set to &lt;code>true&lt;/code> prevents the app/package to be accidentally published on &lt;code>npm&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>engines&lt;/p>
&lt;p>Sets which &lt;strong>versions of Node.js and other commands&lt;/strong> this package/app work on&lt;/p>
&lt;/li>
&lt;li>
&lt;p>browserslist&lt;/p>
&lt;p>Is used to tell &lt;strong>which browsers (and their versions)&lt;/strong> you want to support. It&amp;rsquo;s referenced by Babel, Autoprefixer, and other tools, to only add the polyfills and fallbacks needed to the browsers you target.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="package-lockjson">&lt;code>package-lock.json&lt;/code>
&lt;/h3>&lt;p>The goal of &lt;code>package-lock.json&lt;/code> file is to keep track of the &lt;strong>exact version&lt;/strong> of every package that is installed so that a product is 100% reproducible in the same way even if packages are updated by their maintainers.&lt;/p>
&lt;p>You don&amp;rsquo;t commit to Git your node_modules folder, which is generally huge, and when you try to replicate the project on another machine by using the &lt;code>npm install&lt;/code> command, if you specified the &lt;code>~&lt;/code> syntax and a patch release of a package has been released, that one is going to be installed. Same for &lt;code>^&lt;/code> and minor releases.&lt;/p>
&lt;p>The &lt;code>package-lock.json&lt;/code> sets your currently installed version of each package &lt;strong>in stone&lt;/strong>, and &lt;code>npm&lt;/code> will use those exact versions when running &lt;code>npm ci&lt;/code>.&lt;/p>
&lt;p>The dependencies versions &lt;strong>will be updated&lt;/strong> in the &lt;code>package-lock.json&lt;/code> file when you run &lt;code>npm update&lt;/code>.&lt;/p>
&lt;h3 id="semantic-version">Semantic Version
&lt;/h3>&lt;p>The Semantic Versioning concept is simple: all versions have 3 digits: &lt;code>x.y.z&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>the first digit is the &lt;strong>major&lt;/strong> version&lt;/li>
&lt;li>the second digit is the &lt;strong>minor&lt;/strong> version&lt;/li>
&lt;li>the third digit is the &lt;strong>patch&lt;/strong> version&lt;/li>
&lt;/ul>
&lt;p>The rules use those symbols:&lt;/p>
&lt;ul>
&lt;li>&lt;code>^&lt;/code>: It will only do updates that &lt;strong>do not change the leftmost non-zero number&lt;/strong> i.e there can be changes in minor version or patch version but not in major version. If you write &lt;code>^13.1.0&lt;/code>, when running &lt;code>npm update&lt;/code>, it can update to &lt;code>13.2.0&lt;/code>, &lt;code>13.3.0&lt;/code> even &lt;code>13.3.1&lt;/code>, &lt;code>13.3.2&lt;/code> and so on, but not to &lt;code>14.0.0&lt;/code> or above.&lt;/li>
&lt;li>&lt;code>~&lt;/code>: if you write &lt;code>~0.13.0&lt;/code> when running &lt;code>npm update&lt;/code> it can update to patch releases: &lt;code>0.13.1&lt;/code> is ok, but &lt;code>0.14.0&lt;/code> is not.&lt;/li>
&lt;li>&lt;code>&amp;gt;&lt;/code>: you accept any version higher than the one you specify&lt;/li>
&lt;li>&lt;code>&amp;gt;=&lt;/code>: you accept any version equal to or higher than the one you specify&lt;/li>
&lt;li>&lt;code>&amp;lt;=&lt;/code>: you accept any version equal or lower to the one you specify&lt;/li>
&lt;li>&lt;code>&amp;lt;&lt;/code>: you accept any version lower than the one you specify&lt;/li>
&lt;li>&lt;code>=&lt;/code>: you accept that exact version&lt;/li>
&lt;li>&lt;code>-&lt;/code>: you accept a &lt;strong>range&lt;/strong> of versions. Example: &lt;code>2.1.0 - 2.6.2&lt;/code>&lt;/li>
&lt;li>&lt;code>||&lt;/code>: you combine &lt;strong>sets&lt;/strong>. Example: &lt;code>&amp;lt; 2.1 || &amp;gt; 2.6&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>There are other rules too:&lt;/p>
&lt;ul>
&lt;li>no symbol: you accept only that specific version you specify (&lt;code>1.2.1&lt;/code>)&lt;/li>
&lt;li>&lt;code>latest&lt;/code>: you want to use the latest version available&lt;/li>
&lt;/ul>
&lt;h3 id="scope">Scope
&lt;/h3>&lt;p>In your code you can only require &lt;strong>local&lt;/strong> packages:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;package-name&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In general, &lt;strong>all packages should be installed locally&lt;/strong>. This makes sure you can have dozens of applications in your computer, all running a different version of each package if needed. A package &lt;strong>should be installed globally&lt;/strong> when it provides an executable command that you run from the &lt;strong>shell&lt;/strong> (CLI), and it&amp;rsquo;s reused across projects.&lt;/p>
&lt;p>Great examples of popular global packages which you might know are&lt;/p>
&lt;ul>
&lt;li>&lt;code>npm&lt;/code>&lt;/li>
&lt;li>&lt;code>vue-cli&lt;/code>&lt;/li>
&lt;li>&lt;code>grunt-cli&lt;/code>&lt;/li>
&lt;li>&lt;code>mocha&lt;/code>&lt;/li>
&lt;li>&lt;code>react-native-cli&lt;/code>&lt;/li>
&lt;li>&lt;code>gatsby-cli&lt;/code>&lt;/li>
&lt;li>&lt;code>forever&lt;/code>&lt;/li>
&lt;li>&lt;code>nodemon&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="npx">NPX
&lt;/h3>&lt;p>&lt;code>npx&lt;/code> is a very powerful command that&amp;rsquo;s been available in &lt;strong>npm&lt;/strong> starting version 5.2, released in July 2017.&lt;/p>
&lt;p>&lt;code>npx&lt;/code> lets you run code built with Node.js and published through the npm registry.&lt;/p>
&lt;p>Running &lt;code>npx commandname&lt;/code> automatically finds the correct reference of the command inside the &lt;code>node_modules&lt;/code> folder of a project, without needing to know the exact path, and without requiring the package to be installed globally and in the user&amp;rsquo;s path.&lt;/p>
&lt;h2 id="event">Event
&lt;/h2>&lt;p>On the backend side, Node.js offers us the option to build a similar system using the &lt;a class="link" href="https://nodejs.org/api/events.html" target="_blank" rel="noopener"
>&lt;code>events&lt;/code> module&lt;/a>.&lt;/p>
&lt;p>This module, in particular, offers the &lt;code>EventEmitter&lt;/code> class, which we&amp;rsquo;ll use to handle our events.&lt;/p>
&lt;p>You initialize that using&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">EventEmitter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;events&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">eventEmitter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">EventEmitter&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This object exposes, among many others, the &lt;code>on&lt;/code> and &lt;code>emit&lt;/code> methods.&lt;/p>
&lt;ul>
&lt;li>&lt;code>emit&lt;/code> is used to trigger an event&lt;/li>
&lt;li>&lt;code>on&lt;/code> is used to add a callback function that&amp;rsquo;s going to be executed when the event is triggered&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">eventEmitter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;start&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;started&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>when we run&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">eventEmitter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;start&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>the event handler function is triggered, and we get the console log.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">eventEmitter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;start&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">start&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">end&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`started from &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">start&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb"> to &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">end&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">eventEmitter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">emit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;start&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The EventEmitter object also exposes several other methods to interact with events, like&lt;/p>
&lt;ul>
&lt;li>&lt;code>once()&lt;/code>: add a one-time listener&lt;/li>
&lt;li>&lt;code>removeListener()&lt;/code> / &lt;code>off()&lt;/code>: remove an event listener from an event&lt;/li>
&lt;li>&lt;code>removeAllListeners()&lt;/code>: remove all listeners for an event&lt;/li>
&lt;/ul>
&lt;h2 id="event-loop">Event Loop
&lt;/h2>&lt;p>The Node.js JavaScript code runs on a single thread. There is just one thing happening at a time.&lt;/p>
&lt;p>This is a limitation that&amp;rsquo;s actually very helpful, as it simplifies a lot how you program without worrying about concurrency issues.&lt;/p>
&lt;p>You mainly need to be concerned that &lt;em>your code&lt;/em> will run on a &lt;strong>single event loop&lt;/strong>, and write code with this thing in mind to avoid blocking it.&lt;/p>
&lt;p>Almost all the I/O primitives in JavaScript are non-blocking. Network requests, filesystem operations, and so on. Being blocking is the exception, and this is why JavaScript is based so much on &lt;strong>callbacks&lt;/strong>, and more recently on &lt;strong>promises&lt;/strong> and &lt;strong>async/await&lt;/strong>.&lt;/p>
&lt;h3 id="call-stack">Call Stack
&lt;/h3>&lt;p>The event loop continuously checks the &lt;strong>call stack&lt;/strong> to see if there&amp;rsquo;s any function that needs to run.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">bar&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;bar&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">baz&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;baz&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">foo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;foo&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">setTimeout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">bar&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">baz&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">foo&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//output
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">foo&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">baz&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">bar&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="C:%5cUsers%5cdyhes%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20220130164512101.png"
loading="lazy"
alt="image-20220130164512101"
>&lt;/p>
&lt;p>&lt;img src="C:%5cUsers%5cdyhes%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20220130171105441.png"
loading="lazy"
alt="image-20220130171105441"
>&lt;/p>
&lt;h3 id="the-message-queue">The Message Queue
&lt;/h3>&lt;p>When &lt;code>setTimeout()&lt;/code> is called, the Browser or Node.js starts the timer. Once the timer expires, in this case immediately as we put 0 as the timeout, the callback function is put in the &lt;strong>Message Queue&lt;/strong>.&lt;/p>
&lt;p>The Message Queue is also where user-initiated events like click or keyboard events, or fetch responses are queued before your code has the opportunity to react to them. Or also DOM events like &lt;code>onload&lt;/code>.&lt;/p>
&lt;p>&lt;strong>The loop gives priority to the call stack, and it first processes everything it finds in the call stack, and once there&amp;rsquo;s nothing in there, it goes to pick up things in the message queue.&lt;/strong>&lt;/p>
&lt;p>We don&amp;rsquo;t have to wait for functions like &lt;code>setTimeout&lt;/code>, fetch or other things to do their own work, because they are provided by the browser, and they live on their own threads. For example, if you set the &lt;code>setTimeout&lt;/code> timeout to 2 seconds, you don&amp;rsquo;t have to wait 2 seconds - the wait &lt;strong>happens elsewhere&lt;/strong>.&lt;/p>
&lt;h3 id="es6-job-queue">ES6 Job Queue
&lt;/h3>&lt;p>ECMAScript 2015 introduced the concept of the &lt;strong>Job Queue&lt;/strong>, which is used by B (also introduced in ES6/ES2015). It&amp;rsquo;s a way to execute the result of an &lt;strong>async&lt;/strong> function as soon as possible, rather than being put at the end of the call stack.&lt;/p>
&lt;p>Promises that resolve before the current function ends will be executed right after the current function.&lt;/p>
&lt;h3 id="processnexttick">&lt;code>process.nextTick()&lt;/code>
&lt;/h3>&lt;p>As you try to understand the Node.js event loop, one important part of it is &lt;code>process.nextTick()&lt;/code>. Every time the event loop takes &lt;strong>a full trip&lt;/strong>, we call it a &lt;strong>tick&lt;/strong>. When we pass a function to &lt;code>process.nextTick()&lt;/code>, we instruct the engine to invoke this function at the end of the current operation, &lt;strong>before&lt;/strong> the next event loop tick starts. Calling &lt;code>setTimeout(() =&amp;gt; {}, 0)&lt;/code> will execute the function &lt;strong>at the end of next tick&lt;/strong>, much later than when using &lt;code>nextTick()&lt;/code> which prioritizes the call and executes it just &lt;strong>before the beginning&lt;/strong> of the next tick. Use &lt;code>nextTick()&lt;/code> when you want to make sure that in the next event loop iteration that code is &lt;strong>already executed&lt;/strong>.&lt;/p>
&lt;h3 id="setimmediate">&lt;code>setImmediate()&lt;/code>
&lt;/h3>&lt;p>When you want to execute some piece of code &lt;strong>asynchronously&lt;/strong>, but &lt;strong>as soon as possible&lt;/strong>, one option is to use the &lt;code>setImmediate()&lt;/code> function. Any function passed as the &lt;code>setImmediate()&lt;/code> argument is a &lt;strong>callback&lt;/strong> that&amp;rsquo;s executed &lt;strong>in the&lt;/strong> &lt;strong>next iteration of the event loop&lt;/strong>.&lt;/p>
&lt;p>The differences between &lt;code>setImmediate()&lt;/code> , &lt;code>setTimeout(() =&amp;gt; {}, 0)&lt;/code> , and &lt;code>process.nextTick()&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>A function passed to &lt;code>process.nextTick()&lt;/code> is going to be executed on the current iteration of the event loop, after the current operation ends. This means it will always execute before &lt;code>setTimeout&lt;/code> and &lt;code>setImmediate&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A &lt;code>setTimeout()&lt;/code> callback with a 0ms delay is very similar to &lt;code>setImmediate()&lt;/code>. The execution order will depend on various factors, but they will be &lt;strong>both run in the next iteration of the event loop&lt;/strong>. If you specify the timeout delay to &lt;code>0&lt;/code>, the callback function will be executed as soon as possible, but after the current function execution. This is called &lt;strong>zero delay&lt;/strong>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="asynchronicity">Asynchronicity
&lt;/h2>&lt;p>Computers are asynchronous by design. Asynchronous means that things can happen &lt;strong>independently&lt;/strong> of the main program flow. In the current consumer computers, every program runs for a specific time slot and then it stops its execution to let another program continue their execution. This thing runs in a cycle so fast that it&amp;rsquo;s impossible to notice. We think our computers run many programs simultaneously, but this is an illusion (except on multiprocessor machines). JavaScript is &lt;strong>synchronous&lt;/strong> by default and is single threaded. This means that code cannot create new threads and run in parallel. Lines of code are executed in series, one after another.&lt;/p>
&lt;h3 id="promise">Promise
&lt;/h3>&lt;p>A promise is commonly defined as &lt;strong>a proxy for a value that will eventually become available&lt;/strong>. Promises are one way to deal with asynchronous code, without getting stuck in &lt;strong>callback hell&lt;/strong>. Promises have been part of the language for years (standardized and introduced in ES2015), and have recently become more integrated, with &lt;strong>async&lt;/strong> and &lt;strong>await&lt;/strong> in ES2017.&lt;/p>
&lt;p>&lt;strong>Async functions&lt;/strong> use promises &lt;strong>behind the scenes&lt;/strong>, so understanding how promises work is fundamental to understanding how &lt;code>async&lt;/code> and &lt;code>await&lt;/code> work.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">done&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">isItDoneYet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Promise&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">resolve&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">reject&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">done&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">workDone&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;Here is the thing I built&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">resolve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">workDone&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">why&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;Still working on something else&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">reject&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">why&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="async-and--await">Async and Await
&lt;/h3>&lt;p>Async functions are a combination of promises and generators, and basically, they are a higher level abstraction over promises. Let me repeat: &lt;strong>async/await is built on promises&lt;/strong>. An async function &lt;strong>returns a promise&lt;/strong>. When you want to &lt;strong>call&lt;/strong> this function you prepend &lt;code>await&lt;/code>, and &lt;strong>the calling code will stop until the promise is resolved or rejected&lt;/strong>. One caveat: the client function must be defined as &lt;code>async&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">doSomethingAsync&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Promise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">resolve&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">setTimeout&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">resolve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;I did something&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="mi">3000&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">doSomething&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">async&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">await&lt;/span> &lt;span class="nx">doSomethingAsync&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Before&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">doSomething&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;After&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="file-and-folder">File and Folder
&lt;/h2>&lt;h3 id="file-descriptor">File Descriptor
&lt;/h3>&lt;p>A file descriptor is &lt;strong>a reference to an open file&lt;/strong>, a &lt;strong>number&lt;/strong> (fd) returned by opening the file using the &lt;code>open()&lt;/code> method offered by the &lt;code>fs&lt;/code> module. This number (&lt;code>fd&lt;/code>) uniquely identifies an open file in operating system&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">fs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;fs&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/Users/joe/test.txt&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;r&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">fd&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//fd is our file descriptor
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Other flags you&amp;rsquo;ll commonly use are:&lt;/p>
&lt;ul>
&lt;li>&lt;code>r+&lt;/code> open the file for &lt;strong>reading and writing&lt;/strong>, if file doesn&amp;rsquo;t exist it &lt;strong>won&amp;rsquo;t be created&lt;/strong>.&lt;/li>
&lt;li>&lt;code>w+&lt;/code> open the file for &lt;strong>reading and writing&lt;/strong>, positioning the stream at the &lt;strong>beginning&lt;/strong> of the file. The file is &lt;strong>created&lt;/strong> &lt;strong>if not existing.&lt;/strong>&lt;/li>
&lt;li>&lt;code>a&lt;/code> open the file for &lt;strong>writing&lt;/strong>, positioning the stream at the &lt;strong>end&lt;/strong> of the file. The file is &lt;strong>created if not existing&lt;/strong>.&lt;/li>
&lt;li>&lt;code>a+&lt;/code> open the file for &lt;strong>reading and writing&lt;/strong>, positioning the stream at the &lt;strong>end&lt;/strong> of the file. The file is created if not existing.&lt;/li>
&lt;/ul>
&lt;p>You can also open the file by using the &lt;code>fs.openSync&lt;/code> method, which returns the file descriptor, instead of providing it in a callback:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">fs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;fs&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">fd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">openSync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/Users/joe/test.txt&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;r&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="stats">Stats
&lt;/h3>&lt;p>The file information is included in the stats variable. We can obtain information about the file by:&lt;/p>
&lt;ul>
&lt;li>if the file is a &lt;strong>directory&lt;/strong> or a file, using &lt;code>stats.isFile()&lt;/code> and &lt;code>stats.isDirectory()&lt;/code>&lt;/li>
&lt;li>if the file is a &lt;strong>symbolic link&lt;/strong> using &lt;code>stats.isSymbolicLink()&lt;/code>&lt;/li>
&lt;li>the file &lt;strong>size in bytes&lt;/strong> using &lt;code>stats.size&lt;/code>.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">fs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;fs&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/Users/joe/test.txt&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">stats&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//we have access to the file stats in `stats`
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//sync
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">fs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;fs&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">stats&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">statSync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/Users/joe/test.txt&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="path">Path
&lt;/h3>&lt;p>Given a path, you can extract information out of it using those methods:&lt;/p>
&lt;ul>
&lt;li>&lt;code>dirname&lt;/code>: get the parent folder of a file&lt;/li>
&lt;li>&lt;code>basename&lt;/code>: get the filename part&lt;/li>
&lt;li>&lt;code>extname&lt;/code>: get the file extension&lt;/li>
&lt;/ul>
&lt;p>You can get the absolute path calculation of a relative path using &lt;code>path.resolve()&lt;/code>, &lt;code>path.normalize()&lt;/code> is another useful function that will try and calculate the actual path, when it contains relative specifiers like &lt;code>.&lt;/code> or &lt;code>..&lt;/code>, or double slashes. &lt;strong>Neither resolve nor normalize will check if the path exists&lt;/strong>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;path&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">notes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;/users/joe/notes.txt&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">path&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dirname&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">notes&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// /users/joe
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">path&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">basename&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">notes&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// notes.txt
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">path&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">extname&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">notes&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// .txt
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;joe&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">path&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;users&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;notes.txt&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//&amp;#39;/users/joe/notes.txt&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">path&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">resolve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;joe.txt&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//&amp;#39;/Users/joe/joe.txt&amp;#39; if run from my home folder
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">path&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">normalize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/users/joe/..//test.txt&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//&amp;#39;/users/test.txt&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="read">Read
&lt;/h3>&lt;p>The simplest way to read a file in Node.js is to use the &lt;code>fs.readFile()&lt;/code> method, passing it the file path, encoding and a callback function that will be called with the file data (and the error).&lt;/p>
&lt;p>Alternatively, you can use the synchronous version &lt;code>fs.readFileSync()&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">fs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;fs&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">readFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/Users/joe/test.txt&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;utf8&amp;#39;&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//sync
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">fs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;fs&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">readFileSync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/Users/joe/test.txt&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;utf8&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Both &lt;code>fs.readFile()&lt;/code> and &lt;code>fs.readFileSync()&lt;/code> read the full content of the file in memory before returning the data.&lt;/p>
&lt;p>This means that big files are going to have a major impact on your memory consumption and speed of execution of the program.&lt;/p>
&lt;p>In this case, a better option is to read the file content using streams.&lt;/p>
&lt;h3 id="write">Write
&lt;/h3>&lt;p>The easiest way to write to files in Node.js is to use the &lt;code>fs.writeFile()&lt;/code> API.&lt;/p>
&lt;p>Alternatively, you can use the synchronous version &lt;code>fs.writeFileSync()&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">fs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;fs&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">content&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;Some content!&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">writeFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/Users/joe/test.txt&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">content&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//file written successfully
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//sync
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">fs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;fs&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">content&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;Some content!&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">writeFileSync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/Users/joe/test.txt&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">content&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//file written successfully
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>By default, this API will &lt;strong>replace the contents of the file&lt;/strong> if it does already exist.&lt;/p>
&lt;p>You can modify the default by specifying a flag:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">writeFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/Users/joe/test.txt&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">content&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">flag&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;a+&amp;#39;&lt;/span> &lt;span class="p">},&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The flags you&amp;rsquo;ll likely use are&lt;/p>
&lt;ul>
&lt;li>&lt;code>r+&lt;/code> open the file for reading and writing&lt;/li>
&lt;li>&lt;code>w+&lt;/code> open the file for reading and writing, positioning the stream at the beginning of the file. The file is created if it does not exist&lt;/li>
&lt;li>&lt;code>a&lt;/code> open the file for writing, positioning the stream at the end of the file. The file is created if it does not exist&lt;/li>
&lt;li>&lt;code>a+&lt;/code> open the file for reading and writing, positioning the stream at the end of the file. The file is created if it does not exist&lt;/li>
&lt;/ul>
&lt;h3 id="append">Append
&lt;/h3>&lt;p>The easiest way to append content to files in Node.js is to use the &lt;code>fs.appendFile()&lt;/code> API.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">content&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;Some content!&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">appendFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;file.log&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">content&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//done!
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="folders">Folders
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>Use &lt;code>fs.access()&lt;/code> to check if the folder exists and Node.js can access it with its permissions.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &lt;code>fs.mkdir()&lt;/code> or &lt;code>fs.mkdirSync()&lt;/code> to create a new folder.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">fs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;fs&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">folderName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;/Users/joe/test&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">existsSync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">folderName&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mkdirSync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">folderName&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>Use &lt;code>fs.readdir()&lt;/code> or &lt;code>fs.readdirSync()&lt;/code> to read the contents of a directory.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &lt;code>fs.rename()&lt;/code> or &lt;code>fs.renameSync()&lt;/code> to rename folder.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &lt;code>fs.rmdir()&lt;/code> or &lt;code>fs.rmdirSync()&lt;/code> to remove a folder.&lt;/p>
&lt;p>Removing a folder that has content can be more complicated than you need. You can pass the option &lt;code>{ recursive: true }&lt;/code> to recursively remove the contents&lt;/p>
&lt;p>&lt;strong>NOTE:&lt;/strong> &lt;em>In Node&lt;/em> &lt;code>v16.x&lt;/code> &lt;em>the option&lt;/em> &lt;code>recursive&lt;/code> &lt;em>is&lt;/em> &lt;strong>deprecated&lt;/strong> &lt;em>for&lt;/em> &lt;code>fs.rmdir&lt;/code> &lt;em>of callback API, instead use&lt;/em> &lt;code>fs.rm&lt;/code> &lt;em>to delete folders that have content in them&lt;/em>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">fs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;fs&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rm&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">dir&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">recursive&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">force&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span> &lt;span class="p">},&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">dir&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb"> is deleted!`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="buffer-and-stream">Buffer and Stream
&lt;/h2>&lt;h3 id="buffer">Buffer
&lt;/h3>&lt;p>A buffer is &lt;strong>an area of memory&lt;/strong>. It represents &lt;strong>a fixed-size chunk&lt;/strong> of memory (can&amp;rsquo;t be resized) allocated &lt;strong>outside&lt;/strong> of the V8 JavaScript engine. You can think of a buffer like an array of integers, which each represent a byte of data.&lt;/p>
&lt;p>A buffer is created using the &lt;a class="link" href="https://nodejs.org/api/buffer.html#buffer_buffer_from_buffer_alloc_and_buffer_allocunsafe" target="_blank" rel="noopener"
>&lt;code>Buffer.from()&lt;/code>&lt;/a>, &lt;a class="link" href="https://nodejs.org/api/buffer.html#buffer_class_method_buffer_alloc_size_fill_encoding" target="_blank" rel="noopener"
>&lt;code>Buffer.alloc()&lt;/code>&lt;/a>, and &lt;a class="link" href="https://nodejs.org/api/buffer.html#buffer_class_method_buffer_allocunsafe_size" target="_blank" rel="noopener"
>&lt;code>Buffer.allocUnsafe()&lt;/code>&lt;/a> methods.&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_array" target="_blank" rel="noopener"
>&lt;code>Buffer.from(array)&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_arraybuffer_byteoffset_length" target="_blank" rel="noopener"
>&lt;code>Buffer.from(arrayBuffer[, byteOffset[, length\]])&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_buffer" target="_blank" rel="noopener"
>&lt;code>Buffer.from(buffer)&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://nodejs.org/api/buffer.html#buffer_class_method_buffer_from_string_encoding" target="_blank" rel="noopener"
>&lt;code>Buffer.from(string[, encoding\])&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">buf&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">Buffer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Hey!&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">buf&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">Buffer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">alloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//or
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">buf&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">Buffer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">allocUnsafe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="stream">Stream
&lt;/h3>&lt;p>Streams are a way to handle reading/writing files, network communications, or any kind of end-to-end information exchange in an efficient way. The Node.js &lt;a class="link" href="https://nodejs.org/api/stream.html" target="_blank" rel="noopener"
>&lt;code>stream&lt;/code> module&lt;/a> provides the foundation upon which all streaming APIs are built. &lt;strong>All streams are instances of EventEmitter&lt;/strong>.&lt;/p>
&lt;p>Streams basically provide two major advantages over using other data handling methods:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Memory efficiency&lt;/strong>: you don&amp;rsquo;t need to load large amounts of data in memory before you are able to process it&lt;/li>
&lt;li>&lt;strong>Time efficiency&lt;/strong>: it takes way less time to start processing data, since you can start processing as soon as you have it, rather than waiting till the whole data payload is available&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">http&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;http&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">fs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;fs&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">server&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createServer&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">stream&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createReadStream&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">__dirname&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39;/data.txt&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">stream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">pipe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">res&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">server&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3000&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>the &lt;code>pipe()&lt;/code> method is called on the file stream. It takes the source, and pipes it into a destination.&lt;/p>
&lt;p>The return value of the &lt;code>pipe()&lt;/code> method is the destination stream, which is a very convenient thing that lets us chain multiple &lt;code>pipe()&lt;/code> calls, like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">src&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">pipe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">dest1&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">pipe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">dest2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Due to their advantages, many Node.js core modules provide native stream handling capabilities, most notably:&lt;/p>
&lt;ul>
&lt;li>&lt;code>process.stdin&lt;/code> returns a stream connected to stdin&lt;/li>
&lt;li>&lt;code>process.stdout&lt;/code> returns a stream connected to stdout&lt;/li>
&lt;li>&lt;code>process.stderr&lt;/code> returns a stream connected to stderr&lt;/li>
&lt;li>&lt;code>fs.createReadStream()&lt;/code> creates a readable stream to a file&lt;/li>
&lt;li>&lt;code>fs.createWriteStream()&lt;/code> creates a writable stream to a file&lt;/li>
&lt;li>&lt;code>net.connect()&lt;/code> initiates a stream-based connection&lt;/li>
&lt;li>&lt;code>http.request()&lt;/code> returns an instance of the http.ClientRequest class, which is a writable stream&lt;/li>
&lt;li>&lt;code>zlib.createGzip()&lt;/code> compress data using gzip (a compression algorithm) into a stream&lt;/li>
&lt;li>&lt;code>zlib.createGunzip()&lt;/code> decompress a gzip stream.&lt;/li>
&lt;li>&lt;code>zlib.createDeflate()&lt;/code> compress data using deflate (a compression algorithm) into a stream&lt;/li>
&lt;li>&lt;code>zlib.createInflate()&lt;/code> decompress a deflate stream&lt;/li>
&lt;/ul>
&lt;h3 id="types">types
&lt;/h3>&lt;p>There are four classes of streams:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Readable&lt;/code>: a stream you can pipe from, but not pipe into (you can receive data, but not send data to it). When you push data into a readable stream, it is buffered, until a consumer starts to read the data.&lt;/li>
&lt;li>&lt;code>Writable&lt;/code>: a stream you can pipe into, but not pipe from (you can send data, but not receive from it)&lt;/li>
&lt;li>&lt;code>Duplex&lt;/code>: a stream you can both pipe into and pipe from, basically a combination of a Readable and Writable stream&lt;/li>
&lt;li>&lt;code>Transform&lt;/code>: a Transform stream is similar to a Duplex, but the output is a transform of its input&lt;/li>
&lt;/ul>
&lt;p>We get the Readable stream from the &lt;a class="link" href="https://nodejs.org/api/stream.html" target="_blank" rel="noopener"
>&lt;code>stream&lt;/code> module&lt;/a>, and we initialize it and implement the &lt;code>readable._read()&lt;/code> method.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">Stream&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;stream&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">readableStream&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Stream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Readable&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">readableStream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_read&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//or
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">readableStream&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Stream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Readable&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">read&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">readableStream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;hi!&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">readableStream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ho!&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">writableStream&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Stream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Writable&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">writableStream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_write&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">chunk&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">encoding&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">next&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">chunk&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toString&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">next&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can also consume a readable stream directly, using the &lt;code>readable&lt;/code> event:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">JScopy&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">readableStream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;readable&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">readableStream&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">read&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="modules">Modules
&lt;/h2>&lt;h3 id="fs--module">fs module
&lt;/h3>&lt;ul>
&lt;li>&lt;code>fs.access()&lt;/code>: check if the file exists and Node.js can access it with its permissions&lt;/li>
&lt;li>&lt;code>fs.appendFile()&lt;/code>: append data to a file. If the file does not exist, it&amp;rsquo;s created&lt;/li>
&lt;li>&lt;code>fs.chmod()&lt;/code>: change the permissions of a file specified by the filename passed. Related: &lt;code>fs.lchmod()&lt;/code>, &lt;code>fs.fchmod()&lt;/code>&lt;/li>
&lt;li>&lt;code>fs.chown()&lt;/code>: change the owner and group of a file specified by the filename passed. Related: &lt;code>fs.fchown()&lt;/code>, &lt;code>fs.lchown()&lt;/code>&lt;/li>
&lt;li>&lt;code>fs.close()&lt;/code>: close a file descriptor&lt;/li>
&lt;li>&lt;code>fs.copyFile()&lt;/code>: copies a file&lt;/li>
&lt;li>&lt;code>fs.createReadStream()&lt;/code>: create a readable file stream&lt;/li>
&lt;li>&lt;code>fs.createWriteStream()&lt;/code>: create a writable file stream&lt;/li>
&lt;li>&lt;code>fs.link()&lt;/code>: create a new hard link to a file&lt;/li>
&lt;li>&lt;code>fs.mkdir()&lt;/code>: create a new folder&lt;/li>
&lt;li>&lt;code>fs.mkdtemp()&lt;/code>: create a temporary directory&lt;/li>
&lt;li>&lt;code>fs.open()&lt;/code>: set the file mode&lt;/li>
&lt;li>&lt;code>fs.readdir()&lt;/code>: read the contents of a directory&lt;/li>
&lt;li>&lt;code>fs.readFile()&lt;/code>: read the content of a file. Related: &lt;code>fs.read()&lt;/code>&lt;/li>
&lt;li>&lt;code>fs.readlink()&lt;/code>: read the value of a symbolic link&lt;/li>
&lt;li>&lt;code>fs.realpath()&lt;/code>: resolve relative file path pointers (&lt;code>.&lt;/code>, &lt;code>..&lt;/code>) to the full path&lt;/li>
&lt;li>&lt;code>fs.rename()&lt;/code>: rename a file or folder&lt;/li>
&lt;li>&lt;code>fs.rmdir()&lt;/code>: remove a folder&lt;/li>
&lt;li>&lt;code>fs.stat()&lt;/code>: returns the status of the file identified by the filename passed. Related: &lt;code>fs.fstat()&lt;/code>, &lt;code>fs.lstat()&lt;/code>&lt;/li>
&lt;li>&lt;code>fs.symlink()&lt;/code>: create a new symbolic link to a file&lt;/li>
&lt;li>&lt;code>fs.truncate()&lt;/code>: truncate to the specified length the file identified by the filename passed. Related: &lt;code>fs.ftruncate()&lt;/code>&lt;/li>
&lt;li>&lt;code>fs.unlink()&lt;/code>: remove a file or a symbolic link&lt;/li>
&lt;li>&lt;code>fs.unwatchFile()&lt;/code>: stop watching for changes on a file&lt;/li>
&lt;li>&lt;code>fs.utimes()&lt;/code>: change the timestamp of the file identified by the filename passed. Related: &lt;code>fs.futimes()&lt;/code>&lt;/li>
&lt;li>&lt;code>fs.watchFile()&lt;/code>: start watching for changes on a file. Related: &lt;code>fs.watch()&lt;/code>&lt;/li>
&lt;li>&lt;code>fs.writeFile()&lt;/code>: write data to a file. Related: &lt;code>fs.write()&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>One peculiar thing about the &lt;code>fs&lt;/code> module is that all the methods are asynchronous by default, but they can also work synchronously by appending &lt;code>Sync&lt;/code>.&lt;/p>
&lt;h3 id="os-module">os module
&lt;/h3>&lt;p>This module provides many functions that you can use to retrieve information from the underlying operating system and the computer the program runs on, and interact with it.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">os&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;os&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There are a few useful properties that tell us some key things related to handling files:&lt;/p>
&lt;p>&lt;code>os.EOL&lt;/code> gives the line delimiter sequence. It&amp;rsquo;s &lt;code>\n&lt;/code> on Linux and macOS, and &lt;code>\r\n&lt;/code> on Windows.&lt;/p>
&lt;p>&lt;code>os.constants.signals&lt;/code> tells us all the constants related to handling process signals, like SIGHUP, SIGKILL and so on.&lt;/p>
&lt;p>&lt;code>os.constants.errno&lt;/code> sets the constants for error reporting, like EADDRINUSE, EOVERFLOW and more.&lt;/p></description></item><item><title>【Vue】Guide</title><link>https://dyhes.github.io/p/vueguide/</link><pubDate>Sat, 08 May 2021 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/vueguide/</guid><description>&lt;h2 id="create-an-application">Create an Application
&lt;/h2>&lt;p>Every Vue application starts by creating a new &lt;strong>application instance&lt;/strong> with the &lt;a class="link" href="https://vuejs.org/api/application.html#createapp" target="_blank" rel="noopener"
>&lt;code>createApp&lt;/code>&lt;/a> function.&lt;/p>
&lt;p>The object we are passing into &lt;code>createApp&lt;/code> is in fact a component. Every app requires a &amp;ldquo;root component&amp;rdquo; that can contain other components as its children.&lt;/p>
&lt;p>An application instance won&amp;rsquo;t render anything until its &lt;code>.mount()&lt;/code> method is called. It expects a &amp;ldquo;container&amp;rdquo; argument, which can either be an actual DOM element or a selector string&lt;/p>
&lt;p>You are not limited to a single application instance on the same page. The &lt;code>createApp&lt;/code> API allows multiple Vue applications to co-exist on the same page, each with its own scope for configuration and global assets&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">app1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">createApp&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* ... */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">app1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mount&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;#container-1&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">app2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">createApp&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* ... */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">app2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mount&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;#container-2&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you are using Vue to enhance server-rendered HTML and only need Vue to control specific parts of a large page, avoid mounting a single Vue application instance on the entire page. Instead, create multiple small application instances and mount them on the elements they are responsible for.&lt;/p>
&lt;h2 id="template-syntax">Template Syntax
&lt;/h2>&lt;p>The double mustaches interprets the data as plain text, not HTML. In order to output real HTML, you will need to use the &lt;a class="link" href="https://vuejs.org/api/built-in-directives.html#v-html" target="_blank" rel="noopener"
>&lt;code>v-html&lt;/code> directive&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vue" data-lang="vue">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">Using&lt;/span> &lt;span class="nx">text&lt;/span> &lt;span class="nx">interpolation&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{{&lt;/span> &lt;span class="nx">rawHtml&lt;/span> &lt;span class="p">}}&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">Using&lt;/span> &lt;span class="nx">v&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">html&lt;/span> &lt;span class="nx">directive&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">span&lt;/span> &lt;span class="nt">v-html&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;rawHtml&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">span&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="dynamically-binding-multiple-attributes">dynamically binding multiple attributes
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vue" data-lang="vue">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">setup&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">objectOfAttrs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;container&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">class&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;wrapper&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="nt">v-bind&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;objectOfAttrs&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="err">=&amp;#34;&lt;/span>&lt;span class="na">objectOfAttrs&lt;/span>&lt;span class="err">&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="k">for&lt;/span> &lt;span class="kr">short&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="directives">Directives
&lt;/h3>&lt;p>Directives are special attributes with the &lt;code>v-&lt;/code> prefix. Vue provides a number of &lt;a class="link" href="https://vuejs.org/api/built-in-directives.html" target="_blank" rel="noopener"
>built-in directives&lt;/a>&lt;/p>
&lt;p>It is also possible to use a JavaScript expression in a directive argument by wrapping it with square brackets.&lt;/p>
&lt;h4 id="dynamic-arguments">Dynamic arguments
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vue" data-lang="vue">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span> &lt;span class="na">v&lt;/span>&lt;span class="nt">-bind:[attributeName]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;url&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">...&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;lt;!--&lt;/span> &lt;span class="nx">shorthand&lt;/span> &lt;span class="o">--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span> &lt;span class="nt">:[attributeName]&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;url&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">...&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Dynamic arguments are expected to evaluate to a string, with the exception of &lt;code>null&lt;/code>. The special value &lt;code>null&lt;/code> can be used to explicitly remove the binding. Any other non-string value will trigger a warning.&lt;/p>
&lt;h3 id="modifiers">Modifiers
&lt;/h3>&lt;p>Modifiers are special postfixes denoted by a dot, which indicate that a directive should be bound in some special way. For example, the &lt;code>.prevent&lt;/code> modifier tells the &lt;code>v-on&lt;/code> directive to call &lt;code>event.preventDefault()&lt;/code> on the triggered event.&lt;/p>
&lt;p>&lt;img src="https://vuejs.org/assets/directive.69c37117.png"
loading="lazy"
alt="directive syntax graph"
>&lt;/p>
&lt;h2 id="reactivity">Reactivity
&lt;/h2>&lt;p>We can create a reactive object or array with the &lt;a class="link" href="https://vuejs.org/api/reactivity-core.html#reactive" target="_blank" rel="noopener"
>&lt;code>reactive()&lt;/code>&lt;/a>, and non-object by the &lt;code>ref()&lt;/code>.&lt;/p>
&lt;p>When you mutate reactive state, the DOM is updated automatically. However, it should be noted that the DOM updates are not applied synchronously. Instead, Vue buffers them until the &amp;ldquo;next tick&amp;rdquo; in the update cycle to ensure that each component needs to update only once no matter how many state changes you have made.&lt;/p>
&lt;p>To wait for the DOM update to complete after a state change, you can use the &lt;a class="link" href="https://vuejs.org/api/general.html#nexttick" target="_blank" rel="noopener"
>nextTick()&lt;/a> global API&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">nextTick&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;vue&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">increment&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">count&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="o">++&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">nextTick&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// access updated DOM
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="reactive-proxy">Reactive Proxy
&lt;/h3>&lt;p>It is important to note that the returned value from &lt;code>reactive()&lt;/code> is a &lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" rel="noopener"
>Proxy&lt;/a> of the original object, which is not equal to the original object.&lt;/p>
&lt;p>Only the proxy is reactive - mutating the original object will not trigger updates.&lt;/p>
&lt;p>To ensure consistent access to the proxy, calling &lt;code>reactive()&lt;/code> on the same object always returns &lt;strong>the same proxy&lt;/strong>, and calling &lt;code>reactive()&lt;/code> on an existing proxy also returns &lt;strong>that&lt;/strong> &lt;strong>same proxy&lt;/strong>&lt;/p>
&lt;h3 id="ref">Ref
&lt;/h3>&lt;p>The &lt;code>reactive()&lt;/code> API has two limitations:&lt;/p>
&lt;ul>
&lt;li>It only works for object types&lt;/li>
&lt;li>we couldn&amp;rsquo;t pass it around without losing reactivity.&lt;/li>
&lt;/ul>
&lt;p>&lt;code>ref()&lt;/code> allows us to create a &amp;ldquo;reference&amp;rdquo; to any value and pass it around without losing reactivity.&lt;/p>
&lt;p>When refs are accessed as &lt;strong>top-level properties&lt;/strong> in the template, they are automatically &amp;ldquo;unwrapped&amp;rdquo; so there is no need to use &lt;code>.value&lt;/code>.&lt;/p>
&lt;h2 id="computed-properties">Computed Properties
&lt;/h2>&lt;p>For complex logic that includes reactive data, it is recommended to use a &lt;strong>computed property&lt;/strong>.&lt;/p>
&lt;p>The &lt;code>computed()&lt;/code> function expects to be passed a getter function, and the returned value is a &lt;strong>computed ref&lt;/strong>.&lt;/p>
&lt;p>A computed property automatically tracks its reactive dependencies.&lt;/p>
&lt;p>Instead of a computed property, we can define the same function as a method. For the end result, the two approaches are indeed &lt;strong>exactly the same&lt;/strong>. However, the difference is that &lt;strong>computed properties are cached based on their reactive dependencies.&lt;/strong> A computed property will only re-evaluate when &lt;strong>some of its reactive dependencies have changed&lt;/strong>. This means as long as &lt;code>author.books&lt;/code> has not changed, multiple access to &lt;code>publishedBooksMessage&lt;/code> will immediately return the previously computed result without having to run the getter function again. In comparison, a method invocation will &lt;strong>always&lt;/strong> run the function whenever a re-render happens.&lt;/p>
&lt;p>This also means the following computed property will never update, because &lt;code>Date.now()&lt;/code> is not a reactive dependency.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">now&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">computed&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">now&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="setter">setter
&lt;/h3>&lt;p>Computed properties are by default getter-only. If you attempt to assign a new value to a computed property, you will receive a runtime warning. In the rare cases where you need a &amp;ldquo;writable&amp;rdquo; computed property, you can create one by providing both a getter and a setter:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vue" data-lang="vue">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">setup&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">ref&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">computed&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;vue&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">firstName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ref&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;John&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">lastName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ref&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Doe&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">fullName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">computed&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// getter
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">get&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">firstName&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39; &amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">lastName&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// setter
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">newValue&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Note: we are using destructuring assignment syntax here.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">firstName&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">lastName&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">newValue&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39; &amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now when you run &lt;code>fullName.value = 'John Doe'&lt;/code>, the setter will be invoked and &lt;code>firstName&lt;/code> and &lt;code>lastName&lt;/code> will be updated accordingly.&lt;/p>
&lt;h2 id="class-and-style-bindings">Class and Style Bindings
&lt;/h2>&lt;p>Vue provides special enhancements when &lt;code>v-bind&lt;/code> is used with &lt;code>class&lt;/code> and &lt;code>style&lt;/code>. In addition to strings, the expressions can also evaluate to objects or arrays.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vue" data-lang="vue">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;{ active: isActive }&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The above syntax means the presence of the &lt;code>active&lt;/code> class will be determined by the &lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Glossary/Truthy" target="_blank" rel="noopener"
>truthiness&lt;/a> of the data property &lt;code>isActive&lt;/code>. We can also bind to a &lt;a class="link" href="https://vuejs.org/guide/essentials/computed.html" target="_blank" rel="noopener"
>computed property&lt;/a> that returns an object.&lt;/p>
&lt;p>We can bind &lt;code>:class&lt;/code> to an array to apply a list of classes&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vue" data-lang="vue">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;[isActive ? activeClass : &amp;#39;&amp;#39;, errorClass]&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;[{ active: isActive }, errorClass]&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="with-components">With Components
&lt;/h3>&lt;p>When you use the &lt;code>class&lt;/code> attribute on a component with a &lt;strong>single root element&lt;/strong>, those classes will be added to the component&amp;rsquo;s root element, and merged with any existing class already on it.&lt;/p>
&lt;p>If your component has &lt;strong>multiple root elements&lt;/strong>, you would need to define which element will receive this class. You can do this using the &lt;code>$attrs&lt;/code> component property&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vue" data-lang="vue">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span> &lt;span class="nt">:class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;$attrs.class&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">Hi&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">span&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">This&lt;/span> &lt;span class="nx">is&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="nx">child&lt;/span> &lt;span class="nx">component&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">span&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="conditional-rendering">Conditional Rendering
&lt;/h2>&lt;p>&lt;code>v-if&lt;/code>,&lt;code>v-else-if&lt;/code> and &lt;code>v-else&lt;/code> can be used to attain conditional rendering and they also work for &lt;code>&amp;lt;template&amp;gt;&lt;/code>.&lt;/p>
&lt;p>The difference is that an element with &lt;code>v-show&lt;/code> will always be rendered and remain in the DOM; &lt;code>v-show&lt;/code> only toggles the &lt;code>display&lt;/code> CSS property of the element.&lt;/p>
&lt;p>&lt;code>v-show&lt;/code> doesn&amp;rsquo;t support the &lt;code>&amp;lt;template&amp;gt;&lt;/code> element, nor does it work with &lt;code>v-else&lt;/code>.&lt;/p>
&lt;p>Generally speaking, &lt;code>v-if&lt;/code> has higher toggle costs while &lt;code>v-show&lt;/code> has higher initial render costs. So prefer &lt;code>v-show&lt;/code> if you need to toggle something very often, and prefer &lt;code>v-if&lt;/code> if the condition is unlikely to change at runtime.&lt;/p>
&lt;p>It&amp;rsquo;s &lt;strong>not&lt;/strong> recommended to use &lt;code>v-if&lt;/code> and &lt;code>v-for&lt;/code> on the same element due to implicit precedence. Refer to &lt;a class="link" href="https://vuejs.org/style-guide/rules-essential.html#avoid-v-if-with-v-for" target="_blank" rel="noopener"
>style guide&lt;/a> for details.&lt;/p>
&lt;p>When &lt;code>v-if&lt;/code> and &lt;code>v-for&lt;/code> are both used on the same element, &lt;code>v-if&lt;/code> will be evaluated first.&lt;/p>
&lt;h2 id="list-rendering">List Rendering
&lt;/h2>&lt;p>For nested &lt;code>v-for&lt;/code>, scoping also works similar to nested functions. Each &lt;code>v-for&lt;/code> scope has access to parent scopes.&lt;/p>
&lt;p>Similar to template &lt;code>v-if&lt;/code>, you can also use a &lt;code>&amp;lt;template&amp;gt;&lt;/code> tag with &lt;code>v-for&lt;/code> to render a block of multiple elements.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vue" data-lang="vue">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">ul&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">template&lt;/span> &lt;span class="nt">v-for&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;item in items&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;{{&lt;/span> &lt;span class="nx">item&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">msg&lt;/span> &lt;span class="p">}}&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;divider&amp;#34;&lt;/span> &lt;span class="na">role&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;presentation&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">ul&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When they exist on the same node, &lt;code>v-if&lt;/code> has a higher priority than &lt;code>v-for&lt;/code>. That means the &lt;code>v-if&lt;/code> condition will not have access to variables from the scope of the &lt;code>v-for&lt;/code>&lt;/p>
&lt;p>This can be fixed by moving &lt;code>v-for&lt;/code> to a wrapping &lt;code>&amp;lt;template&amp;gt;&lt;/code> tag (which is also more explicit):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vue" data-lang="vue">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">template&lt;/span> &lt;span class="nt">v-for&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;todo in todos&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span> &lt;span class="nt">v-if&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;!todo.isComplete&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{{&lt;/span> &lt;span class="na">todo.name&lt;/span> &lt;span class="p">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To give Vue a hint so that it can track each node&amp;rsquo;s identity, and thus reuse and reorder existing elements, you need to provide a unique &lt;code>key&lt;/code> attribute for each item&lt;/p>
&lt;p>When using &lt;code>&amp;lt;template v-for&amp;gt;&lt;/code>, the &lt;code>key&lt;/code> should be placed on the &lt;code>&amp;lt;template&amp;gt;&lt;/code> container&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vue" data-lang="vue">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">template&lt;/span> &lt;span class="nt">v-for&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;todo in todos&amp;#34; :key=&amp;#34;todo.name&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;{{&lt;/span> &lt;span class="nx">todo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="p">}}&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="with-components-1">with Components
&lt;/h3>&lt;p>You can directly use &lt;code>v-for&lt;/code> on a component, like any normal element (don&amp;rsquo;t forget to provide a &lt;code>key&lt;/code>).&lt;/p>
&lt;p>However, this won&amp;rsquo;t automatically pass any data to the component, because components have isolated scopes of their own. In order to pass the iterated data into the component, we should also use props.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vue" data-lang="vue">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">my-component&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">v-for&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;(item, index) in items&amp;#34;&lt;/span>&lt;span class="p">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&lt;/span> &lt;span class="nt">:item&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;item&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">:index&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;index&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">:key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;item.id&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">my-component&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="array-change">Array Change
&lt;/h3>&lt;p>Vue wraps an observed array&amp;rsquo;s mutation methods so they will also trigger view updates. The wrapped methods are:&lt;/p>
&lt;ul>
&lt;li>&lt;code>push()&lt;/code>&lt;/li>
&lt;li>&lt;code>pop()&lt;/code>&lt;/li>
&lt;li>&lt;code>shift()&lt;/code>&lt;/li>
&lt;li>&lt;code>unshift()&lt;/code>&lt;/li>
&lt;li>&lt;code>splice()&lt;/code>&lt;/li>
&lt;li>&lt;code>sort()&lt;/code>&lt;/li>
&lt;li>&lt;code>reverse()&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>There are also non-mutating methods, e.g. &lt;code>filter()&lt;/code>, &lt;code>concat()&lt;/code> and &lt;code>slice()&lt;/code>, which do not mutate the original array but &lt;strong>always return a new array&lt;/strong>. When working with non-mutating methods, we should replace the old array with the new one.&lt;/p>
&lt;p>Be careful with &lt;code>reverse()&lt;/code> and &lt;code>sort()&lt;/code> in a computed property! These two methods will mutate the original array, which should be avoided in computed getters. Create a copy of the original array before calling these methods.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vue" data-lang="vue">&lt;span class="line">&lt;span class="cl">&lt;span class="o">-&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">numbers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">reverse&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">//wrong
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">+&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="p">[...&lt;/span>&lt;span class="nx">numbers&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">reverse&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">//true
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="event-handling">Event Handling
&lt;/h2>&lt;p>We can use the &lt;code>v-on&lt;/code> directive, which we typically shorten to the &lt;code>@&lt;/code> symbol, to listen to DOM events and run some JavaScript when they&amp;rsquo;re triggered.&lt;/p>
&lt;p>The handler value can be one of the following:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Inline handlers:&lt;/strong> Inline JavaScript to be executed when the event is triggered (similar to the native &lt;code>onclick&lt;/code> attribute).&lt;/li>
&lt;li>&lt;strong>Method handlers:&lt;/strong> A property name or path that points to a method defined on the component.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vue" data-lang="vue">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="nt">@click&lt;/span>&lt;span class="s">=&amp;#34;count++&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="na">Add&lt;/span> &lt;span class="na">1&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">Count&lt;/span> &lt;span class="nx">is&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{{&lt;/span> &lt;span class="nx">count&lt;/span> &lt;span class="p">}}&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The template compiler detects method handlers by checking whether the &lt;code>v-on&lt;/code> value string is a valid JavaScript identifier or property access path.&lt;/p>
&lt;p>Sometimes we also need to access the original DOM event in an inline handler. You can pass it into a method using the special &lt;code>$event&lt;/code> variable, or use an inline arrow function.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vue" data-lang="vue">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="na">click&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;warn(&amp;#39;Form cannot be submitted yet.&amp;#39;, $event)&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Submit&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;lt;!--&lt;/span> &lt;span class="nx">using&lt;/span> &lt;span class="nx">inline&lt;/span> &lt;span class="nx">arrow&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="o">--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="na">click&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;(event) =&amp;gt; warn(&amp;#39;Form cannot be submitted yet.&amp;#39;, event)&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Submit&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="event-modifiers">Event Modifiers
&lt;/h3>&lt;p>Recall that modifiers are directive postfixes denoted by a dot.&lt;/p>
&lt;ul>
&lt;li>&lt;code>.stop&lt;/code>&lt;/li>
&lt;li>&lt;code>.prevent&lt;/code>&lt;/li>
&lt;li>&lt;code>.self&lt;/code>&lt;/li>
&lt;li>&lt;code>.capture&lt;/code>&lt;/li>
&lt;li>&lt;code>.once&lt;/code>&lt;/li>
&lt;li>&lt;code>.passive&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vue" data-lang="vue">&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;lt;!--&lt;/span> &lt;span class="nx">the&lt;/span> &lt;span class="nx">click&lt;/span> &lt;span class="nx">event&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="nx">s&lt;/span> &lt;span class="nx">propagation&lt;/span> &lt;span class="nx">will&lt;/span> &lt;span class="nx">be&lt;/span> &lt;span class="nx">stopped&lt;/span> &lt;span class="o">--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span> &lt;span class="nt">@click.stop&lt;/span>&lt;span class="s">=&amp;#34;doThis&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;lt;!--&lt;/span> &lt;span class="nx">the&lt;/span> &lt;span class="nx">submit&lt;/span> &lt;span class="nx">event&lt;/span> &lt;span class="nx">will&lt;/span> &lt;span class="nx">no&lt;/span> &lt;span class="nx">longer&lt;/span> &lt;span class="nx">reload&lt;/span> &lt;span class="nx">the&lt;/span> &lt;span class="nx">page&lt;/span> &lt;span class="o">--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">form&lt;/span> &lt;span class="nt">@submit.prevent&lt;/span>&lt;span class="s">=&amp;#34;onSubmit&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">form&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;lt;!--&lt;/span> &lt;span class="nx">modifiers&lt;/span> &lt;span class="nx">can&lt;/span> &lt;span class="nx">be&lt;/span> &lt;span class="nx">chained&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">and&lt;/span> &lt;span class="nx">the&lt;/span> &lt;span class="nx">order&lt;/span> &lt;span class="nx">matters&lt;/span>&lt;span class="o">--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span> &lt;span class="nt">@click.stop.prevent&lt;/span>&lt;span class="s">=&amp;#34;doThat&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;lt;!--&lt;/span> &lt;span class="nx">just&lt;/span> &lt;span class="nx">the&lt;/span> &lt;span class="nx">modifier&lt;/span> &lt;span class="o">--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">form&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="na">submit.prevent&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">form&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;lt;!--&lt;/span> &lt;span class="nx">only&lt;/span> &lt;span class="nx">trigger&lt;/span> &lt;span class="nx">handler&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">event&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">target&lt;/span> &lt;span class="nx">is&lt;/span> &lt;span class="nx">the&lt;/span> &lt;span class="nx">element&lt;/span> &lt;span class="nx">itself&lt;/span> &lt;span class="o">--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;lt;!--&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="nx">not&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="nx">child&lt;/span> &lt;span class="nx">element&lt;/span> &lt;span class="o">--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="nt">@click.self&lt;/span>&lt;span class="s">=&amp;#34;doThat&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;...&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>.capture&lt;/code>, &lt;code>.once&lt;/code>, and &lt;code>.passive&lt;/code> modifiers mirror the &lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters" target="_blank" rel="noopener"
>options of the native &lt;code>addEventListener&lt;/code> method&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vue" data-lang="vue">&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;lt;!--&lt;/span> &lt;span class="nx">use&lt;/span> &lt;span class="nx">capture&lt;/span> &lt;span class="nx">mode&lt;/span> &lt;span class="nx">when&lt;/span> &lt;span class="nx">adding&lt;/span> &lt;span class="nx">the&lt;/span> &lt;span class="nx">event&lt;/span> &lt;span class="nx">listener&lt;/span> &lt;span class="o">--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;lt;!--&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="nx">an&lt;/span> &lt;span class="nx">event&lt;/span> &lt;span class="nx">targeting&lt;/span> &lt;span class="nx">an&lt;/span> &lt;span class="nx">inner&lt;/span> &lt;span class="nx">element&lt;/span> &lt;span class="nx">is&lt;/span> &lt;span class="nx">handled&lt;/span> &lt;span class="nx">here&lt;/span> &lt;span class="nx">before&lt;/span> &lt;span class="nx">being&lt;/span> &lt;span class="nx">handled&lt;/span> &lt;span class="nx">by&lt;/span> &lt;span class="nx">that&lt;/span> &lt;span class="nx">element&lt;/span> &lt;span class="o">--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="nt">@click.capture&lt;/span>&lt;span class="s">=&amp;#34;doThis&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;...&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;lt;!--&lt;/span> &lt;span class="nx">the&lt;/span> &lt;span class="nx">click&lt;/span> &lt;span class="nx">event&lt;/span> &lt;span class="nx">will&lt;/span> &lt;span class="nx">be&lt;/span> &lt;span class="nx">triggered&lt;/span> &lt;span class="nx">at&lt;/span> &lt;span class="nx">most&lt;/span> &lt;span class="nx">once&lt;/span> &lt;span class="o">--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">a&lt;/span> &lt;span class="nt">@click.once&lt;/span>&lt;span class="s">=&amp;#34;doThis&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">a&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;lt;!--&lt;/span> &lt;span class="nx">the&lt;/span> &lt;span class="nx">scroll&lt;/span> &lt;span class="nx">event&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="nx">s&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="nx">behavior&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">scrolling&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">will&lt;/span> &lt;span class="nx">happen&lt;/span> &lt;span class="o">--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;lt;!--&lt;/span> &lt;span class="nx">immediately&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">instead&lt;/span> &lt;span class="k">of&lt;/span> &lt;span class="nx">waiting&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="sb">`onScroll`&lt;/span> &lt;span class="nx">to&lt;/span> &lt;span class="nx">complete&lt;/span> &lt;span class="o">--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;lt;!--&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="nx">it&lt;/span> &lt;span class="nx">contains&lt;/span> &lt;span class="sb">`event.preventDefault()`&lt;/span> &lt;span class="o">--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="nt">@scroll.passive&lt;/span>&lt;span class="s">=&amp;#34;onScroll&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;...&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="key-modifiers">Key Modifiers
&lt;/h3>&lt;p>You can directly use any valid key names exposed via &lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values" target="_blank" rel="noopener"
>&lt;code>KeyboardEvent.key&lt;/code>&lt;/a> as modifiers by converting them to kebab-case.&lt;/p>
&lt;h4 id="key-aliases">key aliases
&lt;/h4>&lt;p>Vue provides aliases for the most commonly used keys:&lt;/p>
&lt;ul>
&lt;li>&lt;code>.enter&lt;/code>&lt;/li>
&lt;li>&lt;code>.tab&lt;/code>&lt;/li>
&lt;li>&lt;code>.delete&lt;/code> (captures both &amp;ldquo;Delete&amp;rdquo; and &amp;ldquo;Backspace&amp;rdquo; keys)&lt;/li>
&lt;li>&lt;code>.esc&lt;/code>&lt;/li>
&lt;li>&lt;code>.space&lt;/code>&lt;/li>
&lt;li>&lt;code>.up&lt;/code>&lt;/li>
&lt;li>&lt;code>.down&lt;/code>&lt;/li>
&lt;li>&lt;code>.left&lt;/code>&lt;/li>
&lt;li>&lt;code>.right&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="system-modifier-keys">System Modifier Keys
&lt;/h4>&lt;p>You can use the following modifiers to trigger mouse or keyboard event listeners only when the corresponding modifier key is pressed:&lt;/p>
&lt;ul>
&lt;li>&lt;code>.ctrl&lt;/code>&lt;/li>
&lt;li>&lt;code>.alt&lt;/code>&lt;/li>
&lt;li>&lt;code>.shift&lt;/code>&lt;/li>
&lt;li>&lt;code>.meta&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Note that modifier keys are different from regular keys and when used with &lt;code>keyup&lt;/code> events, they have to be pressed when the event is emitted. In other words, &lt;code>keyup.ctrl&lt;/code> will only trigger if you release a key while holding down &lt;code>ctrl&lt;/code>. It won&amp;rsquo;t trigger if you release the &lt;code>ctrl&lt;/code> key alone.&lt;/p>
&lt;h5 id="exact-modifier">&lt;code>.exact&lt;/code> Modifier
&lt;/h5>&lt;p>The &lt;code>.exact&lt;/code> modifier allows control of the exact combination of system modifiers needed to trigger an event.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vue" data-lang="vue">&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;lt;!--&lt;/span> &lt;span class="k">this&lt;/span> &lt;span class="nx">will&lt;/span> &lt;span class="nx">fire&lt;/span> &lt;span class="nx">even&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">Alt&lt;/span> &lt;span class="nx">or&lt;/span> &lt;span class="nx">Shift&lt;/span> &lt;span class="nx">is&lt;/span> &lt;span class="nx">also&lt;/span> &lt;span class="nx">pressed&lt;/span> &lt;span class="o">--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="nt">@click.ctrl&lt;/span>&lt;span class="s">=&amp;#34;onClick&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">A&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;lt;!--&lt;/span> &lt;span class="k">this&lt;/span> &lt;span class="nx">will&lt;/span> &lt;span class="nx">only&lt;/span> &lt;span class="nx">fire&lt;/span> &lt;span class="nx">when&lt;/span> &lt;span class="nx">Ctrl&lt;/span> &lt;span class="nx">and&lt;/span> &lt;span class="nx">no&lt;/span> &lt;span class="nx">other&lt;/span> &lt;span class="nx">keys&lt;/span> &lt;span class="nx">are&lt;/span> &lt;span class="nx">pressed&lt;/span> &lt;span class="o">--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="nt">@click.ctrl.exact&lt;/span>&lt;span class="s">=&amp;#34;onCtrlClick&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">A&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;lt;!--&lt;/span> &lt;span class="k">this&lt;/span> &lt;span class="nx">will&lt;/span> &lt;span class="nx">only&lt;/span> &lt;span class="nx">fire&lt;/span> &lt;span class="nx">when&lt;/span> &lt;span class="nx">no&lt;/span> &lt;span class="nx">system&lt;/span> &lt;span class="nx">modifiers&lt;/span> &lt;span class="nx">are&lt;/span> &lt;span class="nx">pressed&lt;/span> &lt;span class="o">--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="nt">@click.exact&lt;/span>&lt;span class="s">=&amp;#34;onClick&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">A&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="mouse-button-modifiers">Mouse Button Modifiers
&lt;/h3>&lt;ul>
&lt;li>&lt;code>.left&lt;/code>&lt;/li>
&lt;li>&lt;code>.right&lt;/code>&lt;/li>
&lt;li>&lt;code>.middle&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>These modifiers restrict the handler to events triggered by a specific mouse button.&lt;/p>
&lt;h2 id="form-input-bindings">Form Input Bindings
&lt;/h2>&lt;p>&lt;code>v-model&lt;/code> will ignore the initial &lt;code>value&lt;/code>, &lt;code>checked&lt;/code> or &lt;code>selected&lt;/code> attributes found on any form elements. It will always treat the current bound JavaScript state as the source of truth. You should declare the initial value on the JavaScript side, using reactivity APIs.&lt;/p>
&lt;h2 id="lifecycle-hooks">Lifecycle Hooks
&lt;/h2>&lt;p>There are also other hooks which will be called at different stages of the instance&amp;rsquo;s lifecycle, with the most commonly used being &lt;a class="link" href="https://vuejs.org/api/composition-api-lifecycle.html#onmounted" target="_blank" rel="noopener"
>&lt;code>onMounted&lt;/code>&lt;/a>, &lt;a class="link" href="https://vuejs.org/api/composition-api-lifecycle.html#onupdated" target="_blank" rel="noopener"
>&lt;code>onUpdated&lt;/code>&lt;/a>, and &lt;a class="link" href="https://vuejs.org/api/composition-api-lifecycle.html#onunmounted" target="_blank" rel="noopener"
>&lt;code>onUnmounted&lt;/code>&lt;/a>.&lt;/p>
&lt;p>&lt;img src="https://vuejs.org/assets/lifecycle.16e4c08e.png"
loading="lazy"
alt="Component lifecycle diagram"
>&lt;/p>
&lt;h2 id="watchs">Watchs
&lt;/h2>&lt;p>With Composition API, we can use the &lt;a class="link" href="https://vuejs.org/api/reactivity-core.html#watch" target="_blank" rel="noopener"
>&lt;code>watch&lt;/code> function&lt;/a> to trigger a callback whenever a piece of reactive state changes.&lt;/p>
&lt;p>&lt;code>watch&lt;/code>&amp;rsquo;s first argument can be different types of reactive &amp;ldquo;sources&amp;rdquo;: it can be a ref (including computed refs), a reactive object, a getter function, or an array of multiple sources.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ref&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ref&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// single ref
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">watch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">newX&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`x is &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">newX&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// getter
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">watch&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">y&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nx">sum&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`sum of x + y is: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">sum&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// array of multiple sources
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">watch&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">y&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="p">([&lt;/span>&lt;span class="nx">newX&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">newY&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`x is &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">newX&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb"> and y is &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">newY&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Do note that you can&amp;rsquo;t watch a property of a reactive object like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">obj&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">reactive&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">count&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// this won&amp;#39;t work because we are passing a number to watch()
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">watch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">obj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">count&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">count&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`count is: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">count&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Instead, use a getter:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// instead, use a getter:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">watch&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">obj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">count&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nx">count&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`count is: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">count&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="watcheffect">watchEffect
&lt;/h3>&lt;p>&lt;code>watchEffect()&lt;/code> allows us to perform a side effect immediately while automatically tracking the effect&amp;rsquo;s reactive dependencies.&lt;/p>
&lt;p>&lt;code>watch&lt;/code> and &lt;code>watchEffect&lt;/code> both allow us to reactively perform side effects. Their main difference is the way they track their reactive dependencies:&lt;/p>
&lt;ul>
&lt;li>&lt;code>watch&lt;/code> only tracks the explicitly watched source. It won&amp;rsquo;t track anything accessed inside the callback. In addition, the callback only triggers when the source has actually changed. &lt;code>watch&lt;/code> separates dependency tracking from the side effect, giving us more precise control over when the callback should fire.&lt;/li>
&lt;li>&lt;code>watchEffect&lt;/code>, on the other hand, combines dependency tracking and side effect into one phase. It automatically tracks every reactive property accessed during its synchronous execution. This is more convenient and typically results in terser code, but makes its reactive dependencies less explicit.&lt;/li>
&lt;/ul>
&lt;p>By default, user-created watcher callbacks are called &lt;strong>before&lt;/strong> Vue component updates. This means if you attempt to access the DOM inside a watcher callback, the DOM will be in the state before Vue has applied any updates.&lt;/p>
&lt;p>If you want to access the DOM in a watcher callback &lt;strong>after&lt;/strong> Vue has updated it, you need to specify the &lt;code>flush: 'post'&lt;/code> option.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">watch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">source&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">callback&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">flush&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;post&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">watchEffect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">callback&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">flush&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;post&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Post-flush &lt;code>watchEffect()&lt;/code> also has a convenience alias, &lt;code>watchPostEffect()&lt;/code>.&lt;/p>
&lt;p>Watchers declared synchronously inside &lt;code>setup()&lt;/code> or &lt;code>&amp;lt;script setup&amp;gt;&lt;/code> are bound to the owner component instance, and will be automatically stopped when the owner component is unmounted. In most cases, you don&amp;rsquo;t need to worry about stopping the watcher yourself.&lt;/p>
&lt;p>The key here is that the watcher must be created &lt;strong>synchronously&lt;/strong>: if the watcher is created in an async callback, it won&amp;rsquo;t be bound to the owner component and must be stopped manually to avoid memory leaks.&lt;/p>
&lt;p>To manually stop a watcher, use the returned handle function. This works for both &lt;code>watch&lt;/code> and &lt;code>watchEffect&lt;/code>.&lt;/p>
&lt;p>Note that there should be very few cases where you need to create watchers asynchronously, and synchronous creation should be preferred whenever possible. If you need to wait for some async data, you can make your watch logic conditional instead.&lt;/p>
&lt;h2 id="template-refs">Template Refs
&lt;/h2>&lt;p>There may still be cases where we need direct access to the underlying DOM elements. To achieve this, we can use the special &lt;code>ref&lt;/code> attribute:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">input&lt;/span> &lt;span class="nx">ref&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;input&amp;#34;&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>ref&lt;/code> is a special attribute, similar to the &lt;code>key&lt;/code> attribute discussed in the &lt;code>v-for&lt;/code> chapter. It allows us to obtain a direct reference to a specific DOM element or child component instance after it&amp;rsquo;s mounted.&lt;/p>
&lt;p>To obtain the reference with Composition API, we need to declare a ref with the same name&lt;/p>
&lt;h2 id="components">Components
&lt;/h2>&lt;h3 id="registration">Registration
&lt;/h3>&lt;h4 id="global-registration">Global Registration
&lt;/h4>&lt;p>We can make components available globally in the current &lt;a class="link" href="https://vuejs.org/guide/essentials/application.html" target="_blank" rel="noopener"
>Vue application&lt;/a> using the &lt;code>app.component()&lt;/code> method.&lt;/p>
&lt;p>If using SFCs, you will be registering the imported &lt;code>.vue&lt;/code> files.&lt;/p>
&lt;p>The &lt;code>app.component()&lt;/code> method can be &lt;strong>chained&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">app&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">component&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ComponentA&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ComponentA&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">component&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ComponentB&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ComponentB&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">component&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;ComponentC&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ComponentC&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Globally registered components can be used in the template of any component within this application&lt;/p>
&lt;h5 id="drawbacks">drawbacks
&lt;/h5>&lt;ul>
&lt;li>prevents build systems from removing unused components&lt;/li>
&lt;li>makes dependency relationships less explicit in large applications&lt;/li>
&lt;/ul>
&lt;h4 id="local-registration">Local Registration
&lt;/h4>&lt;p>When using SFC with &lt;code>&amp;lt;script setup&amp;gt;&lt;/code>, imported components are automatically registered locally.&lt;/p>
&lt;p>Note that &lt;strong>locally registered components are *not* also available in descendent components&lt;/strong>.&lt;/p>
&lt;h3 id="props">Props
&lt;/h3>&lt;p>Vue components require explicit props declaration so that Vue knows what external props passed to the component should be treated as fallthrough attributes.&lt;/p>
&lt;p>In SFCs using &lt;code>&amp;lt;script setup&amp;gt;&lt;/code>, props can be declared using the &lt;code>defineProps()&lt;/code> macro.&lt;/p>
&lt;h3 id="events">Events
&lt;/h3>&lt;h4 id="emit">$emit()
&lt;/h4>&lt;p>A component can emit custom events directly in template expressions (e.g. in a &lt;code>v-on&lt;/code> handler) using the built-in &lt;code>$emit&lt;/code> function.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="na">click&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;$emit(&amp;#39;someEvent&amp;#39;)&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>click me&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The parent can then listen to it using &lt;code>v-on&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">MyComponent&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="na">some-event&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;callback&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Like components and props, event names provide an automatic case transformation. Like components and props, event names provide an automatic case transformation.&lt;/p>
&lt;blockquote>
&lt;p>Unlike native DOM events, component emitted events do &lt;strong>not&lt;/strong> bubble. You can only listen to the events emitted by a direct child component.&lt;/p>
&lt;/blockquote>
&lt;p>It&amp;rsquo;s sometimes useful to emit a specific value with an event.&lt;/p>
&lt;blockquote>
&lt;p>All extra arguments passed to &lt;code>$emit()&lt;/code> after the event name will be forwarded to the listener. For example, with &lt;code>$emit('foo', 1, 2, 3)&lt;/code> the listener function will receive three arguments.&lt;/p>
&lt;/blockquote>
&lt;h4 id="defineemits">&lt;code>defineEmits&lt;/code>
&lt;/h4>&lt;p>Emitted events can be explicitly declared on the component via the &lt;a class="link" href="https://vuejs.org/api/sfc-script-setup.html#defineprops-defineemits" target="_blank" rel="noopener"
>&lt;code>defineEmits()&lt;/code>&lt;/a> macro.&lt;/p>
&lt;h3 id="fallthrough-attributes">Fallthrough Attributes
&lt;/h3>&lt;p>A &amp;ldquo;fallthrough attribute&amp;rdquo; is an attribute or &lt;code>v-on&lt;/code> event listener that is passed to a component, but is not explicitly declared in the receiving component&amp;rsquo;s &lt;a class="link" href="https://vuejs.org/guide/components/props.html" target="_blank" rel="noopener"
>props&lt;/a> or &lt;a class="link" href="https://vuejs.org/guide/components/events.html#declaring-emitted-events" target="_blank" rel="noopener"
>emits&lt;/a>. Common examples of this include &lt;code>class&lt;/code>, &lt;code>style&lt;/code>, and &lt;code>id&lt;/code> attributes.&lt;/p>
&lt;p>When a component renders a single root element, fallthrough attributes will be automatically added to the root element&amp;rsquo;s attributes.&lt;/p>
&lt;p>Unlike components with a single root node, components with multiple root nodes do not have an automatic attribute fallthrough behavior. If &lt;code>$attrs&lt;/code> are not bound explicitly, a runtime warning will be issued.&lt;/p>
&lt;h4 id="useattrs">&lt;code>useAttrs&lt;/code>
&lt;/h4>&lt;p>If needed, you can access a component&amp;rsquo;s fallthrough attributes in &lt;code>&amp;lt;script setup&amp;gt;&lt;/code> using the &lt;code>useAttrs()&lt;/code> API:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">script&lt;/span> &lt;span class="nx">setup&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">useAttrs&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;vue&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">attrs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">useAttrs&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/script&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="providerinject">Provider/inject
&lt;/h3>&lt;h4 id="prop-drilling">Prop Drilling
&lt;/h4>&lt;p>&lt;img src="https://vuejs.org/assets/prop-drilling.11201220.png"
loading="lazy"
alt="prop drilling diagram"
>&lt;/p>
&lt;p>We can solve props drilling with &lt;code>provide&lt;/code> and &lt;code>inject&lt;/code>. A parent component can serve as a &lt;strong>dependency provider&lt;/strong> for all its descendants. Any component in the descendant tree, regardless of how deep it is, can &lt;strong>inject&lt;/strong> dependencies provided by components up in its parent chain.&lt;/p>
&lt;p>&lt;img src="https://vuejs.org/assets/provide-inject.3e0505e4.png"
loading="lazy"
alt="Provide/inject scheme"
>&lt;/p>
&lt;h4 id="provide">Provide
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">provide&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="cm">/* key */&lt;/span> &lt;span class="s1">&amp;#39;message&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/* value */&lt;/span> &lt;span class="s1">&amp;#39;hello!&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>provide()&lt;/code> function accepts two arguments. The first argument is called the &lt;strong>injection key&lt;/strong>, which can be a string or a &lt;code>Symbol&lt;/code>. The injection key is used by descendent components to lookup the desired value to inject. A single component can call &lt;code>provide()&lt;/code> multiple times with different injection keys to provide different values.&lt;/p>
&lt;p>The second argument is the provided value. The value can be of any type, including reactive state such as refs.&lt;/p>
&lt;h4 id="inject">Inject
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">inject&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;message&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To inject data provided by an ancestor component, use the &lt;a class="link" href="https://vuejs.org/api/composition-api-dependency-injection.html#inject" target="_blank" rel="noopener"
>&lt;code>inject()&lt;/code>&lt;/a> function.&lt;/p>
&lt;p>If the provided value is a ref, it will be injected as-is and will &lt;strong>not&lt;/strong> be automatically unwrapped. This allows the injector component to &lt;strong>retain the reactivity connection&lt;/strong> to the provider component.&lt;/p>
&lt;p>By default, &lt;code>inject&lt;/code> assumes that the injected key is provided somewhere in the parent chain. In the case where the key is not provided, there will be a runtime warning.&lt;/p>
&lt;p>If we want to make an injected property work with optional providers, we need to declare a default value, similar to props&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">inject&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;message&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;default value&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>It is recommended to keep any mutations to reactive state inside of the *provider* whenever possible&lt;/strong>.&lt;/p>
&lt;p>There may be times when we need to update the data from a injector component. In such cases, we recommend providing a function that is responsible for mutating the state.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">provide&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;location&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">location&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">updateLocation&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally, you can wrap the provided value with &lt;a class="link" href="https://vuejs.org/api/reactivity-core.html#readonly" target="_blank" rel="noopener"
>&lt;code>readonly()&lt;/code>&lt;/a> if you want to ensure that the data passed through &lt;code>provide&lt;/code> cannot be mutated by the injected component.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">provide&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;read-only-count&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">readonly&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">count&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>symbol&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">myInjectionKey&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">Symbol&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">provide&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">myInjectionKey&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* data to provide */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">injected&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">inject&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">myInjectionKey&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="async-components">Async Components
&lt;/h3>&lt;p>In large applications, we may need to divide the app into smaller chunks and only load a component from the server when it&amp;rsquo;s needed. To make that possible, Vue has a &lt;a class="link" href="https://vuejs.org/api/general.html#defineasynccomponent" target="_blank" rel="noopener"
>&lt;code>defineAsyncComponent&lt;/code>&lt;/a> function.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">AsyncComp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">defineAsyncComponent&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Promise&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">resolve&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">reject&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...load component from server
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">resolve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="cm">/* loaded component */&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ... use `AsyncComp` like a normal component
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#dynamic_imports" target="_blank" rel="noopener"
>ES module dynamic import&lt;/a> also returns a Promise, so most of the time we will use it in combination with &lt;code>defineAsyncComponent&lt;/code>. Bundlers like Vite and webpack also support the syntax, so we can use it to import Vue SFCs.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">AsyncComp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">defineAsyncComponent&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">import&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./components/MyComponent.vue&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="loading-and-error-states">Loading and Error States
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">AsyncComp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">defineAsyncComponent&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// the loader function
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">loader&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="kr">import&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;./Foo.vue&amp;#39;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// A component to use while the async component is loading
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">loadingComponent&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">LoadingComponent&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Delay before showing the loading component. Default: 200ms.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">delay&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">200&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// A component to use if the load fails
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">errorComponent&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">ErrorComponent&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// The error component will be displayed if a timeout is
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// provided and exceeded. Default: Infinity.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">timeout&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">3000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="reusability">Reusability
&lt;/h2>&lt;h3 id="composables">Composables
&lt;/h3>&lt;p>In the context of Vue applications, a &amp;ldquo;composable&amp;rdquo; is a function that leverages Vue Composition API to encapsulate and reuse &lt;strong>stateful logic&lt;/strong>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">useMouse&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// state encapsulated and managed by the composable
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ref&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ref&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// a composable can update its managed state over time.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">update&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">event&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">pageX&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">y&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">event&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">pageY&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// a composable can also hook into its owner component&amp;#39;s
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// lifecycle to setup and teardown side effects.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">onMounted&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nb">window&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;mousemove&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">update&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">onUnmounted&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nb">window&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">removeEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;mousemove&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">update&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// expose managed state as return value
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">y&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>extract the logic into an external file, as a composable function.&lt;/p>
&lt;p>The cooler part about composables though, is that you can also nest them: one composable function can call one or more other composable functions. This enables us to compose complex logic using small, isolated units, similar to how we compose an entire application using components.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">useFetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">url&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ref&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">error&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ref&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">function&lt;/span> &lt;span class="nx">doFetch&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// reset state before fetching..
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">error&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// unref() unwraps potential refs
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">unref&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">url&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">res&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">json&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="k">catch&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">err&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">isRef&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">url&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// setup reactive re-fetch if input URL is a ref
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">watchEffect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">doFetch&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// otherwise, just fetch once
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// and avoid the overhead of a watcher
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">doFetch&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">error&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>&amp;lt;script setup&amp;gt;&lt;/code> is the only place where you can call composables after usage of await. The compiler automatically restores the active instance context after the async operation for you.&lt;/p>
&lt;p>To some extent, you can think of these extracted cas component-scoped services that can talk to one another.&lt;/p>
&lt;h3 id="custom-directives">Custom Directives
&lt;/h3>&lt;p>In addition to the default set of directives shipped in core (like &lt;code>v-model&lt;/code> or &lt;code>v-show&lt;/code>), Vue also allows you to register your own custom directives.&lt;/p>
&lt;p>We have introduced two forms of code reuse in Vue: &lt;a class="link" href="https://vuejs.org/guide/essentials/component-basics.html" target="_blank" rel="noopener"
>components&lt;/a> and &lt;a class="link" href="https://vuejs.org/guide/reusability/composables.html" target="_blank" rel="noopener"
>composables&lt;/a>. Components are the main building blocks, while composables are focused on reusing stateful logic. Custom directives, on the other hand, are mainly intended for reusing logic that involves low-level DOM access on plain elements.&lt;/p>
&lt;p>A custom directive is defined as an object containing lifecycle hooks similar to those of a component.&lt;/p>
&lt;p>In &lt;code>&amp;lt;script setup&amp;gt;&lt;/code>, any camelCase variable that starts with the &lt;code>v&lt;/code> prefix can be used as a custom directive. In the example above, &lt;code>vFocus&lt;/code> can be used in the template as &lt;code>v-focus&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">myDirective&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// called before bound element&amp;#39;s attributes
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// or event listeners are applied
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">created&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">el&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">binding&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">vnode&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">prevVnode&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// see below for details on arguments
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// called right before the element is inserted into the DOM.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">beforeMount&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// called when the bound element&amp;#39;s parent component
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// and all its children are mounted.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">mounted&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// called before the parent component is updated
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">beforeUpdate&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// called after the parent component and
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// all of its children have updated
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">updated&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// called before the parent component is unmounted
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">beforeUnmount&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// called when the parent component is unmounted
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">unmounted&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Directive hooks are passed these arguments:&lt;/p>
&lt;ul>
&lt;li>&lt;code>el&lt;/code>: the element the directive is bound to. This can be used to directly manipulate the DOM.&lt;/li>
&lt;li>&lt;code>binding&lt;/code>: an object containing the following properties.
&lt;ul>
&lt;li>&lt;code>value&lt;/code>: The value passed to the directive. For example in &lt;code>v-my-directive=&amp;quot;1 + 1&amp;quot;&lt;/code>, the value would be &lt;code>2&lt;/code>.&lt;/li>
&lt;li>&lt;code>oldValue&lt;/code>: The previous value, only available in &lt;code>beforeUpdate&lt;/code> and &lt;code>updated&lt;/code>. It is available whether or not the value has changed.&lt;/li>
&lt;li>&lt;code>arg&lt;/code>: The argument passed to the directive, if any. For example in &lt;code>v-my-directive:foo&lt;/code>, the arg would be &lt;code>&amp;quot;foo&amp;quot;&lt;/code>.&lt;/li>
&lt;li>&lt;code>modifiers&lt;/code>: An object containing modifiers, if any. For example in &lt;code>v-my-directive.foo.bar&lt;/code>, the modifiers object would be &lt;code>{ foo: true, bar: true }&lt;/code>.&lt;/li>
&lt;li>&lt;code>instance&lt;/code>: The instance of the component where the directive is used.&lt;/li>
&lt;li>&lt;code>dir&lt;/code>: the directive definition object.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>vnode&lt;/code>: the underlying VNode representing the bound element.&lt;/li>
&lt;li>&lt;code>prevNode&lt;/code>: the VNode representing the bound element from the previous render. Only available in the &lt;code>beforeUpdate&lt;/code> and &lt;code>updated&lt;/code> hooks.&lt;/li>
&lt;/ul>
&lt;p>It is also common to globally register custom directives at the app level.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">directive&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;focus&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* ... */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Custom directives should only be used when the desired functionality can only be achieved via direct DOM manipulation. Prefer declarative templating using built-in directives such as &lt;code>v-bind&lt;/code> when possible because they are more &lt;strong>efficient&lt;/strong> and &lt;strong>server-rendering friendly&lt;/strong>.&lt;/p>
&lt;/blockquote>
&lt;h4 id="shorthand">shorthand
&lt;/h4>&lt;p>It&amp;rsquo;s common for a custom directive to have the same behavior for &lt;code>mounted&lt;/code> and &lt;code>updated&lt;/code>, with no need for the other hooks. In such cases we can define the directive as a function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">directive&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;color&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">el&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">binding&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// this will be called for both `mounted` and `updated`
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">el&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">style&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">color&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">binding&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When used on components, custom directives will always apply to a component&amp;rsquo;s root node, similar to &lt;strong>&lt;a class="link" href="https://vuejs.org/guide/components/attrs.html" target="_blank" rel="noopener"
>Fallthrough Attributes&lt;/a>.&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">MyComponent&lt;/span> &lt;span class="na">v-demo&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;test&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;lt;!-- template of MyComponent --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="c">&amp;lt;!-- v-demo directive will be applied here --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">span&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>My component content&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">span&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that components can potentially have more than one root node. When applied to a multi-root component, a directive will be ignored and a warning will be thrown. Unlike attributes, directives can&amp;rsquo;t be passed to a different element with &lt;code>v-bind=&amp;quot;$attrs&amp;quot;&lt;/code>. In general, it is &lt;strong>not&lt;/strong> recommended to use custom directives on components.&lt;/p>
&lt;h3 id="plugins">Plugins
&lt;/h3>&lt;p>Plugins are self-contained code that usually add app-level functionality to Vue. This is how we install a plugin:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">createApp&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;vue&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">app&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">createApp&lt;/span>&lt;span class="p">({})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">use&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">myPlugin&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* optional options */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A plugin is defined as either an object that exposes an &lt;code>install()&lt;/code> method, or simply a function that acts as the install function itself. The install function receives the &lt;a class="link" href="https://vuejs.org/api/application.html" target="_blank" rel="noopener"
>app instance&lt;/a> along with additional options passed to &lt;code>app.use()&lt;/code>, if any:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">myPlugin&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">install&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">app&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">options&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// configure the app
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There is no strictly defined scope for a plugin, but common scenarios where plugins are useful include:&lt;/p>
&lt;ol>
&lt;li>Register one or more global components or custom directives with &lt;a class="link" href="https://vuejs.org/api/application.html#app-component" target="_blank" rel="noopener"
>&lt;code>app.component()&lt;/code>&lt;/a> and &lt;a class="link" href="https://vuejs.org/api/application.html#app-directive" target="_blank" rel="noopener"
>&lt;code>app.directive()&lt;/code>&lt;/a>.&lt;/li>
&lt;li>Make a resource &lt;a class="link" href="https://vuejs.org/guide/components/provide-inject.html" target="_blank" rel="noopener"
>injectable&lt;/a> throughout the app by calling &lt;a class="link" href="https://vuejs.org/api/application.html#app-provide" target="_blank" rel="noopener"
>&lt;code>app.provide()&lt;/code>&lt;/a>.&lt;/li>
&lt;li>Add some global instance properties or methods by attaching them to &lt;a class="link" href="https://vuejs.org/api/application.html#app-config-globalproperties" target="_blank" rel="noopener"
>&lt;code>app.config.globalProperties&lt;/code>&lt;/a>.&lt;/li>
&lt;li>A library that needs to perform some combination of the above (e.g. &lt;a class="link" href="https://github.com/vuejs/vue-router-next" target="_blank" rel="noopener"
>vue-router&lt;/a>).&lt;/li>
&lt;/ol>
&lt;h2 id="built-in">Built-in
&lt;/h2>&lt;h3 id="transition">Transition
&lt;/h3>&lt;p>Vue offers two built-in components that can help work with transitions and animations in response to changing state:&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;lt;Transition&amp;gt;&lt;/code> for applying animations when an element or component is entering and leaving the DOM.&lt;/li>
&lt;li>&lt;code>&amp;lt;TransitionGroup&amp;gt;&lt;/code> for applying animations when an element or component is inserted into, removed from, or moved within a &lt;code>v-for&lt;/code> list.&lt;/li>
&lt;/ul>
&lt;p>&lt;code>&amp;lt;Transition&amp;gt;&lt;/code> only supports a single element or component as its slot content. If the content is a component, the component must also have only one single root element.&lt;/p>
&lt;p>When an element in a &lt;code>&amp;lt;Transition&amp;gt;&lt;/code> component is inserted or removed, this is what happens:&lt;/p>
&lt;ol>
&lt;li>Vue will automatically sniff whether the target element has &lt;strong>CSS transitions or animations&lt;/strong> applied. If it does, a number of &lt;a class="link" href="https://vuejs.org/guide/built-ins/transition.html#transition-classes" target="_blank" rel="noopener"
>CSS transition classes&lt;/a> will be added / removed at appropriate timings.&lt;/li>
&lt;li>If there are &lt;strong>listeners&lt;/strong> for &lt;a class="link" href="https://vuejs.org/guide/built-ins/transition.html#javascript-hooks" target="_blank" rel="noopener"
>JavaScript hooks&lt;/a>, these hooks will be called at appropriate timings.&lt;/li>
&lt;li>If no CSS transitions / animations are detected and no JavaScript hooks are provided, the DOM operations for insertion and/or removal will be executed &lt;strong>on the browser&amp;rsquo;s next animation frame&lt;/strong>.&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://vuejs.org/assets/transition-classes.f0f7b3c9.png"
loading="lazy"
alt="Transition Diagram"
>&lt;/p>
&lt;ol>
&lt;li>&lt;code>v-enter-from&lt;/code>: Starting state for enter. Added before the element is inserted, removed one frame after the element is inserted.&lt;/li>
&lt;li>&lt;code>v-enter-active&lt;/code>: Active state for enter. Applied during the entire entering phase. Added before the element is inserted, removed when the transition/animation finishes. This class can be used to define the duration, delay and easing curve for the entering transition.&lt;/li>
&lt;li>&lt;code>v-enter-to&lt;/code>: Ending state for enter. Added one frame after the element is inserted (at the same time &lt;code>v-enter-from&lt;/code> is removed), removed when the transition/animation finishes.&lt;/li>
&lt;li>&lt;code>v-leave-from&lt;/code>: Starting state for leave. Added immediately when a leaving transition is triggered, removed after one frame.&lt;/li>
&lt;li>&lt;code>v-leave-active&lt;/code>: Active state for leave. Applied during the entire leaving phase. Added immediately when a leave transition is triggered, removed when the transition/animation finishes. This class can be used to define the duration, delay and easing curve for the leaving transition.&lt;/li>
&lt;li>&lt;code>v-leave-to&lt;/code>: Ending state for leave. Added one frame after a leaving transition is triggered (at the same time &lt;code>v-leave-from&lt;/code> is removed), removed when the transition/animation finishes.&lt;/li>
&lt;/ol>
&lt;p>For a named transition, its transition classes will be prefixed with its name instead of &lt;code>v&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vue" data-lang="vue">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Transition&lt;/span> &lt;span class="na">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;fade&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">Transition&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="nx">fade&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">enter&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">active&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="nx">fade&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">leave&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">active&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">transition&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">opacity&lt;/span> &lt;span class="mf">0.5&lt;/span>&lt;span class="nx">s&lt;/span> &lt;span class="nx">ease&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="nx">fade&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">enter&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">from&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="nx">fade&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">leave&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">to&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">opacity&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="transitiongroup">TransitionGroup
&lt;/h3>&lt;p>&lt;code>&amp;lt;TransitionGroup&amp;gt;&lt;/code> is a built-in component designed for animating the insertion, removal, and order change of elements or components that are rendered in a list.&lt;/p>
&lt;h3 id="keepalive">KeepAlive
&lt;/h3>&lt;p>&lt;code>&amp;lt;KeepAlive&amp;gt;&lt;/code> is a built-in component that allows us to &lt;strong>conditionally cache component instances&lt;/strong> (to keep the state) when dynamically switching between multiple components.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vue" data-lang="vue">&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;lt;!--&lt;/span> &lt;span class="nx">Inactive&lt;/span> &lt;span class="nx">components&lt;/span> &lt;span class="nx">will&lt;/span> &lt;span class="nx">be&lt;/span> &lt;span class="nx">cached&lt;/span>&lt;span class="o">!&lt;/span> &lt;span class="o">--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">KeepAlive&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">component&lt;/span> &lt;span class="nt">:is&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;activeComponent&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">KeepAlive&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="teleport">Teleport
&lt;/h3>&lt;p>&lt;code>&amp;lt;Teleport&amp;gt;&lt;/code> is a built-in component that allows us to &amp;ldquo;teleport&amp;rdquo; a part of a component&amp;rsquo;s template into a DOM node that exists outside the DOM hierarchy of that component.&lt;/p>
&lt;h3 id="suspense">Suspense
&lt;/h3>&lt;p>……&lt;/p></description></item><item><title>【Vue】Tutorial</title><link>https://dyhes.github.io/p/vuetutorial/</link><pubDate>Fri, 07 May 2021 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/vuetutorial/</guid><description>&lt;h2 id="single-file-component-sfc">Single File Component (SFC)
&lt;/h2>&lt;p>An SFC is a reusable self-contained block of code that encapsulates HTML, CSS and JavaScript that belong together, written inside a &lt;code>.vue&lt;/code> file.&lt;/p>
&lt;h2 id="declarative-rendering">declarative rendering
&lt;/h2>&lt;p>The core feature of Vue is &lt;strong>declarative rendering&lt;/strong>: using a template syntax that extends HTML, we can describe how the HTML should look like based on JavaScript state.&lt;/p>
&lt;h2 id="reactive">Reactive
&lt;/h2>&lt;p>State that can trigger updates when changed are considered &lt;strong>reactive&lt;/strong>. We can declare reactive state using Vue&amp;rsquo;s &lt;code>reactive()&lt;/code> API. Objects created from &lt;code>reactive()&lt;/code> are JavaScript &lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" rel="noopener"
>Proxies&lt;/a> that work just like normal objects.&lt;/p>
&lt;p>&lt;code>reactive()&lt;/code> only works on objects (including arrays and built-in types like &lt;code>Map&lt;/code> and &lt;code>Set&lt;/code>). &lt;code>ref()&lt;/code>, on the other hand, can take any value type and create an object that exposes the inner value under a &lt;code>.value&lt;/code> property.&lt;/p>
&lt;p>Reactive state declared in the component&amp;rsquo;s &lt;code>&amp;lt;script setup&amp;gt;&lt;/code> block can be used directly in the template.&lt;/p>
&lt;p>we did not need to use &lt;code>.value&lt;/code> when accessing the &lt;code>message&lt;/code> ref in templates: it is automatically unwrapped for more succinct usage.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vue" data-lang="vue">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">setup&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ref&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Hello World!&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">message&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{{&lt;/span>&lt;span class="nx">message&lt;/span>&lt;span class="p">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="directive">Directive
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vue" data-lang="vue">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">setup&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">ref&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;vue&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">titleClass&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ref&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;title&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h1&lt;/span> &lt;span class="na">v&lt;/span>&lt;span class="nt">-bind&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#39;titleClass&amp;#39;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">Make&lt;/span> &lt;span class="nx">me&lt;/span> &lt;span class="nx">red&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h1&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#39;titleClass&amp;#39;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="kr">short&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A &lt;strong>directive&lt;/strong> is a special attribute that starts with the &lt;code>v-&lt;/code> prefix. They are part of Vue&amp;rsquo;s template syntax. Similar to text interpolations, directive values are JavaScript expressions that have access to the component&amp;rsquo;s state.&lt;/p>
&lt;h2 id="event-listener">Event Listener
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vue" data-lang="vue">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">setup&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">ref&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;vue&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ref&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">increment&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// update component state
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">count&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="o">++&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="na">v&lt;/span>&lt;span class="nt">-on:click&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;increment&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;{{&lt;/span> &lt;span class="nx">count&lt;/span> &lt;span class="p">}}&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="nt">@click&lt;/span>&lt;span class="s">=&amp;#34;increment&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="na">for&lt;/span> &lt;span class="na">short&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="two-way-bindings">Two-Way bindings
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-VUE" data-lang="VUE">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">setup&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">text&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ref&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">onInput&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// a v-on handler receives the native DOM event
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// as the argument.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">text&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">target&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="nt">:value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;text&amp;#34;&lt;/span> &lt;span class="nt">@input&lt;/span>&lt;span class="s">=&amp;#34;onInput&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="nt">v-model&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;text&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="err">&amp;lt;!-&lt;/span>&lt;span class="nt">-for&lt;/span> &lt;span class="na">short&lt;/span>&lt;span class="err">--&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To simplify two-way bindings, Vue provides a directive, &lt;code>v-model&lt;/code>, which is essentially a syntax sugar.&lt;/p>
&lt;p>&lt;code>v-model&lt;/code> automatically syncs the &lt;code>&amp;lt;input&amp;gt;&lt;/code>&amp;rsquo;s value with the bound state, so we no longer need to use a event handler for that.&lt;/p>
&lt;p>&lt;code>v-model&lt;/code> works not only on text inputs, but also other input types such as checkboxes, radio buttons, and select dropdowns.&lt;/p>
&lt;h2 id="conditional-rendering">Conditional Rendering
&lt;/h2>&lt;p>We can use the &lt;code>v-if&lt;/code> directive to conditionally render an element, we can also use &lt;code>v-else&lt;/code> and &lt;code>v-else-if&lt;/code> to denote other branches of the condition.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vue" data-lang="vue">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">setup&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">ref&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;vue&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">awesome&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ref&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">toggle&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">awesome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="o">=!&lt;/span>&lt;span class="nx">awesome&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="nt">@click&lt;/span>&lt;span class="s">=&amp;#34;toggle&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="na">toggle&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h1&lt;/span> &lt;span class="na">v&lt;/span>&lt;span class="nt">-if&lt;/span>&lt;span class="err">=&amp;#39;&lt;/span>&lt;span class="na">awesome&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">Vue&lt;/span> &lt;span class="nx">is&lt;/span> &lt;span class="nx">awesome&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h1&lt;/span> &lt;span class="nt">v-else&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="na">Oh&lt;/span> &lt;span class="na">no&lt;/span> &lt;span class="err">😢&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="list-rendering">List Rendering
&lt;/h2>&lt;p>We can use the &lt;code>v-for&lt;/code> directive to render a list of elements based on a source array&lt;/p>
&lt;p>we are also giving each todo object a unique &lt;code>id&lt;/code>, and binding it as the &lt;a class="link" href="https://vuejs.org/api/built-in-special-attributes.html#key" target="_blank" rel="noopener"
>special &lt;code>key&lt;/code> attribute&lt;/a> for each &lt;code>&amp;lt;li&amp;gt;&lt;/code>. The &lt;code>key&lt;/code> allows Vue to accurately move each &lt;code>&amp;lt;li&amp;gt;&lt;/code> to match the position of its corresponding object in the array.&lt;/p>
&lt;p>There are two ways to update the list:&lt;/p>
&lt;ol>
&lt;li>Call &lt;a class="link" href="https://stackoverflow.com/questions/9009879/which-javascript-array-functions-are-mutating" target="_blank" rel="noopener"
>mutating methods&lt;/a> on the source array&lt;/li>
&lt;li>Replace the array with a new one&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vue" data-lang="vue">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">setup&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">ref&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;vue&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// give each todo a unique id
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">newTodo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ref&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">todos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ref&lt;/span>&lt;span class="p">([&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">text&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Learn HTML&amp;#39;&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">text&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Learn JavaScript&amp;#39;&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">text&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Learn Vue&amp;#39;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">addTodo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">todos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">text&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">newTodo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">newTodo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">removeTodo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">todo&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">todos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">todos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">filter&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">t&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">t&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="nx">todo&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="nt">v-model&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;newTodo&amp;#34; @keyup.enter=&amp;#34;addTodo&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="nt">@click&lt;/span>&lt;span class="s">=&amp;#34;addTodo&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="na">Add&lt;/span> &lt;span class="na">Todo&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">ul&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span> &lt;span class="nt">v-for&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;todo in todos&amp;#34; :key=&amp;#34;todo.id&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{{&lt;/span> &lt;span class="na">todo.text&lt;/span> &lt;span class="p">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="nt">@click&lt;/span>&lt;span class="s">=&amp;#34;removeTodo(todo)&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="na">X&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">ul&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="computed-property">Computed property
&lt;/h2>&lt;p>We can create a computed ref that computes its &lt;code>.value&lt;/code> based on other reactive data sources by using &lt;code>computed()&lt;/code>&lt;/p>
&lt;p>A computed property tracks other reactive state used in its computation as dependencies. It caches the result and automatically updates it when its dependencies change.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vue" data-lang="vue">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">setup&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">ref&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">computed&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;vue&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">newTodo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ref&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">hideCompleted&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ref&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">todos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ref&lt;/span>&lt;span class="p">([&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">text&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Learn HTML&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">done&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">text&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Learn JavaScript&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">done&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">text&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Learn Vue&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">done&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">false&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">filteredTodos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">computed&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">hideCompleted&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">?&lt;/span> &lt;span class="nx">todos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">filter&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">t&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="nx">t&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">done&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">:&lt;/span> &lt;span class="nx">todos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">addTodo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">todos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">text&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">newTodo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">done&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">false&lt;/span> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">newTodo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">removeTodo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">todo&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">todos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">todos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">filter&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">t&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">t&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="nx">todo&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="nt">v-model&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;newTodo&amp;#34; @keyup.enter=&amp;#34;addTodo&amp;#34;&lt;/span>&lt;span class="p"> /&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="nt">@click&lt;/span>&lt;span class="s">=&amp;#34;addTodo&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="na">Add&lt;/span> &lt;span class="na">Todo&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">ul&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span> &lt;span class="nt">v-for&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;todo in filteredTodos&amp;#34; :key=&amp;#34;todo.id&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;checkbox&amp;#34;&lt;/span> &lt;span class="nt">v-model&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;todo.done&amp;#34;&lt;/span>&lt;span class="p"> /&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">span&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;{ done: todo.done }&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;{{&lt;/span> &lt;span class="nx">todo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">text&lt;/span> &lt;span class="p">}}&amp;lt;/&lt;/span>&lt;span class="nt">span&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="nt">@click&lt;/span>&lt;span class="s">=&amp;#34;removeTodo(todo)&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="na">X&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">ul&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="na">click&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;hideCompleted = !hideCompleted&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{{&lt;/span> &lt;span class="nx">hideCompleted&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s1">&amp;#39;Show all&amp;#39;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Hide completed&amp;#39;&lt;/span> &lt;span class="p">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="nx">done&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">text&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">decoration&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">line&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">through&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="lifecycle-and-template-refs">Lifecycle and Template Refs
&lt;/h2>&lt;p>We can request a &lt;strong>template ref&lt;/strong> - i.e. a reference to an element in the template - using the &lt;a class="link" href="https://vuejs.org/api/built-in-special-attributes.html#ref" target="_blank" rel="noopener"
>special &lt;code>ref&lt;/code> attribute&lt;/a>.&lt;/p>
&lt;p>To access the ref, we need to declare a ref with matching name in &lt;code>&amp;lt;script setup&amp;gt;&lt;/code> . Notice the ref is initialized with &lt;code>null&lt;/code> value. This is because the element doesn&amp;rsquo;t exist yet when &lt;code>&amp;lt;script setup&amp;gt;&lt;/code> is executed. The template ref is only accessible after the component is &lt;strong>mounted&lt;/strong>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vue" data-lang="vue">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">setup&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">ref&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">onMounted&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;vue&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">p&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ref&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">onMounted&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">textContent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;mounted!&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span> &lt;span class="na">ref&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;p&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">hello&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>hooks such as &lt;code>onUpdated&lt;/code> and &lt;code>onUnmounted&lt;/code> are lifecycle hooks.&lt;/p>
&lt;h2 id="watchers">Watchers
&lt;/h2>&lt;p>Sometimes we may need to perform &amp;ldquo;side effects&amp;rdquo; reactively&lt;/p>
&lt;p>&lt;code>watch()&lt;/code> can directly watch a ref, and the callback gets called whenever &lt;code>count&lt;/code>&amp;rsquo;s value changes.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vue" data-lang="vue">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">setup&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">ref&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">watch&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;vue&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">todoId&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ref&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">todoData&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ref&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">fetchData&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">todoData&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">fetch&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="sb">`https://jsonplaceholder.typicode.com/todos/&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">todoId&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">todoData&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">await&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">json&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">fetchData&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">watch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">todoId&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">fetchData&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">Todo&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{{&lt;/span> &lt;span class="nx">todoId&lt;/span> &lt;span class="p">}}&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="nt">@click&lt;/span>&lt;span class="s">=&amp;#34;todoId++&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="na">Fetch&lt;/span> &lt;span class="na">next&lt;/span> &lt;span class="na">todo&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span> &lt;span class="nt">v-if&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;!todoData&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="na">Loading...&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">pre&lt;/span> &lt;span class="nt">v-else&lt;/span>&lt;span class="p">&amp;gt;{{&lt;/span> &lt;span class="na">todoData&lt;/span> &lt;span class="p">}}&amp;lt;/&lt;/span>&lt;span class="nt">pre&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="props">Props
&lt;/h2>&lt;p>A child component can accept input from the parent via &lt;strong>props&lt;/strong>. First, it needs to declare the props it accepts:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vue" data-lang="vue">&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;lt;!--&lt;/span> &lt;span class="nx">ChildComp&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">vue&lt;/span> &lt;span class="o">--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">setup&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">props&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">defineProps&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">msg&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nb">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note &lt;code>defineProps()&lt;/code> is a compile-time macro and doesn&amp;rsquo;t need to be imported. Once declared, the &lt;code>msg&lt;/code> prop can be used in the child component&amp;rsquo;s template. It can also be accessed in JavaScript via the returned object of &lt;code>defineProps()&lt;/code>.&lt;/p>
&lt;h2 id="emits">Emits
&lt;/h2>&lt;p>In addition to receiving props, a child component can also emit events to the parent:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vue" data-lang="vue">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">setup&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// declare emitted events
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">emitter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">defineEmits&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="s1">&amp;#39;response&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;test&amp;#39;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// emit with argument
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">emitter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;response&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;hello from child&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">emitter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;test&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;testtest&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The first argument to &lt;code>emit()&lt;/code> is the event name. Any additional arguments are passed on to the event listener.&lt;/p>
&lt;p>The parent can listen to child-emitted events using &lt;code>v-on&lt;/code> - here the handler receives the extra argument from the child emit call and assigns it to local state:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vue" data-lang="vue">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">ChildComp&lt;/span> &lt;span class="err">@&lt;/span>&lt;span class="na">response&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;(msg) =&amp;gt; childMsg = msg&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="slots">Slots
&lt;/h2>&lt;p>In addition to passing data via props, the parent component can also pass down template fragments to the child via &lt;strong>slots&lt;/strong>.&lt;/p>
&lt;p>In the child component, it can render the slot content from the parent using the &lt;code>&amp;lt;slot&amp;gt;&lt;/code> element as outlet.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vue" data-lang="vue">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//parent
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">ChildComp&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">message&lt;/span> &lt;span class="nx">to&lt;/span> &lt;span class="nx">pass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">ChildComp&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//child
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">some&lt;/span> &lt;span class="nx">word&lt;/span> &lt;span class="nx">here&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">slot&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">message&lt;/span> &lt;span class="nx">passed&lt;/span> &lt;span class="nx">form&lt;/span> &lt;span class="nx">parent&lt;/span> &lt;span class="nx">will&lt;/span> &lt;span class="nx">be&lt;/span> &lt;span class="nx">present&lt;/span> &lt;span class="nx">here&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">and&lt;/span> &lt;span class="k">this&lt;/span> &lt;span class="nx">is&lt;/span> &lt;span class="nx">the&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="nx">words&lt;/span>&lt;span class="p">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">slot&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>【React】Basics</title><link>https://dyhes.github.io/p/reactbasics/</link><pubDate>Sat, 01 May 2021 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/reactbasics/</guid><description>&lt;h2 id="jsx">JSX
&lt;/h2>&lt;p>JSX is a &lt;strong>syntax extension&lt;/strong> to JavaScript. it is recomended to use with React to describe &lt;strong>what the UI should look like&lt;/strong>. JSX may remind you of a template language, but it comes with the full power of JavaScript.&lt;/p>
&lt;p>Since JSX is closer to JavaScript than to HTML, React DOM uses &lt;code>camelCase&lt;/code> property naming convention instead of HTML attribute names.&lt;/p>
&lt;p>Babel compiles JSX down to &lt;code>React.createElement()&lt;/code> calls.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//before
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">element&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h1&lt;/span> &lt;span class="na">className&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;greeting&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Hello&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">world&lt;/span>&lt;span class="o">!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//after compilation
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">element&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createElement&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;h1&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">className&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;greeting&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;Hello, world!&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="in-depth">In-depth
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>Choosing the Type at Runtime&lt;/p>
&lt;p>You cannot use a general expression as the React element type. If you do want to use a general expression to indicate the type of the element, just assign it to a capitalized variable first. This often comes up when you want to render a different component based on a prop:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="nx">React&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;react&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">PhotoStory&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">VideoStory&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;./stories&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">components&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">photo&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">PhotoStory&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">video&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">VideoStory&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">Story&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Correct! JSX type can be a capitalized variable.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">SpecificStory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">components&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">storyType&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">SpecificStory&lt;/span> &lt;span class="na">story&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">story&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">/&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Props default to &amp;rsquo;true'&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">MyTextBox&lt;/span> &lt;span class="na">autocomplete&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//equals to
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">MyTextBox&lt;/span> &lt;span class="na">autocomplete&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In general, we don’t recommend &lt;em>not&lt;/em> passing a value for a prop, because it can be confused with the &lt;a class="link" href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Object_initializer#New_notations_in_ECMAScript_2015" target="_blank" rel="noopener"
>ES6 object shorthand&lt;/a> &lt;code>{foo}&lt;/code> which is short for &lt;code>{foo: foo}&lt;/code> rather than &lt;code>{foo: true}&lt;/code>. This behavior is just there so that it matches the behavior of HTML.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Spread Attributes&lt;/p>
&lt;p>In general, we don’t recommend &lt;em>not&lt;/em> passing a value for a prop, because it can be confused with the &lt;a class="link" href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Object_initializer#New_notations_in_ECMAScript_2015" target="_blank" rel="noopener"
>ES6 object shorthand&lt;/a> &lt;code>{foo}&lt;/code> which is short for &lt;code>{foo: foo}&lt;/code> rather than &lt;code>{foo: true}&lt;/code>. This behavior is just there so that it matches the behavior of HTML.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">App1&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Greeting&lt;/span> &lt;span class="na">firstName&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;Ben&amp;#34;&lt;/span> &lt;span class="na">lastName&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;Hector&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//equals to
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">App2&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">props&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">firstName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Ben&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">lastName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Hector&amp;#39;&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Greeting&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="na">...props&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">/&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//eg2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">Button&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">props&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">kind&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">...&lt;/span>&lt;span class="nx">other&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">props&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">className&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">kind&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s2">&amp;#34;primary&amp;#34;&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s2">&amp;#34;PrimaryButton&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;SecondaryButton&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="na">className&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">className&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="na">...other&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">/&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Children&lt;/p>
&lt;p>In JSX expressions that contain both an opening tag and a closing tag, the content between those tags is passed as a special prop: &lt;code>props.children&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Boolean&lt;/strong>&lt;/p>
&lt;p>&lt;code>false&lt;/code>, &lt;code>null&lt;/code>, &lt;code>undefined&lt;/code>, and &lt;code>true&lt;/code> are valid children. They simply don’t render. This can be useful to conditionally render React elements.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">showHeader&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Header&lt;/span> &lt;span class="p">/&amp;gt;}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Content&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Conversely, if you want a value like false, true, null, or undefined to appear in the output, you have to convert it to a string first:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">My&lt;/span> &lt;span class="nx">JavaScript&lt;/span> &lt;span class="nx">variable&lt;/span> &lt;span class="nx">is&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">myVariable&lt;/span>&lt;span class="p">)}.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>String Literals&lt;/strong>&lt;/p>
&lt;p>You can put a string between the opening and closing tags and &lt;code>props.children&lt;/code> will just be that string. HTML is unescaped, so you can generally write JSX just like you would write HTML.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">MyComponent&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">This&lt;/span> &lt;span class="nx">is&lt;/span> &lt;span class="nx">valid&lt;/span> &lt;span class="nx">HTML&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nx">amp&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">JSX&lt;/span> &lt;span class="nx">at&lt;/span> &lt;span class="nx">the&lt;/span> &lt;span class="nx">same&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">MyComponent&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>JSX removes whitespace at the beginning and ending of a line. It also removes blank lines. New lines adjacent to tags are removed; new lines that occur in the middle of string literals are condensed into a single space.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>JSX&lt;/strong>&lt;/p>
&lt;p>You can provide more JSX elements as the children. This is useful for displaying nested components.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">MyContainer&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">MyFirstComponent&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">MySecondComponent&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">MyContainer&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>JS Expression&lt;/strong>&lt;/p>
&lt;p>You can pass any JavaScript expression as children, by enclosing it within &lt;code>{}&lt;/code>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="components">Components
&lt;/h2>&lt;p>Components let you split the UI into independent, reusable pieces, and think about each piece in isolation.&lt;/p>
&lt;p>Conceptually, components are like JavaScript functions. They accept arbitrary inputs (called “props”) and return React elements describing what should appear on the screen.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> &lt;strong>Always start component names with a capital letter.&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>Function Component&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">Welcome&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">h1&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="nx">Hello&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/h1&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">element&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">Welcome&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Sara&amp;#34;&lt;/span> &lt;span class="o">/&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">ReactDOM&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">render&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">element&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;root&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Class Component&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">Welcome&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Component&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">render&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">Hello&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">}&amp;lt;/&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">element&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Welcome&lt;/span>&lt;span class="p">/&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">ReactDOM&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">render&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">element&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;root&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//with state
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">class&lt;/span> &lt;span class="nx">Clock&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Component&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">super&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">date&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">()};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">render&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">Hello&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">world&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">It&lt;/span> &lt;span class="nx">is&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toLocaleTimeString&lt;/span>&lt;span class="p">()}.&amp;lt;/&lt;/span>&lt;span class="nt">h2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">ReactDOM&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">render&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Clock&lt;/span> &lt;span class="p">/&amp;gt;,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;root&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//with method
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">class&lt;/span> &lt;span class="nx">Toggle&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Component&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">super&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">isToggleOn&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// This binding is necessary to make `this` work in the callback
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">handleClick&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">handleClick&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">handleClick&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">prevState&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">isToggleOn&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="nx">prevState&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">isToggleOn&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">render&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="na">onClick&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">handleClick&lt;/span>&lt;span class="p">}&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">isToggleOn&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s1">&amp;#39;ON&amp;#39;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;OFF&amp;#39;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">ReactDOM&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">render&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Toggle&lt;/span> &lt;span class="p">/&amp;gt;,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;root&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="lifecycle-methods">Lifecycle Methods
&lt;/h2>&lt;p>&lt;img src="C:%5cUsers%5cdyhes%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20220329184734485.png"
loading="lazy"
alt="image-20220329184734485"
>&lt;/p>
&lt;p>include less used method&lt;/p>
&lt;p>&lt;img src="C:%5cUsers%5cdyhes%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20220330145339086.png"
loading="lazy"
alt="image-20220330145339086"
>&lt;/p>
&lt;p>[more detail&amp;hellip;](&lt;a class="link" href="https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/" target="_blank" rel="noopener"
>React lifecycle methods diagram (wojtekmaj.pl)&lt;/a>)&lt;/p>
&lt;h2 id="hooks">Hooks
&lt;/h2>&lt;p>&lt;em>Hooks&lt;/em> are a new addition in &lt;strong>React 16.8&lt;/strong>. They let you use state and other React features without writing a class.&lt;/p>
&lt;h3 id="usestate">&lt;code>useState&lt;/code>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">setState&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">useState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">initialState&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Returns a stateful value, and a function to update it.&lt;/p>
&lt;p>During the initial render, the returned state (state) is the same as the value passed as the first argument (initialState).&lt;/p>
&lt;p>The setState function is used to update the state. It accepts a new state value and enqueues a re-render of the component.&lt;/p>
&lt;p>If the new state is computed using the previous state, you can pass a function to &lt;code>setState&lt;/code>. The function will receive the previous value, and return an updated value.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="na">onClick&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">setCount&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">prevCount&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">prevCount&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)}&amp;gt;&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Unlike the &lt;code>setState&lt;/code> method found in class components, &lt;code>useState&lt;/code> does not automatically merge update objects. You can replicate this behavior by combining the function updater form with object spread syntax:&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">setState&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">useState&lt;/span>&lt;span class="p">({});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">setState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">prevState&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Object.assign would also work
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="p">{...&lt;/span>&lt;span class="nx">prevState&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">...&lt;/span>&lt;span class="nx">updatedValues&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Another option is &lt;code>useReducer&lt;/code>, which is more suited for managing state objects that contain multiple sub-values.&lt;/p>
&lt;/blockquote>
&lt;p>The &lt;code>initialState&lt;/code> argument is the state used during the initial render. In subsequent renders, it is disregarded. If the initial state is the result of an expensive computation, you may provide a function instead, which will be executed only on the initial render:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">setState&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">useState&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">initialState&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">someExpensiveComputation&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">initialState&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you update a State Hook to the same value as the current state, React will bail out without rendering the children or firing effects.&lt;/p>
&lt;p>Note that React may still need to render that specific component again before bailing out. That shouldn’t be a concern because React won’t unnecessarily go “deeper” into the tree. If you’re doing expensive calculations while rendering, you can optimize them with &lt;code>useMemo&lt;/code>.&lt;/p>
&lt;h3 id="useeffect">&lt;code>useEffect&lt;/code>
&lt;/h3>&lt;pre tabindex="0">&lt;code>useEffect(didUpdate);
&lt;/code>&lt;/pre>&lt;p>Accepts a &lt;strong>function&lt;/strong> that contains &lt;strong>imperative, possibly effectful code&lt;/strong>.&lt;/p>
&lt;p>Mutations, subscriptions, timers, logging, and other side effects are &lt;strong>not allowed inside the main body&lt;/strong> of a function component (referred to as React’s &lt;em>&lt;strong>render phase&lt;/strong>&lt;/em>). Doing so will lead to confusing bugs and inconsistencies in the UI.&lt;/p>
&lt;p>Instead, use &lt;code>useEffect&lt;/code>. The function passed to &lt;code>useEffect&lt;/code> will &lt;strong>run after the render is committed to the screen&lt;/strong>. Think of effects as an escape hatch from React’s purely functional world into the imperative world.&lt;/p>
&lt;p>By default, effects &lt;strong>run after every completed render&lt;/strong>, but you can choose to fire them &lt;a class="link" href="https://reactjs.org/docs/hooks-reference.html#conditionally-firing-an-effect" target="_blank" rel="noopener"
>only when certain values have changed&lt;/a>.&lt;/p>
&lt;h4 id="cleaning-up-an-effect">Cleaning up an effect
&lt;/h4>&lt;p>Often, effects create resources that need to be cleaned up &lt;strong>before&lt;/strong> the component leaves the screen, such as a subscription or timer ID. To do this, the function passed to &lt;code>useEffect&lt;/code> may &lt;strong>return a clean-up function&lt;/strong>. For example, to create a subscription:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">useEffect&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">subscription&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">props&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">source&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">subscribe&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Clean up the subscription
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">subscription&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">unsubscribe&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The clean-up function &lt;strong>runs before the component is removed from the UI&lt;/strong> to prevent memory leaks. Additionally, if a component renders multiple times (as they typically do), the &lt;strong>previous effect is cleaned up before executing the next effect&lt;/strong>. In our example, this means &lt;strong>a new subscription is created on every update&lt;/strong>. To avoid firing an effect on every update, refer to the next section.&lt;/p>
&lt;h4 id="timing-of-effects">Timing of effects
&lt;/h4>&lt;p>Unlike &lt;code>componentDidMount&lt;/code> and &lt;code>componentDidUpdate&lt;/code>, the function passed to &lt;code>useEffect&lt;/code> fires &lt;strong>after&lt;/strong> layout and paint, during a &lt;strong>deferred event&lt;/strong>. This makes it suitable for the many common side effects, like setting up subscriptions and event handlers, because most types of work shouldn’t block the browser from updating the screen.&lt;/p>
&lt;p>However, not all effects can be deferred. For example, a DOM mutation that is visible to the user must fire synchronously before the next paint so that the user does not perceive a visual inconsistency. (The distinction is conceptually similar to passive versus active event listeners.) For these types of effects, React provides one additional Hook called &lt;a class="link" href="https://reactjs.org/docs/hooks-reference.html#uselayouteffect" target="_blank" rel="noopener"
>&lt;code>useLayoutEffect&lt;/code>&lt;/a>. It has the same signature as &lt;code>useEffect&lt;/code>, and &lt;strong>only differs in when it is fired&lt;/strong>.&lt;/p>
&lt;p>Additionally, starting in &lt;strong>React 18&lt;/strong>, the function passed to &lt;code>useEffect&lt;/code> will fire synchronously &lt;strong>before&lt;/strong> layout and paint &lt;strong>when it’s the result of a discrete user input&lt;/strong> such as a click, or when it’s the result of an update wrapped in &lt;a class="link" href="https://reactjs.org/docs/react-dom.html#flushsync" target="_blank" rel="noopener"
>&lt;code>flushSync&lt;/code>&lt;/a>. This behavior allows the result of the effect to be observed by the event system, or by the caller of &lt;a class="link" href="https://reactjs.org/docs/react-dom.html#flushsync" target="_blank" rel="noopener"
>&lt;code>flushSync&lt;/code>&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note&lt;/strong> : This only affects the timing of when the function passed to &lt;code>useEffect&lt;/code> is called - updates scheduled inside these effects are still deferred. This is different than &lt;a class="link" href="https://reactjs.org/docs/hooks-reference.html#uselayouteffect" target="_blank" rel="noopener"
>&lt;code>useLayoutEffect&lt;/code>&lt;/a>, which fires the function and processes the updates inside of it immediately.&lt;/p>
&lt;/blockquote>
&lt;p>Even in cases where &lt;code>useEffect&lt;/code> is deferred until after the browser has painted, it’s guaranteed to fire &lt;strong>before any new renders&lt;/strong>. React will always flush a previous render’s effects before starting a new update.&lt;/p>
&lt;h4 id="conditionally-firing-an-effect">Conditionally firing an effect
&lt;/h4>&lt;p>The default behavior for effects is to fire the effect after every completed render. That way an effect is always recreated if one of its dependencies changes.&lt;/p>
&lt;p>However, this may be overkill in some cases, like the subscription example from the previous section. We don’t need to create a new subscription on every update, only if the &lt;code>source&lt;/code> prop has changed.&lt;/p>
&lt;p>To implement this, &lt;strong>pass a second argument to &lt;code>useEffect&lt;/code> that is the array of values that the effect depends on&lt;/strong>. Our updated example now looks like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>useEffect(
() =&amp;gt; {
const subscription = props.source.subscribe();
return () =&amp;gt; {
subscription.unsubscribe();
};
},
[props.source],
);
&lt;/code>&lt;/pre>&lt;p>Now the subscription will only be recreated when &lt;code>props.source&lt;/code> changes.&lt;/p>
&lt;blockquote>
&lt;p>Note&lt;/p>
&lt;p>If you use this optimization, make sure the array includes &lt;strong>all values from the component scope (such as props and state) that change over time and that are used by the effect&lt;/strong>. Otherwise, your code will reference stale values from previous renders. Learn more about &lt;a class="link" href="https://reactjs.org/docs/hooks-faq.html#is-it-safe-to-omit-functions-from-the-list-of-dependencies" target="_blank" rel="noopener"
>how to deal with functions&lt;/a> and what to do when the &lt;a class="link" href="https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often" target="_blank" rel="noopener"
>array values change too often&lt;/a>.&lt;/p>
&lt;p>If you want to run an effect and clean it up &lt;strong>only once (on mount and unmount)&lt;/strong>, you can pass an empty array (&lt;code>[]&lt;/code>) as a second argument. This tells React that your effect doesn’t depend on &lt;em>any&lt;/em> values from props or state, so it never needs to re-run. This isn’t handled as a special case — it follows directly from how the dependencies array always works.&lt;/p>
&lt;p>If you pass an empty array (&lt;code>[]&lt;/code>), the props and state inside the effect &lt;strong>will always have their initial values&lt;/strong>. While passing &lt;code>[]&lt;/code> as the second argument is closer to the familiar &lt;code>componentDidMount&lt;/code> and &lt;code>componentWillUnmount&lt;/code> mental model, there are usually &lt;a class="link" href="https://reactjs.org/docs/hooks-faq.html#is-it-safe-to-omit-functions-from-the-list-of-dependencies" target="_blank" rel="noopener"
>better&lt;/a> &lt;a class="link" href="https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often" target="_blank" rel="noopener"
>solutions&lt;/a> to avoid re-running effects too often. Also, don’t forget that React defers running &lt;code>useEffect&lt;/code> until after the browser has painted, so doing extra work is less of a problem.&lt;/p>
&lt;p>We recommend using the &lt;a class="link" href="https://github.com/facebook/react/issues/14920" target="_blank" rel="noopener"
>&lt;code>exhaustive-deps&lt;/code>&lt;/a> rule as part of our &lt;a class="link" href="https://www.npmjs.com/package/eslint-plugin-react-hooks#installation" target="_blank" rel="noopener"
>&lt;code>eslint-plugin-react-hooks&lt;/code>&lt;/a> package. It warns when dependencies are specified incorrectly and suggests a fix.&lt;/p>
&lt;/blockquote>
&lt;p>The array of dependencies is not passed as arguments to the effect function. Conceptually, though, that’s what they represent: &lt;strong>every value referenced inside the effect function should also appear in the dependencies array&lt;/strong>. In the future, a sufficiently advanced compiler could create this array automatically.&lt;/p>
&lt;h3 id="usecontext">&lt;code>useContext&lt;/code>
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">useContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">MyContext&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Accepts a context object (the value returned from &lt;code>React.createContext&lt;/code>) and returns the current context value for that context. The current context value is determined by the &lt;code>value&lt;/code> prop of the nearest &lt;code>&amp;lt;MyContext.Provider&amp;gt;&lt;/code> above the calling component in the tree.&lt;/p>
&lt;p>Don’t forget that the argument to &lt;code>useContext&lt;/code> must be the &lt;em>context object itself&lt;/em>:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Correct:&lt;/strong> &lt;code>useContext(MyContext)&lt;/code>&lt;/li>
&lt;li>&lt;strong>Incorrect:&lt;/strong> &lt;code>useContext(MyContext.Consumer)&lt;/code>&lt;/li>
&lt;li>&lt;strong>Incorrect:&lt;/strong> &lt;code>useContext(MyContext.Provider)&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="rules-of-hooks">Rules of Hooks
&lt;/h3>&lt;p>Hooks are JavaScript functions, but you need to follow two rules when using them.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Only Call Hooks &lt;strong>at the Top Leve&lt;/strong>l&lt;/p>
&lt;p>&lt;strong>Don’t call Hooks inside loops, conditions, or nested functions.&lt;/strong> Instead, always use Hooks at the top level of your React function, &lt;strong>before any early returns&lt;/strong>. By following this rule, you ensure that Hooks are called in the same order each time a component renders. That’s what allows React to correctly preserve the state of Hooks between multiple &lt;code>useState&lt;/code> and &lt;code>useEffect&lt;/code> calls.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Only Call Hooks &lt;strong>from React Functions&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Don’t call Hooks from regular JavaScript functions.&lt;/strong> Instead, you can:&lt;/p>
&lt;ul>
&lt;li>✅ Call Hooks from React function components.&lt;/li>
&lt;li>✅ Call Hooks from custom Hooks&lt;/li>
&lt;/ul>
&lt;p>By following this rule, you ensure that all stateful logic in a component is clearly visible from its source code.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="custom-hooks">Custom Hooks
&lt;/h3>&lt;p>Building your own Hooks lets you extract component logic into reusable functions.&lt;/p>
&lt;p>Traditionally in React, we’ve had two popular ways to share stateful logic between components: &lt;a class="link" href="https://reactjs.org/docs/render-props.html" target="_blank" rel="noopener"
>render props&lt;/a> and &lt;a class="link" href="https://reactjs.org/docs/higher-order-components.html" target="_blank" rel="noopener"
>higher-order components&lt;/a>. We will now look at how Hooks solve many of the same problems without forcing you to add more components to the tree.&lt;/p>
&lt;p>&lt;strong>A custom Hook is a JavaScript function whose name starts with ”&lt;code>use&lt;/code>” and that may call other Hooks.&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">useState&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">useEffect&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;react&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">useFriendStatus&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">friendID&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">isOnline&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">setIsOnline&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">useState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">useEffect&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">function&lt;/span> &lt;span class="nx">handleStatusChange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">status&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">setIsOnline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">status&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">isOnline&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ChatAPI&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">subscribeToFriendStatus&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">friendID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">handleStatusChange&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ChatAPI&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">unsubscribeFromFriendStatus&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">friendID&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">handleStatusChange&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">isOnline&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">FriendStatus&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">isOnline&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">useFriendStatus&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">friend&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">isOnline&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s1">&amp;#39;Loading...&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">isOnline&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s1">&amp;#39;Online&amp;#39;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Offline&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">FriendListItem&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">isOnline&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">useFriendStatus&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">friend&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{{&lt;/span> &lt;span class="nx">color&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">isOnline&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s1">&amp;#39;green&amp;#39;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;black&amp;#39;&lt;/span> &lt;span class="p">}}&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">friend&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Unlike a React component, a custom Hook doesn’t need to have a specific signature. We can decide what it takes as arguments, and what, if anything, it should return. In other words, it’s just like a normal function.&lt;/p>
&lt;h2 id="lists">Lists
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">NumberList&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">numbers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">props&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">numbers&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">listItems&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">numbers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">number&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span> &lt;span class="na">key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">number&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">toString&lt;/span>&lt;span class="p">()}&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">number&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">ul&lt;/span>&lt;span class="p">&amp;gt;{&lt;/span>&lt;span class="nx">listItems&lt;/span>&lt;span class="p">}&amp;lt;/&lt;/span>&lt;span class="nt">ul&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">numbers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">ReactDOM&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">render&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">NumberList&lt;/span> &lt;span class="na">numbers&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">numbers&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">/&amp;gt;,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;root&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//using index
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">todoItems&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">todos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">todo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">index&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Only do this if items have no stable IDs
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span> &lt;span class="na">key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">}&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">todo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">text&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//We don’t recommend using indexes for keys if the order of items may change. This can negatively impact performance and may cause issues with component state.
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Keys help React identify which items have changed, are added, or are removed.&lt;/p>
&lt;h2 id="forms">Forms
&lt;/h2>&lt;h3 id="controlled-components">Controlled Components
&lt;/h3>&lt;p>In HTML, form elements such as &lt;code>&amp;lt;input&amp;gt;&lt;/code>, &lt;code>&amp;lt;textarea&amp;gt;&lt;/code>, and &lt;code>&amp;lt;select&amp;gt;&lt;/code> typically maintain their own state and update it based on user input. In React, mutable state is typically kept in the state property of components, and only updated with &lt;a class="link" href="https://reactjs.org/docs/react-component.html#setstate" target="_blank" rel="noopener"
>&lt;code>setState()&lt;/code>&lt;/a>.&lt;/p>
&lt;p>We can combine the two by making the React state be the “single source of truth”. Then &lt;strong>the React component that renders a form also controls what happens in that form on subsequent user input.&lt;/strong> An input form element whose value is controlled by React in this way is called a “controlled component”.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">NameForm&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Component&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">super&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">handleChange&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">handleChange&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">handleSubmit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">handleSubmit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">handleChange&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setState&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">event&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">target&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">handleSubmit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">alert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;A name was submitted: &amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">event&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">preventDefault&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">render&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">form&lt;/span> &lt;span class="na">onSubmit&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">handleSubmit&lt;/span>&lt;span class="p">}&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">label&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Name&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;text&amp;#34;&lt;/span> &lt;span class="na">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="na">onChange&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">handleChange&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">label&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;submit&amp;#34;&lt;/span> &lt;span class="na">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;Submit&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">form&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Since the &lt;code>value&lt;/code> attribute is set on our form element, the displayed value will always be &lt;code>this.state.value&lt;/code>, making the React state the source of truth. Since &lt;code>handleChange&lt;/code> runs on every keystroke to update the React state, the displayed value will update as the user types.&lt;/p>
&lt;p>It can sometimes be tedious to use controlled components, because you need to write an event handler for every way your data can change and pipe all of the input state through a React component. This can become particularly annoying when you are converting a preexisting codebase to React, or integrating a React application with a non-React library. In these situations, we can use &lt;a class="link" href="https://reactjs.org/docs/uncontrolled-components.html" target="_blank" rel="noopener"
>uncontrolled components&lt;/a>, an alternative technique for implementing input forms.&lt;/p>
&lt;h3 id="uncontrolled-components">Uncontrolled Components
&lt;/h3>&lt;p>In most cases, we recommend using &lt;a class="link" href="https://reactjs.org/docs/forms.html#controlled-components" target="_blank" rel="noopener"
>controlled components&lt;/a> to implement forms. In a controlled component, form data is handled by a React component. The alternative is uncontrolled components, where form data is handled by the DOM itself.&lt;/p>
&lt;p>To write an uncontrolled component, instead of writing an event handler for every state update, you can &lt;a class="link" href="https://reactjs.org/docs/refs-and-the-dom.html" target="_blank" rel="noopener"
>use a ref&lt;/a> to get form values from the DOM.&lt;/p>
&lt;p>In the React rendering lifecycle, the &lt;code>value&lt;/code> attribute on form elements will override the value in the DOM. With an uncontrolled component, you often want React to specify the initial value, but leave subsequent updates uncontrolled. To handle this case, you can specify a &lt;code>defaultValue&lt;/code> attribute instead of &lt;code>value&lt;/code>. Changing the value of &lt;code>defaultValue&lt;/code> attribute after a component has mounted will not cause any update of the value in the DOM.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">NameForm&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Component&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">super&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">handleSubmit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">handleSubmit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">input&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createRef&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">handleSubmit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">alert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;A name was submitted: &amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">current&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">event&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">preventDefault&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">render&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">form&lt;/span> &lt;span class="na">onSubmit&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">handleSubmit&lt;/span>&lt;span class="p">}&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">label&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Name&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">defaultValue&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;Bob&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;text&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">ref&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">input&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">label&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;submit&amp;#34;&lt;/span> &lt;span class="na">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;Submit&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">form&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="lifting-state-up">Lifting state up
&lt;/h2>&lt;p>In React, sharing state is accomplished by moving it up to the closest common ancestor of the components that need it. This is called “lifting state up”.&lt;/p>
&lt;h2 id="context">Context
&lt;/h2>&lt;p>Context provides a way to pass data through the component tree without having to pass props down manually at every level.&lt;/p>
&lt;p>Context is designed to share data that can be considered “global” for a tree of React components, such as the current authenticated user, theme, or preferred language.&lt;/p>
&lt;p>Context is primarily used when some data needs to be accessible by &lt;em>many&lt;/em> components at different nesting levels. Apply it sparingly because it makes component reuse more difficult. &lt;strong>If you only want to avoid passing some props through many levels, &lt;a class="link" href="https://reactjs.org/docs/composition-vs-inheritance.html" target="_blank" rel="noopener"
>component composition&lt;/a> is often a simpler solution than context.&lt;/strong>&lt;/p>
&lt;p>Using context, we can avoid passing props through intermediate elements:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Context lets us pass a value deep into the component tree without explicitly threading it through every component.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Create a context for the current theme (with &amp;#34;light&amp;#34; as the default).
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">ThemeContext&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;light&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">App&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Component&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">render&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Use a Provider to pass the current theme to the tree below.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// Any component can read it, no matter how deep it is.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// In this example, we&amp;#39;re passing &amp;#34;dark&amp;#34; as the current value.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">ThemeContext.Provider&lt;/span> &lt;span class="na">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;dark&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Toolbar&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">ThemeContext.Provider&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// A component in the middle doesn&amp;#39;t have to
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// pass the theme down explicitly anymore.function Toolbar() {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">ThemedButton&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">ThemedButton&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Component&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Assign a contextType to read the current theme context.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// React will find the closest theme Provider above and use its value.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// In this example, the current theme is &amp;#34;dark&amp;#34;.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">static&lt;/span> &lt;span class="nx">contextType&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ThemeContext&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">render&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Button&lt;/span> &lt;span class="na">theme&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">context&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">/&amp;gt;;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="api">API
&lt;/h3>&lt;h4 id="reactcreatecontext">&lt;code>React.createContext&lt;/code>
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">MyContext&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">defaultValue&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Creates a Context object. When React renders a component that subscribes to this Context object it will read the current context value from the closest matching &lt;code>Provider&lt;/code> above it in the tree.&lt;/p>
&lt;p>The &lt;code>defaultValue&lt;/code> argument is &lt;strong>only&lt;/strong> used when &lt;strong>a component does not have a matching Provider above it in the tree&lt;/strong>. This default value can be helpful for testing components in isolation without wrapping them. Note: passing &lt;code>undefined&lt;/code> as a Provider value does not cause consuming components to use &lt;code>defaultValue&lt;/code>.&lt;/p>
&lt;h4 id="contextprovider">&lt;code>Context.Provider&lt;/code>
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">MyContext&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Provider&lt;/span> &lt;span class="nx">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="cm">/* some value */&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Every Context object comes with a Provider React component that allows consuming components to subscribe to context changes.&lt;/p>
&lt;p>The Provider component accepts a &lt;code>value&lt;/code> prop to be passed to consuming components that are descendants of this Provider. One Provider can be connected to many consumers. Providers can be nested to &lt;strong>override values&lt;/strong> deeper within the tree.&lt;/p>
&lt;p>All consumers that are descendants of a Provider will re-render whenever the Provider’s &lt;code>value&lt;/code> prop changes. The propagation from Provider to its descendant consumers (including &lt;a class="link" href="https://reactjs.org/docs/context.html#classcontexttype" target="_blank" rel="noopener"
>&lt;code>.contextType&lt;/code>&lt;/a> and &lt;a class="link" href="https://reactjs.org/docs/hooks-reference.html#usecontext" target="_blank" rel="noopener"
>&lt;code>useContext&lt;/code>&lt;/a>) is not subject to the &lt;code>shouldComponentUpdate&lt;/code> method, so the consumer is updated even when an ancestor component skips an update.&lt;/p>
&lt;h4 id="classcontexttype">&lt;code>Class.contextType&lt;/code>
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">MyContext&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">defaultValue&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">MyClass&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Component&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">static&lt;/span> &lt;span class="nx">contextType&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">MyContext&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">render&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">context&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* render something based on the value */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>contextType&lt;/code> property on a class can be assigned a Context object created by &lt;a class="link" href="https://reactjs.org/docs/context.html#reactcreatecontext" target="_blank" rel="noopener"
>&lt;code>React.createContext()&lt;/code>&lt;/a>. Using this property lets you &lt;strong>consume the nearest current value of that Context type using &lt;code>this.context&lt;/code>&lt;/strong>. You can reference this in any of the lifecycle methods including the render function.&lt;/p>
&lt;blockquote>
&lt;p>You can only subscribe to a single context using this API. If you need to read more than one see &lt;a class="link" href="https://reactjs.org/docs/context.html#consuming-multiple-contexts" target="_blank" rel="noopener"
>Consuming Multiple Contexts&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;h4 id="contextconsumer">&lt;code>Context.Consumer&lt;/code>
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">MyContext.Consumer&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">value&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="cm">/* render something based on the context value */&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">MyContext.Consumer&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A React component that subscribes to context changes. Using this component lets you subscribe to a context within a &lt;strong>function component&lt;/strong>.&lt;/p>
&lt;p>&lt;strong>Requires a function as a child&lt;/strong>. The function receives the current context value and returns a React node. The value argument passed to the function will be equal to the value prop of the closest Provider for this context above in the tree. If there is no Provider for this context above, the value argument will be equal to the defaultValue that was passed to createContext().&lt;/p>
&lt;h4 id="contextdisplayname">&lt;code>Context.displayName&lt;/code>
&lt;/h4>&lt;p>Context object accepts a displayName string property. React DevTools uses this string to determine what to display for the context.&lt;/p>
&lt;p>For example, the following component will appear as MyDisplayName in the DevTools:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">MyContext&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="cm">/* some value */&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">MyContext&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">displayName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;MyDisplayName&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">MyContext&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Provider&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="c1">// &amp;#34;MyDisplayName.Provider&amp;#34; in DevTools
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">MyContext&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Consumer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="c1">// &amp;#34;MyDisplayName.Consumer&amp;#34; in DevTools
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="error-boundaries">Error Boundaries
&lt;/h2>&lt;p>A JavaScript error in a part of the UI shouldn’t break the whole app. To solve this problem for React users, React 16 introduces a new concept of an “error boundary”.&lt;/p>
&lt;p>Error boundaries are React components that &lt;strong>catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI&lt;/strong> instead of the component tree that crashed. Error boundaries catch errors &lt;strong>during rendering, in lifecycle methods, and in constructors of the whole tree below them&lt;/strong>.&lt;/p>
&lt;blockquote>
&lt;p>Error boundaries do &lt;strong>not&lt;/strong> catch errors for:&lt;/p>
&lt;ul>
&lt;li>Event handlers&lt;/li>
&lt;/ul>
&lt;p>React doesn’t need error boundaries to recover from errors in event handlers. Unlike the render method and lifecycle methods, the event handlers don’t happen during rendering. So if they throw, React still knows what to display on the screen. If you need to catch an error inside an event handler, use the regular JavaScript &lt;code>try&lt;/code> / &lt;code>catch&lt;/code> statement&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Asynchronous code (e.g. &lt;code>setTimeout&lt;/code> or &lt;code>requestAnimationFrame&lt;/code> callbacks)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Server side rendering&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Errors thrown in the error boundary itself (rather than its children)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>A class component becomes an error boundary if it defines either (or both) of the lifecycle methods static &lt;code>getDerivedStateFromError()&lt;/code> or &lt;code>componentDidCatch()&lt;/code>. Use static &lt;code>getDerivedStateFromError() &lt;/code>to render a fallback UI after an error has been thrown. Use &lt;code>componentDidCatch() &lt;/code>to log error information.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">ErrorBoundary&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Component&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">super&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">hasError&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">false&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">static&lt;/span> &lt;span class="nx">getDerivedStateFromError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Update state so the next render will show the fallback UI.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">hasError&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">componentDidCatch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">errorInfo&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// You can also log the error to an error reporting service
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">logErrorToMyService&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">error&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">errorInfo&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">render&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">hasError&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// You can render any custom fallback UI
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">Something&lt;/span> &lt;span class="nx">went&lt;/span> &lt;span class="nx">wrong&lt;/span>&lt;span class="p">.&amp;lt;/&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">children&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">ErrorBoundary&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">MyWidget&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">ErrorBoundary&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Error boundaries work like a JavaScript &lt;code>catch {}&lt;/code> block, but for components. &lt;strong>Only class components&lt;/strong> can be error boundaries. In practice, most of the time you’ll want to declare an error boundary component once and use it throughout your application.&lt;/p>
&lt;p>Note that &lt;strong>error boundaries only catch errors in the components below them in the tree&lt;/strong>. An error boundary can’t catch an error within itself. If an error boundary fails trying to render the error message, the error will propagate to the closest error boundary above it.&lt;/p>
&lt;p>&lt;strong>As of React 16, errors that were not caught by any error boundary will result in unmounting of the whole React component tree.&lt;/strong>&lt;/p>
&lt;h2 id="ref">Ref
&lt;/h2>&lt;p>Refs provide a way to &lt;strong>access DOM nodes or React elements&lt;/strong> created in the render method.&lt;/p>
&lt;p>In the typical React dataflow, &lt;strong>props&lt;/strong> are the only way that parent components interact with their children. To modify a child, you re-render it with new props. However, there are a few cases where you need to imperatively &lt;strong>modify a child outside of the typical dataflow&lt;/strong>.&lt;/p>
&lt;p>There are a few good use cases for refs:&lt;/p>
&lt;ul>
&lt;li>Managing focus, text selection, or media playback.&lt;/li>
&lt;li>Triggering imperative animations.&lt;/li>
&lt;li>Integrating with third-party DOM libraries.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Avoid using refs for anything that can be done declaratively！&lt;/p>
&lt;/blockquote>
&lt;h3 id="create">Create
&lt;/h3>&lt;p>Refs are created using &lt;code>React.createRef()&lt;/code> and attached to React elements via the &lt;code>ref&lt;/code> attribute. Refs are commonly assigned to an instance property when a component is constructed so they can be referenced throughout the component.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">MyComponent&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Component&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">super&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">myRef&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createRef&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">render&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">div&lt;/span> &lt;span class="nx">ref&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">myRef&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="o">/&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>By default, &lt;strong>you may not use the &lt;code>ref&lt;/code> attribute on function components&lt;/strong> because they don’t have instances:&lt;/p>
&lt;p>If you want to allow people to take a &lt;code>ref&lt;/code> to your function component, you can&lt;/p>
&lt;ul>
&lt;li>use &lt;a class="link" href="https://reactjs.org/docs/forwarding-refs.html" target="_blank" rel="noopener"
>&lt;code>forwardRef&lt;/code>&lt;/a> (possibly in conjunction with &lt;a class="link" href="https://reactjs.org/docs/hooks-reference.html#useimperativehandle" target="_blank" rel="noopener"
>&lt;code>useImperativeHandle&lt;/code>&lt;/a>),&lt;/li>
&lt;li>or convert the component to a class.&lt;/li>
&lt;/ul>
&lt;p>You can, however, &lt;strong>use the &lt;code>ref&lt;/code> attribute inside a function component&lt;/strong> as long as you refer to a DOM element or a class component&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">CustomTextInput&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// textInput must be declared here so the ref can refer to it
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">textInput&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">useRef&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">function&lt;/span> &lt;span class="nx">handleClick&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">textInput&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">current&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">focus&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;text&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">ref&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">textInput&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;button&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;Focus the text input&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">onClick&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">handleClick&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="access">Access
&lt;/h3>&lt;p>The value of the ref differs depending on the type of the node:&lt;/p>
&lt;ul>
&lt;li>When the &lt;code>ref&lt;/code> attribute is used on an HTML element, the &lt;code>ref&lt;/code> created in the constructor with &lt;code>React.createRef()&lt;/code> receives the underlying DOM element as its &lt;code>current&lt;/code> property.&lt;/li>
&lt;li>When the &lt;code>ref&lt;/code> attribute is used on a custom class component, the &lt;code>ref&lt;/code> object receives the mounted instance of the component as its &lt;code>current&lt;/code>.&lt;/li>
&lt;li>&lt;strong>You may not use the &lt;code>ref&lt;/code> attribute on function components&lt;/strong> because they don’t have instances.&lt;/li>
&lt;/ul>
&lt;h3 id="ref-forwarding">Ref forwarding
&lt;/h3>&lt;p>Ref forwarding is a technique for automatically passing a &lt;a class="link" href="https://reactjs.org/docs/refs-and-the-dom.html" target="_blank" rel="noopener"
>ref&lt;/a> through a component to one of its children. &lt;strong>Ref forwarding lets components opt into exposing any child component’s ref as their own&lt;/strong>.&lt;/p>
&lt;p>&lt;strong>Ref forwarding is an opt-in feature that lets some components take a &lt;code>ref&lt;/code> they receive, and pass it further down (in other words, “forward” it) to a child.&lt;/strong>&lt;/p>
&lt;p>In the example below, &lt;code>FancyButton&lt;/code> uses &lt;code>React.forwardRef&lt;/code> to obtain the &lt;code>ref&lt;/code> passed to it, and then forward it to the DOM &lt;code>button&lt;/code> that it renders:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">FancyButton&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">forwardRef&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ref&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">button&lt;/span> &lt;span class="na">ref&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">ref&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="na">className&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;FancyButton&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">children&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">button&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// You can now get a ref directly to the DOM button:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">ref&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createRef&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">FancyButton&lt;/span> &lt;span class="na">ref&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">ref&lt;/span>&lt;span class="p">}&amp;gt;&lt;/span>&lt;span class="nx">Click&lt;/span> &lt;span class="nx">me&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">FancyButton&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This way, components using &lt;code>FancyButton&lt;/code> can get a ref to the underlying &lt;code>button&lt;/code> DOM node and access it if necessary—just like if they used a DOM &lt;code>button&lt;/code> directly.&lt;/p>
&lt;blockquote>
&lt;p>Note: The second &lt;code>ref&lt;/code> argument only exists when you define a component with &lt;code>React.forwardRef&lt;/code> call. Regular function or class components don’t receive the &lt;code>ref&lt;/code> argument, and ref is not available in props either.&lt;/p>
&lt;/blockquote>
&lt;p>Ref forwarding is not limited to DOM components. You can forward refs to class component instances, too.&lt;/p>
&lt;h3 id="callback-refs">Callback Refs
&lt;/h3>&lt;p>React also supports another way to set refs called “callback refs”, which gives more fine-grain control over when refs are set and unset.&lt;/p>
&lt;p>Instead of passing a &lt;code>ref&lt;/code> attribute created by &lt;code>createRef()&lt;/code>, you pass a function. The function receives the React component instance or HTML DOM element as its argument, which can be stored and accessed elsewhere.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">CustomTextInput&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Component&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">super&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">textInput&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setTextInputRef&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">element&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">textInput&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">element&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">focusTextInput&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Focus the text input using the raw DOM API
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">textInput&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">textInput&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">focus&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">componentDidMount&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// autofocus the input on mount
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">focusTextInput&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">render&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Use the `ref` callback to store a reference to the text input DOM
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// element in an instance field (for example, this.textInput).
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;text&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">ref&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setTextInputRef&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;button&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;Focus the text input&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">onClick&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">focusTextInput&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>React will call the &lt;code>ref&lt;/code> callback with the DOM element when the component mounts, and call it with &lt;code>null&lt;/code> when it unmounts. Refs are guaranteed to be up-to-date before &lt;code>componentDidMount&lt;/code> or &lt;code>componentDidUpdate&lt;/code> fires.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>NOTE&lt;/strong>: If the &lt;code>ref&lt;/code> callback is defined as an inline function, it will &lt;strong>get called twice during updates&lt;/strong>, first with &lt;code>null&lt;/code> and then again with the DOM element. This is because a new instance of the function is created with each render, so React needs to clear the old ref and set up the new one. You can avoid this by defining the &lt;code>ref&lt;/code> callback as a bound method on the class, but note that it shouldn’t matter in most cases.&lt;/p>
&lt;/blockquote>
&lt;p>You can pass callback refs between components like you can with object refs that were created with &lt;code>React.createRef()&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">CustomTextInput&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="na">ref&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">inputRef&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">Parent&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Component&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">render&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">CustomTextInput&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">inputRef&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">el&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">inputElement&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">el&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the example above, &lt;code>Parent&lt;/code> passes its ref callback as an &lt;code>inputRef&lt;/code> prop to the &lt;code>CustomTextInput&lt;/code>, and the &lt;code>CustomTextInput&lt;/code> passes the same function as a special &lt;code>ref&lt;/code> attribute to the &lt;code>&amp;lt;input&amp;gt;&lt;/code>. As a result, &lt;code>this.inputElement&lt;/code> in &lt;code>Parent&lt;/code> will be set to the DOM node corresponding to the &lt;code>&amp;lt;input&amp;gt;&lt;/code> element in the &lt;code>CustomTextInput&lt;/code>.&lt;/p>
&lt;h3 id="legacy-api-string-refs">Legacy API: String Refs
&lt;/h3>&lt;p>If you worked with React before, you might be familiar with an older API where the &lt;code>ref&lt;/code> attribute is a &lt;strong>string&lt;/strong>, like &lt;code>&amp;quot;textInput&amp;quot;&lt;/code>, and the DOM node is accessed as &lt;code>this.refs.textInput&lt;/code>. We advise against it because string refs have &lt;a class="link" href="https://github.com/facebook/react/pull/8333#issuecomment-271648615" target="_blank" rel="noopener"
>some issues&lt;/a>, are considered legacy, and &lt;strong>are likely to be removed in one of the future releases&lt;/strong>.&lt;/p>
&lt;h2 id="fragment">Fragment
&lt;/h2>&lt;p>Fragment is a common pattern in React is for a component to return multiple elements. Fragments let you group a list of children without adding extra nodes to the DOM.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">render&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">React.Fragment&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">ChildA&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">ChildB&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">ChildC&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">React.Fragment&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>short syntax&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">Columns&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Component&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">render&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">td&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">Hello&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">td&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">td&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">World&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">td&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can use &lt;code>&amp;lt;&amp;gt;&amp;lt;/&amp;gt;&lt;/code> the same way you’d use any other element except that it doesn’t support keys or attributes.&lt;/p>
&lt;h3 id="keyed-fragments">Keyed Fragments
&lt;/h3>&lt;p>Fragments declared with the explicit &lt;code>&amp;lt;React.Fragment&amp;gt;&lt;/code> syntax may have keys. A use case for this is mapping a collection to an array of fragments — for example, to create a description list:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">Glossary&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">dl&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">items&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">item&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Without the `key`, React will fire a key warning
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">React.Fragment&lt;/span> &lt;span class="na">key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">}&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">dt&lt;/span>&lt;span class="p">&amp;gt;{&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">term&lt;/span>&lt;span class="p">}&amp;lt;/&lt;/span>&lt;span class="nt">dt&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">dd&lt;/span>&lt;span class="p">&amp;gt;{&lt;/span>&lt;span class="nx">item&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">description&lt;/span>&lt;span class="p">}&amp;lt;/&lt;/span>&lt;span class="nt">dd&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">React.Fragment&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">))}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">dl&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>key&lt;/code> is the only attribute that can be passed to &lt;code>Fragment&lt;/code>.&lt;/p>
&lt;h2 id="high-order-components">High-Order Components
&lt;/h2>&lt;p>A higher-order component (HOC) is an advanced technique in React for reusing component logic. HOCs are not part of the React API, per se. They are a pattern that emerges from React’s compositional nature.&lt;/p>
&lt;p>Concretely, &lt;strong>a higher-order component is a function that takes a component and returns a new component.&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">EnhancedComponent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">higherOrderComponent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">WrappedComponent&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>HOCs are common in third-party React libraries, such as Redux’s &lt;a class="link" href="https://github.com/reduxjs/react-redux/blob/master/docs/api/connect.md#connect" target="_blank" rel="noopener"
>&lt;code>connect&lt;/code>&lt;/a> and Relay’s &lt;a class="link" href="https://relay.dev/docs/v10.1.3/fragment-container/#createfragmentcontainer" target="_blank" rel="noopener"
>&lt;code>createFragmentContainer&lt;/code>&lt;/a>.&lt;/p>
&lt;p>For example we can imagine that in a large app, the same pattern of subscribing to &lt;code>DataSource&lt;/code> and calling &lt;code>setState&lt;/code> will occur over and over again. We want an abstraction that allows us to define this logic in a single place and share it across many components. This is where higher-order components excel.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// This function takes a component...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">withSubscription&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">WrappedComponent&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">selectData&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...and returns another component...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kr">class&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Component&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">super&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">handleChange&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">handleChange&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">data&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">selectData&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">DataSource&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">props&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">componentDidMount&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ... that takes care of the subscription...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">DataSource&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addChangeListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">handleChange&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">componentWillUnmount&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">DataSource&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">removeChangeListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">handleChange&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">handleChange&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setState&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">data&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">selectData&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">DataSource&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">render&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ... and renders the wrapped component with the fresh data!
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// Notice that we pass through any additional props
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">WrappedComponent&lt;/span> &lt;span class="na">data&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">data&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="na">...this.props&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">/&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">CommentListWithSubscription&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">withSubscription&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">CommentList&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nx">DataSource&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">DataSource&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getComments&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">BlogPostWithSubscription&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">withSubscription&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">BlogPost&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nx">DataSource&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">props&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">DataSource&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getBlogPost&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The first parameter is the wrapped component. The second parameter retrieves the data we’re interested in, given a &lt;code>DataSource&lt;/code> and the current props.&lt;/p>
&lt;p>When &lt;code>CommentListWithSubscription&lt;/code> and &lt;code>BlogPostWithSubscription&lt;/code> are rendered, &lt;code>CommentList&lt;/code> and &lt;code>BlogPost&lt;/code> will be passed a &lt;code>data&lt;/code> prop with the most current data retrieved from &lt;code>DataSource&lt;/code>:&lt;/p>
&lt;p>Note that a HOC &lt;strong>doesn’t modify&lt;/strong> the input component, &lt;strong>nor does it use inheritance&lt;/strong> to copy its behavior. Rather, a HOC &lt;strong>&lt;em>composes&lt;/em> the original component by &lt;em>wrapping&lt;/em> it in a container component&lt;/strong>. A HOC is a &lt;strong>pure function&lt;/strong> with zero side-effects.&lt;/p>
&lt;p>And that’s it! The wrapped component receives all the props of the container, along with a new prop, &lt;code>data&lt;/code>, which it uses to render its output. The HOC isn’t concerned with how or why the data is used, and the wrapped component isn’t concerned with where the data came from.&lt;/p>
&lt;h3 id="caveat">Caveat
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>Don’t Use HOCs Inside the render Method&lt;/p>
&lt;p>Instead, apply HOCs outside the component definition so that the resulting component is created only once. Then, its identity will be consistent across renders. This is usually what you want, anyway.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Static Methods Must Be Copied Over&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">enhance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">WrappedComponent&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">class&lt;/span> &lt;span class="nx">Enhance&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Component&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="cm">/*...*/&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Must know exactly which method(s) to copy :(
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">Enhance&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">staticMethod&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">WrappedComponent&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">staticMethod&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">Enhance&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//or
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">import&lt;/span> &lt;span class="nx">hoistNonReactStatic&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;hoist-non-react-statics&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">enhance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">WrappedComponent&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">class&lt;/span> &lt;span class="nx">Enhance&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Component&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="cm">/*...*/&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">hoistNonReactStatic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Enhance&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">WrappedComponent&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">Enhance&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Refs Aren’t Passed Through&lt;/p>
&lt;p>While the convention for higher-order components is to pass through all props to the wrapped component, this does not work for &lt;strong>refs&lt;/strong>. That’s because &lt;code>ref&lt;/code> is not really a prop — like &lt;code>key&lt;/code>, it’s &lt;strong>handled specially&lt;/strong> by React. If you add a ref to an element whose component is the result of a HOC, the ref refers to an instance of the &lt;strong>outermost container component&lt;/strong>, not the wrapped component.&lt;/p>
&lt;p>Fortunately, we can explicitly forward refs to the inner &lt;code>FancyButton&lt;/code> component using the &lt;code>React.forwardRef&lt;/code> API.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">logProps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Component&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">class&lt;/span> &lt;span class="nx">LogProps&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Component&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">componentDidUpdate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">prevProps&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;old props:&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">prevProps&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;new props:&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">render&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">forwardedRef&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">...&lt;/span>&lt;span class="nx">rest&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Assign the custom prop &amp;#34;forwardedRef&amp;#34; as a ref
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">Component&lt;/span> &lt;span class="nx">ref&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">forwardedRef&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">{...&lt;/span>&lt;span class="nx">rest&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="o">/&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Note the second param &amp;#34;ref&amp;#34; provided by React.forwardRef.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// We can pass it along to LogProps as a regular prop, e.g. &amp;#34;forwardedRef&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// And it can then be attached to the Component.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">forwardRef&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ref&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">LogProps&lt;/span> &lt;span class="p">{...&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="nx">forwardedRef&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">ref&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="o">/&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="render-props">Render Props
&lt;/h2>&lt;p>&lt;strong>A render prop is a function prop that a component uses to know what to render.&lt;/strong>&lt;/p>
&lt;p>This technique makes the behavior that we need to share extremely portable. To get that behavior, render a &lt;code>&amp;lt;Mouse&amp;gt;&lt;/code> with a &lt;code>render&lt;/code> prop that tells it what to render with the current (x, y) of the cursor.&lt;/p>
&lt;p>One interesting thing to note about render props is that you can implement most &lt;a class="link" href="https://reactjs.org/docs/higher-order-components.html" target="_blank" rel="noopener"
>higher-order components&lt;/a> (HOC) using a regular component with a render prop.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">Cat&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Component&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">render&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">mouse&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mouse&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">img&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;/cat.jpg&amp;#34;&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{{&lt;/span> &lt;span class="nx">position&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;absolute&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">left&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">mouse&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">top&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">mouse&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">y&lt;/span> &lt;span class="p">}}&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">Mouse&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Component&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">super&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">handleMouseMove&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">handleMouseMove&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bind&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">x&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">y&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">handleMouseMove&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setState&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">x&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">event&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">clientX&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">y&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">event&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">clientY&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">render&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{{&lt;/span> &lt;span class="nx">height&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;100vh&amp;#39;&lt;/span> &lt;span class="p">}}&lt;/span> &lt;span class="na">onMouseMove&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">handleMouseMove&lt;/span>&lt;span class="p">}&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> Instead of providing a static representation of what &amp;lt;Mouse&amp;gt; renders,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> use the `render` prop to dynamically determine what to render.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">render&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">)}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">MouseTracker&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Component&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">render&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">Move&lt;/span> &lt;span class="nx">the&lt;/span> &lt;span class="nx">mouse&lt;/span> &lt;span class="nx">around&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Mouse&lt;/span> &lt;span class="na">render&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">mouse&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Cat&lt;/span> &lt;span class="na">mouse&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">mouse&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)}/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It’s important to remember that just because the pattern is called “render props” you don’t have to use a prop named render to use this pattern. In fact, &lt;strong>any prop that is a function that a component uses to know what to render is technically a “render prop”&lt;/strong>.&lt;/p>
&lt;h2 id="strict-mode">Strict Mode
&lt;/h2>&lt;p>&lt;code>StrictMode&lt;/code> is a tool for highlighting potential problems in an application. Like &lt;code>Fragment&lt;/code>, &lt;code>StrictMode&lt;/code> does not render any visible UI. It activates additional checks and warnings for its descendants.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note&lt;/strong>: Strict mode checks are run in development mode only; &lt;em>they do not impact the production build&lt;/em>.&lt;/p>
&lt;/blockquote>
&lt;p>You can enable strict mode for any part of your application.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="nx">React&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;react&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">ExampleApplication&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Header&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">React.StrictMode&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">ComponentOne&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">ComponentTwo&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">React.StrictMode&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Footer&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>StrictMode&lt;/code> currently helps with:&lt;/p>
&lt;ul>
&lt;li>Identifying components with &lt;strong>unsafe lifecycles&lt;/strong>&lt;/li>
&lt;li>Warning about &lt;strong>legacy string ref API usage&lt;/strong>&lt;/li>
&lt;li>Warning about &lt;strong>deprecated findDOMNode usage&lt;/strong>&lt;/li>
&lt;li>Detecting &lt;strong>unexpected side effects&lt;/strong>&lt;/li>
&lt;li>Detecting &lt;strong>legacy context API&lt;/strong>&lt;/li>
&lt;li>Detecting &lt;strong>unsafe effects&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="proptypes">PropTypes
&lt;/h2>&lt;p>As your app grows, you can catch a lot of bugs with typechecking. For some applications, you can use JavaScript extensions like &lt;a class="link" href="https://flow.org/" target="_blank" rel="noopener"
>Flow&lt;/a> or &lt;a class="link" href="https://www.typescriptlang.org/" target="_blank" rel="noopener"
>TypeScript&lt;/a> to typecheck your whole application. But even if you don’t use those, React has some &lt;strong>built-in typechecking abilities&lt;/strong>. To run typechecking on the props for a component, you can assign the special &lt;code>propTypes&lt;/code> property:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="nx">PropTypes&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;prop-types&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">Greeting&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Component&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">render&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">Hello&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">}&amp;lt;/&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">Greeting&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">propTypes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">PropTypes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;strong>Note&lt;/strong> : &lt;code>React.PropTypes&lt;/code> has moved into a different package since React v15.5. Please use &lt;a class="link" href="https://www.npmjs.com/package/prop-types" target="_blank" rel="noopener"
>the &lt;code>prop-types&lt;/code> library instead&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;p>When an invalid value is provided for a prop, a warning will be shown in the JavaScript console. For performance reasons, &lt;code>propTypes&lt;/code> is only checked in development mode.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="nx">PropTypes&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;prop-types&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">MyComponent&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">propTypes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// You can declare that a prop is a specific JS type. By default, these
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// are all optional.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">optionalArray&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">PropTypes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">array&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">optionalBool&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">PropTypes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bool&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">optionalFunc&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">PropTypes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">func&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">optionalNumber&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">PropTypes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">number&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">optionalObject&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">PropTypes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">object&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">optionalString&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">PropTypes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">string&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">optionalSymbol&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">PropTypes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">symbol&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Anything that can be rendered: numbers, strings, elements or an array
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// (or fragment) containing these types.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">optionalNode&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">PropTypes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">node&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// A React element.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">optionalElement&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">PropTypes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">element&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// A React element type (ie. MyComponent).
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">optionalElementType&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">PropTypes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">elementType&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// You can also declare that a prop is an instance of a class. This uses
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// JS&amp;#39;s instanceof operator.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">optionalMessage&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">PropTypes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">instanceOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Message&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// You can ensure that your prop is limited to specific values by treating
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// it as an enum.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">optionalEnum&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">PropTypes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">oneOf&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="s1">&amp;#39;News&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Photos&amp;#39;&lt;/span>&lt;span class="p">]),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// An object that could be one of many types
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">optionalUnion&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">PropTypes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">oneOfType&lt;/span>&lt;span class="p">([&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">PropTypes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">string&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">PropTypes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">number&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">PropTypes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">instanceOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Message&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// An array of a certain type
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">optionalArrayOf&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">PropTypes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">arrayOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">PropTypes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">number&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// An object with property values of a certain type
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">optionalObjectOf&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">PropTypes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">objectOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">PropTypes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">number&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// An object taking on a particular shape
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">optionalObjectWithShape&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">PropTypes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">shape&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">color&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">PropTypes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">string&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fontSize&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">PropTypes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">number&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// An object with warnings on extra properties
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">optionalObjectWithStrictShape&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">PropTypes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">exact&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">PropTypes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">string&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">quantity&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">PropTypes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">number&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// You can chain any of the above with `isRequired` to make sure a warning
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// is shown if the prop isn&amp;#39;t provided.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">requiredFunc&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">PropTypes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">func&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">isRequired&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// A required value of any data type
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">requiredAny&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">PropTypes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">any&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">isRequired&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// You can also specify a custom validator. It should return an Error
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// object if the validation fails. Don&amp;#39;t `console.warn` or throw, as this
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// won&amp;#39;t work inside `oneOfType`.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">customProp&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">propName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">componentName&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="sr">/matchme/&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">propName&lt;/span>&lt;span class="p">]))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Error&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;Invalid prop `&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">propName&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39;` supplied to&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39; `&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">componentName&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39;`. Validation failed.&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// You can also supply a custom validator to `arrayOf` and `objectOf`.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// It should return an Error object if the validation fails. The validator
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// will be called for each key in the array or object. The first two
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// arguments of the validator are the array or object itself, and the
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// current item&amp;#39;s key.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">customArrayProp&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">PropTypes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">arrayOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">propValue&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">componentName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">location&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">propFullName&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="sr">/matchme/&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">propValue&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">key&lt;/span>&lt;span class="p">]))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Error&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;Invalid prop `&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">propFullName&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39;` supplied to&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39; `&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">componentName&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39;`. Validation failed.&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="single-child">Single Child
&lt;/h3>&lt;p>With &lt;code>PropTypes.element&lt;/code> you can specify that only a single child can be passed to a component as children.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="nx">PropTypes&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;prop-types&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">MyComponent&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Component&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">render&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// This must be exactly one element or it will warn.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">children&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">children&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">children&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">MyComponent&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">propTypes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">children&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">PropTypes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">element&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">isRequired&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="default-prop-values">Default Prop Values
&lt;/h3>&lt;p>You can define default values for your &lt;code>props&lt;/code> by assigning to the special &lt;code>defaultProps&lt;/code> property:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">Greeting&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Component&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">render&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">Hello&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">}&amp;lt;/&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Specifies the default values for props:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">Greeting&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">defaultProps&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Stranger&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Renders &amp;#34;Hello, Stranger&amp;#34;:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">root&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ReactDOM&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createRoot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;example&amp;#39;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">root&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">render&lt;/span>&lt;span class="p">(&amp;lt;&lt;/span>&lt;span class="nt">Greeting&lt;/span> &lt;span class="p">/&amp;gt;);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//or
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">class&lt;/span> &lt;span class="nx">Greeting&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Component&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">static&lt;/span> &lt;span class="nx">defaultProps&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;stranger&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">render&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">Hello&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">}&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>defaultProps&lt;/code> will be used to ensure that &lt;code>this.props.name&lt;/code> will have a value if it was not specified by the parent component. The &lt;code>propTypes&lt;/code> typechecking happens after &lt;code>defaultProps&lt;/code> are resolved, so typechecking will also apply to the &lt;code>defaultProps&lt;/code>.&lt;/p>
&lt;h3 id="function-components">Function Components
&lt;/h3>&lt;p>If you are using function components in your regular development, you may want to make some small changes to allow PropTypes to be properly applied.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="nx">PropTypes&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;prop-types&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">HelloWorldComponent&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">name&lt;/span> &lt;span class="p">})&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">Hello&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">}&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">HelloWorldComponent&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">propTypes&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">PropTypes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="nx">HelloWorldComponent&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="portals">Portals
&lt;/h2>&lt;p>Portals provide a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">ReactDOM&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">createPortal&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">child&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">container&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The first argument (child) is any renderable React child, such as an element, string, or fragment. The second argument (container) is a DOM element.&lt;/p>
&lt;p>Normally, when you return an element from a component’s render method, it’s mounted into the DOM as a child of the nearest parent node. However, sometimes it’s useful to insert a child into a different location in the DOM. A typical use case for portals is when a parent component has an &lt;code>overflow: hidden&lt;/code> or &lt;code>z-index&lt;/code> style, but you need the child to visually “break out” of its container.&lt;/p>
&lt;p>Even though a portal can be anywhere in the DOM tree, it behaves like a normal React child in &lt;strong>every other way&lt;/strong>. Features like context work exactly the same regardless of whether the child is a portal, as the portal &lt;strong>still exists in the &lt;em>React tree&lt;/em>&lt;/strong> regardless of position in the &lt;em>DOM tree&lt;/em>.&lt;/p>
&lt;p>This includes event bubbling. An event fired from inside a portal will &lt;strong>propagate to ancestors in the containing &lt;em>React tree&lt;/em>&lt;/strong>, even if those elements are not ancestors in the &lt;em>DOM tree&lt;/em>.&lt;/p>
&lt;p>Catching an event bubbling up from a portal in a parent component allows the development of more flexible abstractions that are not inherently reliant on portals.&lt;/p>
&lt;h2 id="profiler">Profiler
&lt;/h2>&lt;p>The Profiler measures &lt;strong>how often&lt;/strong> a React application &lt;strong>renders&lt;/strong> and &lt;strong>what the “cost”&lt;/strong> of rendering is. Its purpose is to help identify parts of an application that are slow and may benefit from optimizations such as memoization.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note&lt;/strong>: Profiling adds some additional overhead, so &lt;strong>it is disabled in &lt;a class="link" href="https://reactjs.org/docs/optimizing-performance.html#use-the-production-build" target="_blank" rel="noopener"
>the production build&lt;/a>&lt;/strong>.&lt;/p>
&lt;/blockquote>
&lt;p>A &lt;code>Profiler&lt;/code> can be added anywhere in a React tree to measure the cost of rendering that part of the tree. It requires two props: an &lt;code>id&lt;/code> (string) and an &lt;code>onRender&lt;/code> callback (function) which React calls any time a component within the tree “commits” an update. It receives parameters describing what was rendered and how long it took.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">unction&lt;/span> &lt;span class="nx">onRenderCallback&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// the &amp;#34;id&amp;#34; prop of the Profiler tree that has just committed
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">phase&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// either &amp;#34;mount&amp;#34; (if the tree just mounted) or &amp;#34;update&amp;#34; (if it re-rendered)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">actualDuration&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// time spent rendering the committed update
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">baseDuration&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// estimated time to render the entire subtree without memoization
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">startTime&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// when React began rendering this update
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">commitTime&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// when React committed this update
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">interactions&lt;/span> &lt;span class="c1">// the Set of interactions belonging to this update
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Aggregate or log render timings...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;strong>&lt;code>id: string&lt;/code>&lt;/strong> - The &lt;code>id&lt;/code> prop of the &lt;code>Profiler&lt;/code> tree that has just committed. This can be used to identify which part of the tree was committed if you are using multiple profilers.&lt;/li>
&lt;li>&lt;strong>&lt;code>phase: &amp;quot;mount&amp;quot; | &amp;quot;update&amp;quot;&lt;/code>&lt;/strong> - Identifies whether the tree has just been mounted for the first time or re-rendered due to a change in props, state, or hooks.&lt;/li>
&lt;li>&lt;strong>&lt;code>actualDuration: number&lt;/code>&lt;/strong> - Time spent rendering the &lt;code>Profiler&lt;/code> and its descendants for the current update. This indicates how well the subtree makes use of memoization (e.g. &lt;a class="link" href="https://reactjs.org/docs/react-api.html#reactmemo" target="_blank" rel="noopener"
>&lt;code>React.memo&lt;/code>&lt;/a>, &lt;a class="link" href="https://reactjs.org/docs/hooks-reference.html#usememo" target="_blank" rel="noopener"
>&lt;code>useMemo&lt;/code>&lt;/a>, &lt;a class="link" href="https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-shouldcomponentupdate" target="_blank" rel="noopener"
>&lt;code>shouldComponentUpdate&lt;/code>&lt;/a>). Ideally this value should decrease significantly after the initial mount as many of the descendants will only need to re-render if their specific props change.&lt;/li>
&lt;li>&lt;strong>&lt;code>baseDuration: number&lt;/code>&lt;/strong> - Duration of the most recent &lt;code>render&lt;/code> time for each individual component within the &lt;code>Profiler&lt;/code> tree. This value estimates a worst-case cost of rendering (e.g. the initial mount or a tree with no memoization).&lt;/li>
&lt;li>&lt;strong>&lt;code>startTime: number&lt;/code>&lt;/strong> - Timestamp when React began rendering the current update.&lt;/li>
&lt;li>&lt;strong>&lt;code>commitTime: number&lt;/code>&lt;/strong> - Timestamp when React committed the current update. This value is shared between all profilers in a commit, enabling them to be grouped if desirable.&lt;/li>
&lt;li>&lt;strong>&lt;code>interactions: Set&lt;/code>&lt;/strong> - Set of &lt;a class="link" href="https://fb.me/react-interaction-tracing" target="_blank" rel="noopener"
>“interactions”&lt;/a> that were being traced when the update was scheduled (e.g. when &lt;code>render&lt;/code> or &lt;code>setState&lt;/code> were called).&lt;/li>
&lt;/ul>
&lt;h2 id="web-components">Web Components
&lt;/h2>&lt;p>to be continued&lt;/p>
&lt;h2 id="optimizing-performance">Optimizing Performance
&lt;/h2>&lt;p>to be continued&lt;/p></description></item><item><title>【TS】Basics</title><link>https://dyhes.github.io/p/tsbasics/</link><pubDate>Sat, 01 May 2021 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/tsbasics/</guid><description>&lt;h2 id="introduction">Introduction
&lt;/h2>&lt;p>TypeScript is Typed JavaScript. TypeScript adds types to JavaScript to help you speed up the development by catching errors before you even run the JavaScript code.&lt;/p>
&lt;p>TypeScript is a super set of JavaScript.&lt;/p>
&lt;p>&lt;img src="https://www.typescripttutorial.net/wp-content/uploads/2020/05/what-is-typescript-typescript-and-js.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>There are two main reasons to use TypeScript:&lt;/p>
&lt;ul>
&lt;li>TypeScript &lt;strong>adds a type system&lt;/strong> to help you avoid many problems with dynamic types in JavaScript.&lt;/li>
&lt;li>TypeScript &lt;strong>implements the future features&lt;/strong> of JavaScript a.k.a &lt;a class="link" href="https://www.javascripttutorial.net/es-next/" target="_blank" rel="noopener"
>ES Next&lt;/a> so that you can use them today.&lt;/li>
&lt;/ul>
&lt;h2 id="type">Type
&lt;/h2>&lt;p>In TypeScript, a type is a convenient way to refer to the different &lt;strong>properties&lt;/strong> and &lt;strong>functions&lt;/strong> that a &lt;strong>value&lt;/strong> has.&lt;/p>
&lt;p>A value is anything that you can assign to a variable e.g., a number, a string, an array, an object, and a function.&lt;/p>
&lt;p>In TypeScript:&lt;/p>
&lt;ul>
&lt;li>a type is a label that describes the different properties and method that a value has&lt;/li>
&lt;li>every value has a type.&lt;/li>
&lt;/ul>
&lt;p>TypeScript inherits the built-in types from JavaScript. TypeScript types is categorized into:&lt;/p>
&lt;ul>
&lt;li>Primitive types&lt;/li>
&lt;/ul>
&lt;p>The following illustrates the primitive types in TypeScript:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>Name&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Description&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>string&lt;/code>&lt;/td>
&lt;td>represents text data&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>number&lt;/code>&lt;/td>
&lt;td>represents numeric values&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>boolean&lt;/code>&lt;/td>
&lt;td>has true and false values&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>null&lt;/code>&lt;/td>
&lt;td>has one value: null&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>undefined&lt;/code>&lt;/td>
&lt;td>has one value: &lt;code>undefined&lt;/code>. It is a default value of an uninitialized variable&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>symbol&lt;/code>&lt;/td>
&lt;td>represents a unique constant value&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>Object types&lt;/li>
&lt;/ul>
&lt;p>Objec types are &lt;strong>functions, arrays, classes&lt;/strong>, etc. Later, you’ll learn how to create custom object types.&lt;/p>
&lt;h3 id="detail">detail
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>number&lt;/p>
&lt;p>All numbers in TypeScript are either &lt;strong>floating-point values&lt;/strong> that get the number type or big integers that get the &lt;code>bigint&lt;/code> type.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">hexadecimal&lt;/span>: &lt;span class="kt">number&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="nx">XA&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">big&lt;/span>: &lt;span class="kt">bigint&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">9007199254740991&lt;/span>&lt;span class="nx">n&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>string&lt;/p>
&lt;p>In TypeScript, all strings get the &lt;code>string&lt;/code> type. Like JavaScript, TypeScript uses double quotes (&lt;code>&amp;quot;&lt;/code>), single quotes (&lt;code>'&lt;/code>), and backtick (`) to surround string literals.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Object and object&lt;/p>
&lt;p>The &lt;code>object&lt;/code> type represents &lt;strong>all non-primitive values&lt;/strong> while the &lt;code>Object&lt;/code> type describes &lt;strong>the functionality of all objects&lt;/strong>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>empty type {}&lt;/p>
&lt;p>TypeScript has another type called empty type denoted by &lt;code>{}&lt;/code> , which is quite similar to the object type.&lt;/p>
&lt;p>The empty type &lt;code>{}&lt;/code> describes an object that has no property on its own. If you try to access a property on such object, TypeScript will issue a compile-time error&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Tuple&lt;/p>
&lt;p>A tuple works like an &lt;a class="link" href="https://www.typescripttutorial.net/typescript-tutorial/typescript-array-type/" target="_blank" rel="noopener"
>array&lt;/a> with some additional considerations:&lt;/p>
&lt;ul>
&lt;li>The &lt;strong>number of elements&lt;/strong> in the tuple is &lt;strong>fixed&lt;/strong>.&lt;/li>
&lt;li>The &lt;strong>types&lt;/strong> of elements &lt;strong>are known&lt;/strong>, and need not be the same.&lt;/li>
&lt;/ul>
&lt;p>Since TypeScript 3.0, a tuple can have optional elements specified using the question mark (?) postfix.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-tsx" data-lang="tsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">bgColor&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">headerColor&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="kt">number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">number&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">bgColor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">255&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">255&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.5&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">headerColor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">255&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">255&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Enum&lt;/p>
&lt;p>An enum is &lt;strong>a group of named constant values&lt;/strong>. Enum stands for enumerated type.&lt;/p>
&lt;p>To define an enum, you follow these steps:&lt;/p>
&lt;ul>
&lt;li>First, use the &lt;code>enum&lt;/code> keyword followed by the name of the enum.&lt;/li>
&lt;li>Then, define constant values for the enum.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-tsx" data-lang="tsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">enum&lt;/span> &lt;span class="nx">name&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">constant1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">constant2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">...};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>An enum member is both a number and a defined constant.&lt;/p>
&lt;p>TypeScript defines the numeric value of an enum’s member based on the order of that member that appears in the enum definition.&lt;/p>
&lt;p>It’s possible to explicitly specify numbers for the members of an enum:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-tsx" data-lang="tsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">enum&lt;/span> &lt;span class="nx">Month&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Jan&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Feb&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Mar&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Apr&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">May&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Jun&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Jul&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Aug&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Sep&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Oct&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Nov&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Dec&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You should use an enum when you:&lt;/p>
&lt;ul>
&lt;li>Have a small set of fixed values that are closely related&lt;/li>
&lt;li>And these values are known at compile time.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>any&lt;/p>
&lt;p>The &lt;code>any&lt;/code> type allows you to assign a value of any type to a variable.&lt;/p>
&lt;p>The &lt;code>any&lt;/code> type provides you with a way to work with existing JavaScript codebase. It allows you to gradually opt-in and opt-out of type checking during compilation. Therefore, you can use the &lt;code>any&lt;/code> type for migrating a JavaScript project over to TypeScript.&lt;/p>
&lt;p>If you declare a variable without specifying a type, TypeScript assumes that you use the &lt;code>any&lt;/code> type. This feature is called &lt;a class="link" href="https://www.typescripttutorial.net/typescript-tutorial/typescript-type-inference/" target="_blank" rel="noopener"
>type inference&lt;/a>. Basically, TypeScript guesses the type of the variable.&lt;/p>
&lt;blockquote>
&lt;p>Note that to disable implicit typing to the &lt;code>any&lt;/code> type, you change the &lt;code>noImplicitAny&lt;/code> option in the &lt;code>tsconfig.json&lt;/code> file to b.&lt;/p>
&lt;/blockquote>
&lt;p>If you declare a variable with the &lt;code>object&lt;/code> type, you can also assign it any value.&lt;/p>
&lt;p>However, you &lt;strong>cannot call a method&lt;/strong> on it even the method actually exists.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>void&lt;/p>
&lt;p>The &lt;code>void&lt;/code> type denotes the absence of having any type at all. It is a little like the opposite of the &lt;a class="link" href="https://www.typescripttutorial.net/typescript-tutorial/typescript-any-type/" target="_blank" rel="noopener"
>&lt;code>any&lt;/code> type&lt;/a>.&lt;/p>
&lt;p>Typically, you use the &lt;code>void&lt;/code> type as the return type of functions that do not return a value.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">message&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">messsage&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It is a good practice to add the &lt;code>void&lt;/code> type as the return type of a function or a method that doesn’t return any value. By doing this, you can gain the following benefits:&lt;/p>
&lt;ul>
&lt;li>Improve &lt;strong>clarity&lt;/strong> of the code: you do not have to read the whole function body to see if it returns anything.&lt;/li>
&lt;li>Ensure &lt;strong>type-safe&lt;/strong>: you will never assign the function with the &lt;code>void&lt;/code> return type to a variable.&lt;/li>
&lt;/ul>
&lt;p>Notice that if you use the &lt;code>void&lt;/code> type for a variable, you can only assign &lt;code>undefined&lt;/code> to that variable. In this case, the &lt;code>void&lt;/code> type is not useful.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>never&lt;/p>
&lt;p>The &lt;code>never&lt;/code> type is a type that contains no values. Because of this, you cannot assign any value to a variable with a &lt;code>never&lt;/code> type.&lt;/p>
&lt;p>Typically, you use the &lt;code>never&lt;/code> type to represent the return type of a function that &lt;strong>always throws an error&lt;/strong>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">raiseError&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">message&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kt">never&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">message&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Variables can also acquire the &lt;code>never&lt;/code> type when you narrow its type by a &lt;a class="link" href="https://www.typescripttutorial.net/typescript-tutorial/typescript-type-guards/" target="_blank" rel="noopener"
>type guard&lt;/a> that can never be true.&lt;/p>
&lt;p>For example, without the &lt;code>never&lt;/code> type, the following function causes an error because not all code paths return a value.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>: &lt;span class="kt">string&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kt">number&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kr">boolean&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">typeof&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s2">&amp;#34;string&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">typeof&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s2">&amp;#34;number&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To make the code valid, you can return a function whose return type is the &lt;code>never&lt;/code> type.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>: &lt;span class="kt">string&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kt">number&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kr">boolean&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">typeof&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s2">&amp;#34;string&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">typeof&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s2">&amp;#34;number&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// make the function valid
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">neverOccur&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">neverOccur&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Never!&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>union&lt;/p>
&lt;p>The union type allows you to &lt;strong>combine&lt;/strong> multiple types into one type.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">result&lt;/span>: &lt;span class="kt">number&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// OK
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;Hi&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// also OK
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// a boolean value, not OK
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>function&lt;/p>
&lt;p>A function type has two parts: parameters and return type. When declaring a function type, you need to specify both parts with the following syntax:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="nx">parameter&lt;/span>: &lt;span class="kt">type&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">parameter&lt;/span>:&lt;span class="kt">type&lt;/span>&lt;span class="p">,...)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="kr">type&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once annotating a variable with a function type, you can assign the function with the same type to the variable.&lt;/p>
&lt;p>If a function has different branches that return different types, the TypeScript compiler may infer the &lt;code>union&lt;/code> type or &lt;code>any&lt;/code> type.&lt;/p>
&lt;p>Therefore, it is important to add type annotations to a function &lt;strong>as much as possible&lt;/strong>.&lt;/p>
&lt;p>TypeScript compiler can figure out the function type when you have the type on one side of the equation. This form of &lt;a class="link" href="https://www.typescripttutorial.net/typescript-tutorial/typescript-type-inference/" target="_blank" rel="noopener"
>type inference&lt;/a> is called contextual typing.&lt;/p>
&lt;p>&lt;img src="https://www.typescripttutorial.net/wp-content/uploads/2020/06/TypeScript-Function-Type-Example.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>String Literal Type&lt;/p>
&lt;p>The string literal types allow you to define a type that accepts only one specified string literal.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">click&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;click&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The string literal type is useful to limit a possible string value in a variable.&lt;/p>
&lt;p>The string literal types can combine nicely with the &lt;a class="link" href="https://www.typescripttutorial.net/typescript-tutorial/typescript-union-type/" target="_blank" rel="noopener"
>union types&lt;/a> to define a finite set of string literal values for a variable:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">mouseEvent&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;click&amp;#39;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s1">&amp;#39;dblclick&amp;#39;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s1">&amp;#39;mouseup&amp;#39;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s1">&amp;#39;mousedown&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">mouseEvent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;click&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// valid
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">mouseEvent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;dblclick&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// valid
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">mouseEvent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;mouseup&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// valid
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">mouseEvent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;mousedown&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// valid
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">mouseEvent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;mouseover&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// compiler error
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you use the string literal types in multiple places, they will be very verbose.&lt;/p>
&lt;p>To avoid this, you can use the type aliases.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">MouseEvent&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;click&amp;#39;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s1">&amp;#39;dblclick&amp;#39;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s1">&amp;#39;mouseup&amp;#39;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s1">&amp;#39;mousedown&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">mouseEvent&lt;/span>: &lt;span class="kt">MouseEvent&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">mouseEvent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;click&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// valid
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">mouseEvent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;dblclick&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// valid
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">mouseEvent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;mouseup&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// valid
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">mouseEvent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;mousedown&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// valid
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">mouseEvent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;mouseover&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// compiler error
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">anotherEvent&lt;/span>: &lt;span class="kt">MouseEvent&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="type-annotation">Type Annotation
&lt;/h2>&lt;p>TypeScript uses type annotations to &lt;strong>explicitly specify types for identifiers&lt;/strong> such variables, functions, objects, etc.&lt;/p>
&lt;p>TypeScript uses the syntax &lt;code>: type&lt;/code> after an identifier as the type annotation, where &lt;code>type&lt;/code> can be any valid type.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">variableName&lt;/span>: &lt;span class="kt">type&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">variableName&lt;/span>: &lt;span class="kt">type&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">constantName&lt;/span>: &lt;span class="kt">type&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//array
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">arrayName&lt;/span>: &lt;span class="kt">type&lt;/span>&lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//object
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">person&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">age&lt;/span>: &lt;span class="kt">number&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">employee&lt;/span>: &lt;span class="kt">object&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//functions
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">greeting&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="type-inference">Type Inference
&lt;/h2>&lt;p>Type inference describes where and how TypeScript infers types when you don’t explicitly &lt;a class="link" href="https://www.typescripttutorial.net/typescript-tutorial/typescript-type-annotations/" target="_blank" rel="noopener"
>annotate&lt;/a> them. Type inference occurs when you initialize variables, set parameter default values, and determine function return types. TypeScript uses the best common type algorithm to select the best candidate types that are compatible with all variables. TypeScript also uses &lt;strong>contextual typing&lt;/strong> to infer types of variables based on the locations of the variables.&lt;/p>
&lt;p>In practice, you should always use the type inference &lt;strong>as much as possible&lt;/strong>. And you use the type annotation in the folowing cases:&lt;/p>
&lt;ul>
&lt;li>When you declare a variable and assign it a value &lt;strong>later&lt;/strong>.&lt;/li>
&lt;li>When you want a variable that &lt;strong>can’t be inferred&lt;/strong>.&lt;/li>
&lt;li>When a function returns the &lt;code>any&lt;/code> type and you need to &lt;strong>clarify the value&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;h2 id="type-aliases">Type Aliases
&lt;/h2>&lt;p>Type aliases allow you to create a new name for an existing type. The following shows the syntax of the type alias:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">alias&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">existingType&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">chars&lt;/span>&lt;span class="o">=&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The existing type can be any valid TypeScript type.&lt;/p>
&lt;p>It’s useful to create type aliases for union types.&lt;/p>
&lt;h2 id="type-gaurd">Type Gaurd
&lt;/h2>&lt;p>Type Guards allow you to narrow down the type of a variable within a &lt;strong>conditional block&lt;/strong>.&lt;/p>
&lt;ul>
&lt;li>typeof&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">alphanumeric&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>: &lt;span class="kt">alphanumeric&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>: &lt;span class="kt">alphanumeric&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">typeof&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;number&amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="k">typeof&lt;/span> &lt;span class="nx">b&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;number&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">typeof&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;string&amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="k">typeof&lt;/span> &lt;span class="nx">b&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;string&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">concat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Invalid arguments. Both arguments must be either numbers or strings.&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>instanceof&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">Customer&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">isCreditAllowed&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kr">boolean&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">Supplier&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">isInShortList&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kr">boolean&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">BusinessPartner&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">Customer&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="nx">Supplier&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">signContract&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">partner&lt;/span>: &lt;span class="kt">BusinessPartner&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">message&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">partner&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="nx">Customer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">partner&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">isCreditAllowed&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s1">&amp;#39;Sign a new contract with the customer&amp;#39;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Credit issue&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">partner&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="nx">Supplier&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">partner&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">isInShortList&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s1">&amp;#39;Sign a new contract the supplier&amp;#39;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Need to evaluate further&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>in&lt;/p>
&lt;p>The &lt;code>in&lt;/code> operator carries a safe check for the existence of a property on an object. You can also use it as a type guard.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">signContract&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">partner&lt;/span>: &lt;span class="kt">BusinessPartner&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">message&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;isCreditAllowed&amp;#39;&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="nx">partner&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">partner&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">isCreditAllowed&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s1">&amp;#39;Sign a new contract with the customer&amp;#39;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Credit issue&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// must be Supplier
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">partner&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">isInShortList&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s1">&amp;#39;Sign a new contract the supplier &amp;#39;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Need to evaluate further&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>User-Defined Type Guard&lt;/p>
&lt;p>User-defined type guards allow you to define a type guard or help TypeScript infer a type when you &lt;strong>use a function&lt;/strong>.&lt;/p>
&lt;p>A user-defined type guard function is a function that &lt;strong>simply returns &lt;code>arg is aType&lt;/code>&lt;/strong>. For example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">isCustomer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">partner&lt;/span>: &lt;span class="kt">any&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">partner&lt;/span> &lt;span class="k">is&lt;/span> &lt;span class="nx">Customer&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">partner&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="nx">Customer&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this example, the &lt;code>isCustomer()&lt;/code> is a user-defined type guard function. Now you can use it in as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">signContract&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">partner&lt;/span>: &lt;span class="kt">BusinessPartner&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">message&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">isCustomer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">partner&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">partner&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">isCreditAllowed&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s1">&amp;#39;Sign a new contract with the customer&amp;#39;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Credit issue&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">partner&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">isInShortList&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s1">&amp;#39;Sign a new contract with the supplier&amp;#39;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Need to evaluate further&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">message&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="type-casting">Type Casting
&lt;/h2>&lt;p>Type casting allow you to convert a variable from one type to another type.&lt;/p>
&lt;p>In TypeScript, you can use the &lt;code>as&lt;/code> keyword or &lt;code>&amp;lt;&amp;gt;&lt;/code> operator for type castings.&lt;/p>
&lt;ul>
&lt;li>Type Casting using the &lt;code>as&lt;/code> keyword&lt;/li>
&lt;/ul>
&lt;p>The following selects the first input element by using the &lt;code>querySelector()&lt;/code> method:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-JS" data-lang="JS">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">input&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">querySelector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;input[&amp;#34;type=&amp;#34;text&amp;#34;]&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Since the returned type of the &lt;code>document.querySelector()&lt;/code> method is the &lt;code>Element&lt;/code> type, the following code causes a compiler error:&lt;/p>
&lt;pre tabindex="0">&lt;code>console.log(input.value);JS
&lt;/code>&lt;/pre>&lt;p>The reason is that the value property doesn’t exist in the Element type. It only exists on the &lt;code>HTMLInputElement&lt;/code> type.&lt;/p>
&lt;p>To resolve this, you can use type casting that cast the Element to &lt;code>HTMLInputElement&lt;/code> by using the &lt;code>as&lt;/code> keyword like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-TS" data-lang="TS">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">input&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">querySelector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;input[type=&amp;#34;text&amp;#34;]&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kr">as&lt;/span> &lt;span class="nx">HTMLInputElement&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, the &lt;code>input&lt;/code> variable has the type &lt;code>HTMLInputElement&lt;/code>.&lt;/p>
&lt;p>Another way to cast the &lt;code>Element&lt;/code> to &lt;code>HTMLInputElement&lt;/code> is when you access the property as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-TS" data-lang="TS">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">enteredText&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">input&lt;/span> &lt;span class="kr">as&lt;/span> &lt;span class="nx">HTMLInputElement&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that the &lt;code>HTMLInputElement&lt;/code> type extends the &lt;code>HTMLElement&lt;/code> type that extends to the &lt;code>Element&lt;/code> type. When you cast the &lt;code>HTMLElement&lt;/code> to &lt;code>HTMLInputElement&lt;/code>, this type casting is also known as a &lt;strong>down casting&lt;/strong>.&lt;/p>
&lt;p>The syntax for converting a variable from &lt;code>typeA&lt;/code> to &lt;code>typeB&lt;/code> is as follows:&lt;/p>
&lt;pre tabindex="0">&lt;code>let a: typeA;
let b = a as typeB;
Code language: TypeScript (typescript)
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Type Casting using the &amp;lt;&amp;gt; operator&lt;/li>
&lt;/ul>
&lt;p>Besides the &lt;code>as&lt;/code> keyword, you can use the &lt;code>&amp;lt;&amp;gt;&lt;/code> operator to carry a type casting. For example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-TS" data-lang="TS">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">input&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">HTMLInputElement&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">querySelector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;input[type=&amp;#34;text&amp;#34;]&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The syntax for type casting using the &lt;code>&amp;lt;&amp;gt;&lt;/code> is:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-TS" data-lang="TS">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">a&lt;/span>: &lt;span class="kt">typeA&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">typeB&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="type-assertion">Type Assertion
&lt;/h2>&lt;p>Type assertions instruct the TypeScript compiler to treat a value as a specified type. It uses the &lt;code>as&lt;/code> keyword to do so:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">expression&lt;/span> &lt;span class="kr">as&lt;/span> &lt;span class="nx">targetType&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A type assertion is also known as &lt;strong>type narrowing&lt;/strong>. It allows you to narrow a type from a &lt;a class="link" href="https://www.typescripttutorial.net/typescript-tutorial/typescript-union-type/" target="_blank" rel="noopener"
>union type&lt;/a>.&lt;/p>
&lt;p>Note that a type assertion does not carry any &lt;a class="link" href="https://www.typescripttutorial.net/typescript-tutorial/type-casting/" target="_blank" rel="noopener"
>type casting&lt;/a>. It only tells the compiler &lt;strong>which type it should apply to a value&lt;/strong> &lt;strong>for the type checking purposes.&lt;/strong>&lt;/p>
&lt;p>You can also uses the angle bracket syntax &lt;code>&amp;lt;&amp;gt;&lt;/code> to assert a type, like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">targetType&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="nx">value&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">netPrice&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">number&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">getNetPrice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.05&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that you cannot use angle bracket syntax &lt;code>&amp;lt;&amp;gt;&lt;/code> with some libraries such as React.&lt;/p>
&lt;h2 id="intersection-type">Intersection Type
&lt;/h2>&lt;p>An intersection type creates a new type by combining multiple existing types. The new type has all features of the existing types.&lt;/p>
&lt;p>To combine types, you use the &lt;code>&amp;amp;&lt;/code> operator as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">typeAB&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">typeA&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="nx">typeB&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>typeAB&lt;/code> will have all properties from both &lt;code>typeA&lt;/code> and &lt;code>typeB&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">BusinessPartner&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">credit&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">Identity&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">id&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">Contact&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">email&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">phone&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">Employee&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">Identity&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="nx">Contact&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">Customer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">BusinessPartner&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="nx">Contact&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">Employee&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">Identity&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="nx">Contact&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">e&lt;/span>: &lt;span class="kt">Employee&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">id&lt;/span>: &lt;span class="kt">100&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;John Doe&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">email&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;john.doe@example.com&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">phone&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;(408)-897-5684&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When you intersect types, the order of the types doesn’t matter.&lt;/p>
&lt;h2 id="function">Function
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>Optional Parameters&lt;/p>
&lt;p>Because the compiler thoroughly checks the passing arguments, you need to annotate optional parameters to instruct the compiler not to issue an error when you omit the arguments.&lt;/p>
&lt;p>To make a function parameter optional, you use the &lt;code>?&lt;/code> after the parameter name.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">multiply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">c?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kt">number&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">typeof&lt;/span> &lt;span class="nx">c&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="s1">&amp;#39;undefined&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">b&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The optional parameters must appear &lt;strong>after&lt;/strong> the required parameters in the parameter list.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Default Parameters&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">parameter1&lt;/span>:&lt;span class="kt">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nx">defaultvalue1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">parameter2&lt;/span>:&lt;span class="kt">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nx">defaultvalue2&lt;/span>&lt;span class="p">,...)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notice that you &lt;strong>cannot&lt;/strong> include default parameters in &lt;strong>function type definitions&lt;/strong>. The following code will result in an error:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">promotion&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">price&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">discount&lt;/span>: &lt;span class="kt">number&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">0.05&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//error TS2371: A parameter initializer is only allowed in a function or constructor implementation.
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>both the default parameters and trailing default parameters share the same type.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">applyDiscount&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">price&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">discount&lt;/span>: &lt;span class="kt">number&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">0.05&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kt">number&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">applyDiscount&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">price&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">discount?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kt">number&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//both are
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">price&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">discount?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="kt">number&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>However, default parameters don’t need to appear after the required parameters.&lt;/p>
&lt;p>When a default parameter appears before a required parameter, you need to explicitly pass &lt;code>undefined&lt;/code> to get the default initialized value.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Rest Parameters&lt;/p>
&lt;p>To declare a rest parameter, you prefix the parameter name with three dots and use the array type as the type annotation:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">fn&lt;/span>&lt;span class="p">(...&lt;/span>&lt;span class="nx">rest&lt;/span>: &lt;span class="kt">type&lt;/span>&lt;span class="p">[])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>function overloadings&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>: &lt;span class="kt">number&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>: &lt;span class="kt">number&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kt">number&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">typeof&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;number&amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="k">typeof&lt;/span> &lt;span class="nx">b&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;number&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">typeof&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;string&amp;#39;&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="k">typeof&lt;/span> &lt;span class="nx">b&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;string&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The union type doesn’t express the relationship between the parameter types and results accurately.&lt;/p>
&lt;p>To better describe the relationships between the types used by a function, TypeScript supports function overloadings.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>: &lt;span class="kt">any&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>: &lt;span class="kt">any&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kt">any&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//with optional parameter
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">c&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">c?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kt">number&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">b&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="class">Class
&lt;/h2>&lt;p>JavaScript does not have a concept of class like other programming languages such as Java and C#. In ES5, you can use a constructor function and &lt;a class="link" href="https://www.javascripttutorial.net/javascript-prototypal-inheritance/" target="_blank" rel="noopener"
>prototype inheritance&lt;/a> to create a “class”.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">Person&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ssn&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">firstName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">lastName&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ssn&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ssn&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">firstName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">firstName&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">lastName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">lastName&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">Person&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prototype&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getFullName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="sb">`&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">firstName&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb"> &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">lastName&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">person&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Person&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;171-28-0926&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;John&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s1">&amp;#39;Doe&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">person&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getFullName&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a class="link" href="https://www.javascripttutorial.net/es6/javascript-class/" target="_blank" rel="noopener"
>ES6 allowed you to define a class&lt;/a> which is simply syntactic sugar for creating constructor function and prototypal inheritance&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">Person&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ssn&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">firstName&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">lastName&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ssn&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">firstName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">lastName&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ssn&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ssn&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">firstName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">firstName&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">lastName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">lastName&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">getFullName() {&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="sb">`&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">firstName&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb"> &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">lastName&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>TypeScript class adds &lt;a class="link" href="https://www.typescripttutorial.net/typescript-tutorial/typescript-type-annotations/" target="_blank" rel="noopener"
>type annotations&lt;/a> to the properties and methods of the class. The following shows the &lt;code>Person&lt;/code> class in TypeScript:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">Person&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ssn&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">firstName&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">lastName&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ssn&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">firstName&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">lastName&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ssn&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ssn&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">firstName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">firstName&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">lastName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">lastName&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">getFullName&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="sb">`&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">firstName&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb"> &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">lastName&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="access-modifier">Access Modifier
&lt;/h3>&lt;p>Access modifiers change the visibility of the properties and methods of a &lt;a class="link" href="https://www.typescripttutorial.net/typescript-tutorial/typescript-class/" target="_blank" rel="noopener"
>class&lt;/a>. TypeScript provides three access modifiers:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>private&lt;/p>
&lt;p>The &lt;code>private&lt;/code> modifier limits the visibility &lt;strong>to the same-class only&lt;/strong>. When you add the &lt;code>private&lt;/code> modifier to a property or method, you can access that property or method within the same class. Any attempt to access private properties or methods outside the class will result in an error at compile time.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">Person&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">private&lt;/span> &lt;span class="nx">ssn&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">private&lt;/span> &lt;span class="nx">firstName&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">private&lt;/span> &lt;span class="nx">lastName&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>protected&lt;/p>
&lt;p>The &lt;code>protected&lt;/code> modifier allows properties and methods of a class to be accessible &lt;strong>within same class and within subclasses&lt;/strong>.&lt;/p>
&lt;p>To make the code shorter, TypeScript allows you to both declare properties and initialize them in the constructor like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">Person&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">protected&lt;/span> &lt;span class="nx">ssn&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kr">private&lt;/span> &lt;span class="nx">firstName&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kr">private&lt;/span> &lt;span class="nx">lastName&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ssn&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ssn&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">firstName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">firstName&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">lastName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">lastName&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">getFullName&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="sb">`&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">firstName&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb"> &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">lastName&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>public&lt;/p>
&lt;p>The public modifier allows class properties and methods &lt;strong>to be accessible from all locations&lt;/strong>. If you don’t specify any access modifier for properties and methods, they will &lt;strong>take the public modifier by default&lt;/strong>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Note that TypeScript controls the access logically during &lt;strong>compilation time&lt;/strong>, not at runtime.&lt;/p>
&lt;h3 id="readonly">readonly
&lt;/h3>&lt;p>TypeScript provides the readonly modifier that allows you to mark the properties of a class immutable. The assignment to a readonly property can only occur in one of two places:&lt;/p>
&lt;ul>
&lt;li>In the &lt;strong>property declaration&lt;/strong>.&lt;/li>
&lt;li>In the &lt;strong>constructor&lt;/strong> of the same class.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">Person&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">birthDate&lt;/span>: &lt;span class="kt">Date&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">birthDate&lt;/span>: &lt;span class="kt">Date&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">birthDate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">birthDate&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Like other &lt;a class="link" href="https://www.typescripttutorial.net/typescript-tutorial/typescript-access-modifiers/" target="_blank" rel="noopener"
>access modifiers&lt;/a>, you can consolidate the declaration and initialization of a readonly property in the constructor like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">Person&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">readonly&lt;/span> &lt;span class="nx">birthDate&lt;/span>: &lt;span class="kt">Date&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">birthDate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">birthDate&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="readonly-vs-const">Readonly vs. const
&lt;/h3>&lt;p>The following shows the differences between readonly and const:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;code>readonly&lt;/code>&lt;/th>
&lt;th>&lt;code>const&lt;/code>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Use for&lt;/td>
&lt;td>Class properties&lt;/td>
&lt;td>Variables&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Initialization&lt;/td>
&lt;td>In the declaration or in the constructor of the same class&lt;/td>
&lt;td>In the declaration&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="interface">Interface
&lt;/h2>&lt;p>TypeScript interfaces define the contracts within your code. They also provide &lt;strong>explicit names&lt;/strong> for type checking.&lt;/p>
&lt;p>By convention, the interface names are in the camel case. They use a single capitalized letter to separate words in there names.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">Person&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">firstName&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">lastName&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">getFullName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">person&lt;/span>: &lt;span class="kt">Person&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="sb">`&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">person&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">firstName&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb"> &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">person&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">lastName&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">john&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">firstName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;John&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">lastName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Doe&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">getFullName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">john&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="optional-properties">Optional Properties
&lt;/h3>&lt;p>An interface may have optional properties. To declare an optional property, you use the question mark (&lt;code>?)&lt;/code> at the end of the property name in the declaration&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">Person&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">firstName&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">middleName?&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">lastName&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="function-types">Function Types
&lt;/h3>&lt;p>In addition to &lt;strong>describing an object with properties&lt;/strong>, interfaces also allow you to describe &lt;a class="link" href="https://www.typescripttutorial.net/typescript-tutorial/typescript-function-types/" target="_blank" rel="noopener"
>function types&lt;/a>.&lt;/p>
&lt;p>To describe a function type, you assign the interface to the &lt;strong>function signature&lt;/strong> that contains the parameter list with types and returned types.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">StringFormat&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nx">str&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">isUpper&lt;/span>: &lt;span class="kt">boolean&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="class-types">Class Types
&lt;/h3>&lt;p>The interface can also be used to define &lt;strong>a contract between unrelated classes&lt;/strong>.&lt;/p>
&lt;p>For example, the following &lt;code>Json&lt;/code> interface can be implemented by any unrelated classes:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">Json&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">toJSON&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The following declares a class that implements the &lt;code>Json&lt;/code> interface:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">Person&lt;/span> &lt;span class="kr">implements&lt;/span> &lt;span class="nx">Json&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">private&lt;/span> &lt;span class="nx">firstName&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">private&lt;/span> &lt;span class="nx">lastName&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">toJson&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">JSON&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stringify&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="extending">extending
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">Mailable&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">email&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kr">boolean&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">queue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">email&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kr">boolean&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">FutureMailable&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">Mailable&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">later&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">email&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">after&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kr">boolean&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Like classes, the &lt;code>FutureMailable&lt;/code> interface inherits the &lt;code>send()&lt;/code> and &lt;code>queue()&lt;/code> methods from the &lt;code>Mailable&lt;/code> interface.&lt;/p>
&lt;p>An interface can extend multiple interfaces, creating a combination of all the interfaces.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">A&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">a&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">void&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">B&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">A&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">b&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">void&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">C&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">c&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">void&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">D&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">B&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">C&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">d&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">void&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>TypeScript &lt;strong>allows an interface to extend a class&lt;/strong>. In this case, the interface inherits the properties and methods of the class. Also, the interface can inherit the private and protected members of the class, not just the public members.&lt;/p>
&lt;p>It means that when an interface extends a class with private or protected members, the interface can only be implemented by that class or subclasses of that class from which the interface extends.&lt;/p>
&lt;p>By doing this, you &lt;strong>restrict the usage of the interface to only class or subclasses of the class&lt;/strong> from which the interface extends. If you attempt to implement the interface from a class that is not a subclass of the class that the interface inherited, you’ll get an error. For example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">Control&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">private&lt;/span> &lt;span class="nx">state&lt;/span>: &lt;span class="kt">boolean&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">StatefulControl&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">Control&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">enable&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">void&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">Button&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">Control&lt;/span> &lt;span class="kr">implements&lt;/span> &lt;span class="nx">StatefulControl&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">enable() {&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">TextBox&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">Control&lt;/span> &lt;span class="kr">implements&lt;/span> &lt;span class="nx">StatefulControl&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">enable() {&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">Label&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">Control&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Error: cannot implement
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">class&lt;/span> &lt;span class="nx">Chart&lt;/span> &lt;span class="kr">implements&lt;/span> &lt;span class="nx">StatefulControl&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">enable() {&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="generics">Generics
&lt;/h2>&lt;p>TypeScript generics allow you to write the &lt;strong>reusable and generalized form&lt;/strong> of functions, classes, and interfaces.&lt;/p>
&lt;p>In order to avoid code duplication. We can:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">getRandomAnyElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">items&lt;/span>: &lt;span class="kt">any&lt;/span>&lt;span class="p">[])&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kt">any&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">randomIndex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">floor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">items&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">items&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">randomIndex&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This solution works fine. However, it has a drawback.&lt;/p>
&lt;p>It doesn’t allow you to enforce the type of the returned element. In other words, it isn’t type-safe.&lt;/p>
&lt;p>A better solution to avoid code duplication while preserving the type is to use generics.&lt;/p>
&lt;p>The following shows a generic function that returns the random element from an array of type &lt;code>T&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">getRandomElement&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">T&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="nx">items&lt;/span>: &lt;span class="kt">T&lt;/span>&lt;span class="p">[])&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">T&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">randomIndex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">floor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">items&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">items&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">randomIndex&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">merge&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">U&lt;/span>&lt;span class="err">,&lt;/span> &lt;span class="na">V&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="nx">obj1&lt;/span>: &lt;span class="kt">U&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">obj2&lt;/span>: &lt;span class="kt">V&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>&lt;span class="nx">obj1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>&lt;span class="nx">obj2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This function uses type variable &lt;code>T&lt;/code>. The &lt;code>T&lt;/code> allows you to &lt;strong>capture the type that is provided at the time of calling the function&lt;/strong>.&lt;/p>
&lt;p>This &lt;code>getRandomElement()&lt;/code> function is generic because it can work with any data type including string, number, objects,…&lt;/p>
&lt;p>By convention, we use the letter &lt;code>T&lt;/code> as the type variable. However, you can freely use other letters such as &lt;code>A&lt;/code>, &lt;code>B&lt;/code> &lt;code>C&lt;/code>, …&lt;/p>
&lt;p>The following shows how to use the &lt;code>getRandomElement()&lt;/code> with an array of numbers:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">numbers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">randomEle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">getRandomElement&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">number&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="nx">numbers&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">randomEle&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This example &lt;strong>explicitly&lt;/strong> passes &lt;code>number&lt;/code> as the &lt;code>T&lt;/code> type into the &lt;code>getRandomElement()&lt;/code> function.&lt;/p>
&lt;p>In practice, you’ll use &lt;a class="link" href="https://www.typescripttutorial.net/typescript-tutorial/typescript-type-inference/" target="_blank" rel="noopener"
>type inference&lt;/a> for the argument. It means that you let the TypeScript compiler set the value of &lt;code>T&lt;/code> automatically based on the type of argument that you pass into, like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">numbers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">randomEle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">getRandomElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">numbers&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">randomEle&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this example, we didn’t pass the &lt;code>number&lt;/code> type to the &lt;code>getRandomElement()&lt;/code> explicitly. The compiler just looks at the argument and sets &lt;code>T&lt;/code> to its type.&lt;/p>
&lt;h3 id="generics-constraint">Generics Constraint
&lt;/h3>&lt;p>In order to denote the constraint, you use the &lt;code>extends&lt;/code> keyword. For example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">merge&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">U&lt;/span> &lt;span class="na">extends&lt;/span> &lt;span class="na">object&lt;/span>&lt;span class="err">,&lt;/span> &lt;span class="na">V&lt;/span> &lt;span class="na">extends&lt;/span> &lt;span class="na">object&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="nx">obj1&lt;/span>: &lt;span class="kt">U&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">obj2&lt;/span>: &lt;span class="kt">V&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>&lt;span class="nx">obj1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>&lt;span class="nx">obj2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Because the &lt;code>merge()&lt;/code> function is now constrained, it will no longer work with all types. Instead, it works with the &lt;code>object&lt;/code> type only.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">prop&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">T&lt;/span>&lt;span class="err">,&lt;/span> &lt;span class="na">K&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="nx">obj&lt;/span>: &lt;span class="kt">T&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">key&lt;/span>: &lt;span class="kt">K&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">obj&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">key&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//Type &amp;#39;K&amp;#39; cannot be used to index type &amp;#39;T&amp;#39;.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">prop&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">T&lt;/span>&lt;span class="err">,&lt;/span> &lt;span class="na">K&lt;/span> &lt;span class="na">extends&lt;/span> &lt;span class="na">keyof&lt;/span> &lt;span class="na">T&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="nx">obj&lt;/span>: &lt;span class="kt">T&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">key&lt;/span>: &lt;span class="kt">K&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">obj&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">key&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Use &lt;code>extends&lt;/code> keyword to constrain the type parameter to a specific type.&lt;/li>
&lt;li>Use &lt;code>extends keyof&lt;/code> to constrain a type that is the property of another object.&lt;/li>
&lt;/ul>
&lt;h3 id="generics-class">Generics Class
&lt;/h3>&lt;p>A &lt;a class="link" href="https://www.typescripttutorial.net/typescript-tutorial/typescript-generics/" target="_blank" rel="noopener"
>generic&lt;/a> class has a generic type parameter list in an angle brackets &lt;code>&amp;lt;&amp;gt;&lt;/code> that follows the name of the class:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">className&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">T&lt;/span>&lt;span class="p">&amp;gt;{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">className&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">K&lt;/span>&lt;span class="err">,&lt;/span>&lt;span class="na">T&lt;/span>&lt;span class="p">&amp;gt;{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">className&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">T&lt;/span> &lt;span class="na">extends&lt;/span> &lt;span class="na">TypeA&lt;/span>&lt;span class="p">&amp;gt;{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">Stack&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">private&lt;/span> &lt;span class="nx">elements&lt;/span>: &lt;span class="kt">T&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">private&lt;/span> &lt;span class="nx">size&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">isEmpty&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kr">boolean&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">elements&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">isFull&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kr">boolean&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">elements&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">size&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">element&lt;/span>: &lt;span class="kt">T&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">elements&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">size&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;The stack is overflow!&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">elements&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">element&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">pop&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">T&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">elements&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;The stack is empty!&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">elements&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">pop&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="generics-interface">Generics Interface
&lt;/h3>&lt;p>Like classes, interfaces also can be generic. A generic interface has generic type parameter list in an angle brackets &lt;code>&amp;lt;&amp;gt;&lt;/code> following the name of the interface:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">interfaceName&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">interfaceName&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">U&lt;/span>&lt;span class="err">,&lt;/span>&lt;span class="na">V&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">Pair&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">K&lt;/span>&lt;span class="err">,&lt;/span> &lt;span class="na">V&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">key&lt;/span>: &lt;span class="kt">K&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">value&lt;/span>: &lt;span class="kt">V&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">Options&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nx">name&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">T&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">inputOptions&lt;/span>: &lt;span class="kt">Options&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">boolean&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;disabled&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;visible&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>【JS】ES6</title><link>https://dyhes.github.io/p/jses6/</link><pubDate>Mon, 19 Apr 2021 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/jses6/</guid><description>&lt;h2 id="parameter">Parameter
&lt;/h2>&lt;h3 id="default-parameter">Default Parameter
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">say&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">message&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;Hi&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">message&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">say&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// &amp;#39;Hi&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">say&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Hello&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// &amp;#39;Hello&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you want to use the default values for the parameters, pass &lt;code>undefined&lt;/code> values to the parameters.&lt;/p>
&lt;p>The parameter can take a default value which is a result of a function. You can assign a parameter a default value that references to other default parameters as shown in the following example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">z&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">y&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">z&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">add&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>；‘’、》The value of &lt;strong>the &lt;code>arguments&lt;/code> object&lt;/strong> inside the function is the number of actual arguments that you pass to the function. For example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">z&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">arguments&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">y&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">z&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">30&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 3
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="rest-parameter">Rest Parameter
&lt;/h3>&lt;p>ES6 provides a new kind of parameter so-called rest parameter that has a prefix of three dots &lt;code>(...)&lt;/code>. A rest parameter **allows you to &lt;strong>represent an indefinite number of arguments as an array&lt;/strong>. See the following syntax:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">fn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="p">,...&lt;/span>&lt;span class="nx">args&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notice that the rest parameters must appear &lt;strong>at the end of the argument list&lt;/strong>.&lt;/p>
&lt;p>See the following example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">sum&lt;/span>&lt;span class="p">(...&lt;/span>&lt;span class="nx">args&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">total&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="k">of&lt;/span> &lt;span class="nx">args&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">total&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">total&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">sum&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="spread-operator">Spread Operator
&lt;/h2>&lt;p>ES6 provides a new operator called spread operator that consists of three dots &lt;code>(...).&lt;/code> The spread operator allows you to spread out elements of an &lt;strong>iterable object&lt;/strong> such as an &lt;a class="link" href="https://www.javascripttutorial.net/javascript-array/" target="_blank" rel="noopener"
>array&lt;/a>,a &lt;a class="link" href="https://www.javascripttutorial.net/es6/javascript-map/" target="_blank" rel="noopener"
>map&lt;/a>, or a &lt;a class="link" href="https://www.javascripttutorial.net/es6/javascript-set/" target="_blank" rel="noopener"
>set&lt;/a>. For example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">odd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">combined&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">...&lt;/span>&lt;span class="nx">odd&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Output:&lt;/p>
&lt;pre tabindex="0">&lt;code>[ 2, 4, 6, 1, 3, 5 ]
&lt;/code>&lt;/pre>&lt;p>So the three dots ( &lt;code>...&lt;/code>) represent both the spread operator and the rest parameter.&lt;/p>
&lt;p>Here are the main differences:&lt;/p>
&lt;ul>
&lt;li>The spread operator &lt;strong>unpacks&lt;/strong> elements.&lt;/li>
&lt;li>The rest parameter &lt;strong>packs&lt;/strong> elements into an array.&lt;/li>
&lt;/ul>
&lt;p>The rest parameters must be the last arguments of a function. However, the spread operator can be anywhere:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-JS" data-lang="JS">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">rivers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;Nile&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Ganges&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Yangte&amp;#39;&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">moreRivers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;Danube&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Amazon&amp;#39;&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//ES5
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nb">Array&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">prototype&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">apply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">rivers&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">moreRivers&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">rivers&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//ES6
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">rivers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(...&lt;/span>&lt;span class="nx">moreRivers&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that ES2018 expands the spread operator to objects. It is known as the &lt;a class="link" href="https://www.javascripttutorial.net/es-next/javascript-object-spread/" target="_blank" rel="noopener"
>object spread&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">circle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">radius&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">coloredCircle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>&lt;span class="nx">circle&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">color&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;black&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="object-literal">Object literal
&lt;/h2>&lt;p>ES6 allows you to &lt;strong>eliminate the duplication&lt;/strong> when a property of an object is the same as the local variable name by including the name without a colon and value.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-JS" data-lang="JS">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">createMachine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">status&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">status&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You could use the square brackets( &lt;code>[]&lt;/code>) to enable the &lt;strong>computed property names&lt;/strong> for the properties on objects.&lt;/p>
&lt;p>The square brackets allow you to use the string literals and &lt;strong>variables&lt;/strong> as the property names.&lt;/p>
&lt;p>When a property name is placed inside the square brackets, the JavaScript engine &lt;strong>evaluates it as a string&lt;/strong>. It means that you can use an expression as a property name.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-JS" data-lang="JS">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">prefix&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;machine&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">machine&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nx">prefix&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39; name&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;server&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nx">prefix&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39; hours&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">10000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">machine&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;machine name&amp;#39;&lt;/span>&lt;span class="p">]);&lt;/span> &lt;span class="c1">// server
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">machine&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;machine hours&amp;#39;&lt;/span>&lt;span class="p">]);&lt;/span> &lt;span class="c1">// 10000
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="concise-method-syntax">Concise Method Syntax
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-JS" data-lang="JS">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//ES5
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">server&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Server&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">restart&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;The&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34; is restarting...&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//ES6
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">server&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Server&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">restart&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;The&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34; is restarting...&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This shorthand syntax is also known as the &lt;strong>concise method syntax&lt;/strong>. It’s valid to have spaces in the property name.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-JS" data-lang="JS">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">server&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Server&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">restart&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;The &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34; is restarting...&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s1">&amp;#39;starting up&amp;#39;&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;The &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34; is starting up!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">server&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;starting up&amp;#39;&lt;/span>&lt;span class="p">]();&lt;/span>&lt;span class="nx">Code&lt;/span> &lt;span class="nx">language&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">JavaScript&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">javascript&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this example, the method &lt;code>'starting up'&lt;/code> has spaces in its name. To call the method, you use the following syntax:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-JS" data-lang="JS">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">object_name&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;property name&amp;#39;&lt;/span>&lt;span class="p">]();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="new-way-to-loop">New Way to Loop
&lt;/h2>&lt;p>ES6 introduced a new statement &lt;code>for...of&lt;/code> that iterates over an iterable object such as:&lt;/p>
&lt;ul>
&lt;li>Built-in &lt;a class="link" href="https://www.javascripttutorial.net/javascript-array/" target="_blank" rel="noopener"
>Array&lt;/a>, &lt;a class="link" href="https://www.javascripttutorial.net/javascript-string/" target="_blank" rel="noopener"
>String&lt;/a>, &lt;a class="link" href="https://www.javascripttutorial.net/es6/javascript-map/" target="_blank" rel="noopener"
>Map&lt;/a>, &lt;a class="link" href="https://www.javascripttutorial.net/es6/javascript-set/" target="_blank" rel="noopener"
>Set&lt;/a>, …&lt;/li>
&lt;li>Array-like objects such as &lt;code>arguments&lt;/code> or &lt;code>NodeList&lt;/code>&lt;/li>
&lt;li>User-defined objects that implement the &lt;a class="link" href="https://www.javascripttutorial.net/es6/javascript-iterator/" target="_blank" rel="noopener"
>iterator protocol&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>The following illustrates the syntax of the &lt;code>for...of&lt;/code>:&lt;/p>
&lt;p>You can use &lt;code>var&lt;/code>, &lt;code>let&lt;/code>, or &lt;code>const&lt;/code> to declare the &lt;code>variable&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-JS" data-lang="JS">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">variable&lt;/span> &lt;span class="k">of&lt;/span> &lt;span class="nx">iterable&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// statements
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Array destructing
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">colors&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;Red&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Green&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Blue&amp;#39;&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">color&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">of&lt;/span> &lt;span class="nx">colors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">entries&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">color&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb"> is at index &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// object destructing
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">ratings&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;John&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">score&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Jane&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">score&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;David&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">score&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Peter&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">score&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">score&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="k">of&lt;/span> &lt;span class="nx">ratings&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">sum&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nx">score&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="destructure">Destructure
&lt;/h2>&lt;h3 id="array-destructuring">Array Destructuring
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">y&lt;/span> &lt;span class="p">,...&lt;/span>&lt;span class="nx">args&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">someFuncReturnArray&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If the value taken from the array is &lt;code>undefined&lt;/code>, you can assign the variable a default value, like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//a=10,b=2;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="object-destructuring">Object Destructuring
&lt;/h3>&lt;p>ES6 introduces the object destructuring syntax that provides an alternative way to &lt;strong>assign properties of an object to variables&lt;/strong>:&lt;/p>
&lt;pre tabindex="0">&lt;code>let { firstName: fname, lastName: lname } = person
&lt;/code>&lt;/pre>&lt;p>In this example, the &lt;code>firstName&lt;/code> and &lt;code>lastName&lt;/code> properties are assigned to the &lt;code>fName&lt;/code> and &lt;code>lName&lt;/code> variables respectively.&lt;/p>
&lt;p>The identifier before the colon (&lt;code>:&lt;/code>) is the property of the object and the identifier &lt;strong>after&lt;/strong> the colon is the &lt;strong>variable&lt;/strong>.&lt;/p>
&lt;p>If the variables have &lt;strong>the same names&lt;/strong> as the properties of the object, you can make the code more concise as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">firstName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">lastName&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">person&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It’s possible to separate the declaration and assignment. However, you must surround the variables in &lt;strong>parentheses&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="p">({&lt;/span>&lt;span class="nx">firstName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">lastName&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">person&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you don’t use the parentheses, the JavaScript engine will interpret the left-hand side as a block and throw a syntax error.&lt;/p>
&lt;p>When you assign a property that does not exist to a variable using the object destructuring, the variable is set to &lt;strong>&lt;code>undefined&lt;/code>&lt;/strong>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">firstName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">lastName&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">middleName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">currentAge&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">age&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">18&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">person&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To avoid typeError caused by null returned, you can use &lt;code>||&lt;/code> to fallback the &lt;code>null&lt;/code> object to an empty object:&lt;/p>
&lt;pre tabindex="0">&lt;code>let { firstName, lastName } = getPerson() || {};
&lt;/code>&lt;/pre>&lt;h2 id="module">Module
&lt;/h2>&lt;p>An ES6 module is a JavaScript file that &lt;strong>executes in strict mode only&lt;/strong>. It means that any &lt;a class="link" href="https://www.javascripttutorial.net/es6/javascript-let/" target="_blank" rel="noopener"
>variables&lt;/a> or &lt;a class="link" href="https://www.javascripttutorial.net/javascript-function/" target="_blank" rel="noopener"
>functions&lt;/a> declared in the module won’t be added automatically to the global scope.&lt;/p>
&lt;p>First, create a new file called &lt;code>message.js&lt;/code> and add the following code:&lt;/p>
&lt;pre tabindex="0">&lt;code>export let message = &amp;#39;ES6 Modules&amp;#39;;
&lt;/code>&lt;/pre>&lt;p>The &lt;code>message.js&lt;/code> is a module in ES6 that contains the &lt;code>message&lt;/code> variable. The &lt;code>export&lt;/code> statement &lt;strong>exposes&lt;/strong> the &lt;code>message&lt;/code> variable to other modules.&lt;/p>
&lt;p>Second, create another new file named &lt;code>app.js&lt;/code> that uses the &lt;code>message.js&lt;/code> module. The &lt;code>app.js&lt;/code> module creates a new heading 1 (h1) element and attaches it to an HTML page. The &lt;code>import&lt;/code> statement imports the &lt;code>message&lt;/code> variable from the &lt;code>message.js&lt;/code> module.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">message&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;./message.js&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">h1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;h1&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">h1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">textContent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">message&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">body&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">appendChild&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">h1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Third, create a new HTML page that uses the &lt;code>app.js&lt;/code> module:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;lt;!&lt;/span>&lt;span class="nx">DOCTYPE&lt;/span> &lt;span class="nx">html&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;utf-8&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">ES6&lt;/span> &lt;span class="nx">Modules&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;module&amp;#34;&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;./app.js&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that we used the &lt;code>type=&amp;quot;module&amp;quot;&lt;/code> in the script tag to load the &lt;code>app.js&lt;/code> module.&lt;/p>
&lt;p>To export a &lt;a class="link" href="https://www.javascripttutorial.net/javascript-variables/" target="_blank" rel="noopener"
>variable&lt;/a>, a &lt;a class="link" href="https://www.javascripttutorial.net/javascript-function/" target="_blank" rel="noopener"
>function&lt;/a>, or a &lt;a class="link" href="https://www.javascripttutorial.net/es6/javascript-class/" target="_blank" rel="noopener"
>class&lt;/a>, you place the &lt;code>export&lt;/code> keyword in front of it.&lt;/p>
&lt;p>Note that the &lt;code>export&lt;/code> keyword requires the function or class to &lt;strong>have a name&lt;/strong> to be exported. You &lt;strong>can’t export an anonymous function or class&lt;/strong> using this syntax.&lt;/p>
&lt;p>Once you define a module with exports, you can access the exported variables, functions, and classes in another module by using the &lt;code>import&lt;/code> keyword.&lt;/p>
&lt;p>In this syntax:&lt;/p>
&lt;ul>
&lt;li>First, specify what to import inside the &lt;strong>curly braces&lt;/strong>, which are called bindings.&lt;/li>
&lt;li>Then, specify the module from which you import the given bindings.&lt;/li>
&lt;/ul>
&lt;p>Note that when you import a binding from a module, the binding behaves like it was defined using &lt;a class="link" href="https://www.javascripttutorial.net/es6/javascript-const/" target="_blank" rel="noopener"
>const&lt;/a>. It means you can’t have another identifier with the same name or change the value of the binding.&lt;/p>
&lt;p>Behind the scenes, when you called the &lt;code>setMessage()&lt;/code> function. JavaScript went back to the &lt;code>greeting.js&lt;/code> module and executed code in there and changed the &lt;code>message&lt;/code> variable. The change was then automatically reflected on the imported &lt;code>message&lt;/code> binding.&lt;/p>
&lt;p>To import everything from a module &lt;strong>as a single object&lt;/strong>, you use the &lt;strong>asterisk (*) pattern&lt;/strong>&lt;/p>
&lt;p>all the bindings become properties of the object, so you can access them.&lt;/p>
&lt;p>JavaScript must &lt;em>statically&lt;/em> determine what will be exported and imported.&lt;/p>
&lt;p>JavaScript allows you to create &lt;strong>aliases&lt;/strong> for variables, functions, or classes when you export and import.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">add&lt;/span> &lt;span class="nx">as&lt;/span> &lt;span class="nx">sum&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nx">sum&lt;/span> &lt;span class="nx">as&lt;/span> &lt;span class="nx">total&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;./math.js&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">sum&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s1">&amp;#39;./math.js&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">sum&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It’s possible to export bindings that you have imported. This is called &lt;strong>re-exporting&lt;/strong>.&lt;/p>
&lt;p>A module can have &lt;strong>one and only one default export&lt;/strong>. The default export is easier to import. The default for a module can be a variable, a function, or a class.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// sort.js
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// sorting here
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="nx">sort&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="nx">sort&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">js&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that you don’t need to specify the name for the function because the module represents the function name.&lt;/p>
&lt;p>Notice that we &lt;strong>didn’t use the curly brace &lt;code>{}&lt;/code>&lt;/strong> surrounding the &lt;code>sort&lt;/code> identifier.&lt;/p>
&lt;p>To import both default and non-default bindings, you use the specify a list of bindings after the &lt;code>import&lt;/code> keyword with the following rules:&lt;/p>
&lt;ul>
&lt;li>The default binding must &lt;strong>come first&lt;/strong>.&lt;/li>
&lt;li>The non-default binding must be surrounded by curly braces.&lt;/li>
&lt;/ul>
&lt;h2 id="arrow-function">Arrow Function
&lt;/h2>&lt;ul>
&lt;li>Use the &lt;code>(...args) =&amp;gt; expression;&lt;/code> to define an arrow function.&lt;/li>
&lt;li>Use the &lt;code>(...args) =&amp;gt; { statements }&lt;/code> to define an arrow function that has &lt;strong>multiple statements&lt;/strong>.&lt;/li>
&lt;li>An arrow function &lt;strong>doesn’t&lt;/strong> have its binding to &lt;code>this&lt;/code> or &lt;code>super&lt;/code>.&lt;/li>
&lt;li>An arrow function &lt;strong>doesn’t&lt;/strong> have &lt;code>arguments&lt;/code> object, &lt;code>new.target&lt;/code> keyword, and &lt;code>prototype&lt;/code> property.&lt;/li>
&lt;/ul>
&lt;p>the arrow function doesn’t have its own &lt;code>this&lt;/code> value. It uses the &lt;code>this&lt;/code> value of the &lt;strong>enclosing lexical scope&lt;/strong>.&lt;/p>
&lt;p>Arrow functions don’t have the &lt;code>arguments&lt;/code> object. Therefore, if you have a function that use &lt;code>arguments&lt;/code> object, you cannot use the arrow function.&lt;/p>
&lt;h2 id="symbol">Symbol
&lt;/h2>&lt;p>To create a new symbol, you use the global &lt;code>Symbol()&lt;/code> function as shown in this example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">Symbol&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;foo&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>Symbol()&lt;/code> function creates a &lt;strong>new &lt;em>unique&lt;/em> value&lt;/strong> each time you call it&lt;/p>
&lt;p>The &lt;code>Symbol()&lt;/code> function accepts a &lt;code>description&lt;/code> as an optional argument. The &lt;code>description&lt;/code> argument will make your symbol more &lt;strong>descriptive&lt;/strong>.&lt;/p>
&lt;p>You can access the symbol’s description property using the &lt;code>toString()&lt;/code> method. The &lt;code>console.log()&lt;/code> method calls the &lt;code>toString()&lt;/code> method of the symbol implicitly&lt;/p>
&lt;p>Since a symbol is a &lt;strong>primitive value&lt;/strong>, if you attempt to create a symbol using the &lt;code>new&lt;/code> operator, you will get an error&lt;/p>
&lt;p>ES6 provides you with the global symbol registry that allows you to share symbols globally. If you want to create a symbol that will be shared, you use the &lt;code>Symbol.for()&lt;/code> method &lt;strong>instead of&lt;/strong> calling the &lt;code>Symbol()&lt;/code> function.&lt;/p>
&lt;ul>
&lt;li>To get the key associated with a symbol, you use the &lt;code>Symbol.keyFor()&lt;/code> method&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>
&lt;p>To get all the enumerable properties of an object, you use the &lt;code>Object.keys()&lt;/code> method.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>To get all properties of an object whether the properties are enumerable or not, you use the &lt;code>Object.getOwnPropertyNames()&lt;/code> method.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>To get all property symbols of an object, you use the &lt;code>Object.getOwnPropertySymbols()&lt;/code> method, which has been added in ES6.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">keys&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">task&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// [&amp;#34;description&amp;#34;]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getOwnPropertyNames&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">task&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// [&amp;#34;description&amp;#34;]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getOwnPropertySymbols&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">task&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">//[Symbol(status)]
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ES6 provides predefined symbols which are called well-known symbols. The well-known symbols represent the common behaviors in JavaScript. Each well-known symbol is a static property of the &lt;code>Symbol&lt;/code> object.&lt;/p>
&lt;h2 id="iterator-and-generator">Iterator and Generator
&lt;/h2>&lt;p>There are two iteration protocols: &lt;strong>iterable protocol&lt;/strong> and &lt;strong>iterator protocol&lt;/strong>.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Iterator protocol&lt;/p>
&lt;p>An object is an iterator when it implements an interface (or API) that answers two questions:&lt;/p>
&lt;ul>
&lt;li>Is there any element left?&lt;/li>
&lt;li>If there is, what is the element?&lt;/li>
&lt;/ul>
&lt;p>Technically speaking, an object is qualified as an iterator when it has a &lt;code>next()&lt;/code> method that returns an object with two properties:&lt;/p>
&lt;ul>
&lt;li>&lt;code>done&lt;/code>: a boolean value indicating whether or not there are any more elements that could be iterated upon.&lt;/li>
&lt;li>&lt;code>value&lt;/code>: the current element.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Iterable protocol&lt;/p>
&lt;p>An object is iterable when it contains a method called &lt;code>[Symbol.iterator]&lt;/code> that takes no argument and returns an object which conforms to the iterator protocol.&lt;/p>
&lt;p>The &lt;code>[Symbol.iterator]&lt;/code> is one of the built-in well-known &lt;a class="link" href="https://www.javascripttutorial.net/es6/symbol/" target="_blank" rel="noopener"
>symbols&lt;/a> in ES6.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Since ES6 provides built-in iterators for the &lt;strong>collection types&lt;/strong> &lt;code>Array&lt;/code>, &lt;code>Set&lt;/code>, and &lt;code>Map&lt;/code>, you don’t have to create iterators for these objects.&lt;/p>
&lt;p>If you have a custom type and want to make it iterable so that you can use the &lt;code>for...of&lt;/code> loop construct, you need to implement the iteration protocols.&lt;/p>
&lt;blockquote>
&lt;p>The following code creates a &lt;code>Sequence&lt;/code> object that returns a list of numbers in the range of ( &lt;code>start&lt;/code>, &lt;code>end&lt;/code>) with an &lt;code>interval&lt;/code> between subsequent numbers.&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">Sequence&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">Infinity&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">interval&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">start&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">end&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">interval&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">interval&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nx">Symbol&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">iterator&lt;/span>&lt;span class="p">]()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">counter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">nextIndex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">start&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">next&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="nx">nextIndex&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">end&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">value&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">nextIndex&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">done&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">false&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">nextIndex&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">interval&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">counter&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">result&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">value&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">counter&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">done&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;cleaning up...&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">value&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">undefined&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">done&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The following code uses the &lt;code>Sequence&lt;/code> iterator in a &lt;code>for...of&lt;/code> loop:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">evenNumbers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Sequence&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">num&lt;/span> &lt;span class="k">of&lt;/span> &lt;span class="nx">evenNumbers&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">num&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In addition to the &lt;code>next()&lt;/code> method, the &lt;code>[Symbol.iterator]()&lt;/code> may optionally return a method called &lt;code>return()&lt;/code>.&lt;/p>
&lt;p>The &lt;code>return()&lt;/code> method &lt;strong>is invoked automatically when the iteration is stopped prematurely&lt;/strong>. It is where you can place the code to &lt;strong>clean up&lt;/strong> the resources.&lt;/p>
&lt;h3 id="generator">Generator
&lt;/h3>&lt;p>ES6 introduces &lt;strong>a new kind of function&lt;/strong> that is different from a regular function: function generator or generator.&lt;/p>
&lt;p>A generator can &lt;strong>pause midway&lt;/strong> and then &lt;strong>continues&lt;/strong> from where it paused.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nx">generate&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;invoked 1st time&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">yield&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;invoked 2nd time&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">yield&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let’s examine the &lt;code>generate()&lt;/code> function in detail.&lt;/p>
&lt;ul>
&lt;li>First, you see the asterisk (&lt;code>*&lt;/code>) after the &lt;code>function&lt;/code> keyword. The asterisk &lt;strong>denotes&lt;/strong> that the &lt;code>generate()&lt;/code> is a &lt;strong>generator&lt;/strong>, not a normal function.&lt;/li>
&lt;li>Second, the &lt;code>yield&lt;/code> statement &lt;strong>returns a value and pauses the execution of the function&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;p>A generator returns a &lt;code>Generator&lt;/code> object without executing its body when it is invoked.&lt;/p>
&lt;p>The &lt;code>Generator&lt;/code> object returns another object with two properties: &lt;code>done&lt;/code> and &lt;code>value&lt;/code>. In other words, a &lt;code>Generator&lt;/code> object is &lt;strong>iterable&lt;/strong>.&lt;/p>
&lt;p>Since a generator is iterable, you can use the &lt;code>for...of&lt;/code> loop:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">g&lt;/span> &lt;span class="k">of&lt;/span> &lt;span class="nx">gen&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">g&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here is the output:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">invoked&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="nx">st&lt;/span> &lt;span class="nx">time&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">invoked&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="nx">nd&lt;/span> &lt;span class="nx">time&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And here is the new Sequence iterator that &lt;strong>uses a generator&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">Sequence&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="nx">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">Infinity&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">interval&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">start&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">start&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">end&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">end&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">interval&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">interval&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">*&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">Symbol&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">iterator&lt;/span>&lt;span class="p">]()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nx">index&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">start&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">index&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">end&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">index&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">interval&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">yield&lt;/span> &lt;span class="nx">index&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The following shows the syntax of the &lt;code>yield&lt;/code> keyword:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="nx">variable_name&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">yield&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">expression&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this syntax:&lt;/p>
&lt;ul>
&lt;li>The &lt;code>expression&lt;/code> specifies the value to return from a generator function via the iteration protocol. If you omit the &lt;code>expression&lt;/code>, the &lt;code>yield&lt;/code> returns &lt;code>undefined&lt;/code>.&lt;/li>
&lt;li>The &lt;code>variable_name&lt;/code> stores the optional value passed to the &lt;code>next()&lt;/code> method of the iterator object.&lt;/li>
&lt;/ul>
&lt;h2 id="map-and-set">Map and Set
&lt;/h2>&lt;h3 id="map">Map
&lt;/h3>&lt;p>Prior to ES6, when you need to map keys to values, you often use an &lt;a class="link" href="https://www.javascripttutorial.net/javascript-objects/" target="_blank" rel="noopener"
>object&lt;/a>, because an object allows you to map a key to a value of any type.&lt;/p>
&lt;p>However, using an object as a map has some side effects:&lt;/p>
&lt;ul>
&lt;li>An object always has a default key like the &lt;a class="link" href="https://www.javascripttutorial.net/javascript-prototype/" target="_blank" rel="noopener"
>prototype&lt;/a>.&lt;/li>
&lt;li>A key of an object must be a &lt;a class="link" href="https://www.javascripttutorial.net/javascript-string/" target="_blank" rel="noopener"
>string&lt;/a> or a &lt;a class="link" href="https://www.javascripttutorial.net/es6/symbol/" target="_blank" rel="noopener"
>symbol&lt;/a>, you cannot use an object as a key.&lt;/li>
&lt;li>An object does not have a property that represents the size of the map.&lt;/li>
&lt;/ul>
&lt;p>ES6 provides a new collection type called &lt;code>Map&lt;/code> that addresses these deficiencies.&lt;/p>
&lt;p>By definition, a &lt;code>Map&lt;/code> object holds &lt;strong>key-value pairs&lt;/strong> where values of any type can be used as either keys or values. In addition, a &lt;code>Map&lt;/code> object remembers the original insertion order of the keys.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">map&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Map&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="nx">iterable&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>Map()&lt;/code> accepts an optional &lt;a class="link" href="https://www.javascripttutorial.net/es6/javascript-iterator/" target="_blank" rel="noopener"
>iterable&lt;/a> object whose elements are key-value pairs.&lt;/p>
&lt;h4 id="useful-methods">Useful Methods
&lt;/h4>&lt;ul>
&lt;li>&lt;code>clear()&lt;/code> – removes all elements from the map object.&lt;/li>
&lt;li>&lt;code>delete(key)&lt;/code> – removes an element specified by the key. It returns if the element is in the map, or false if it does not.&lt;/li>
&lt;li>&lt;code>entries()&lt;/code> – returns a new Iterator object that contains &lt;strong>an array of &lt;code>[key, value]&lt;/code>&lt;/strong> for each element in the map object. The order of objects in the map is the same as the insertion order.&lt;/li>
&lt;li>&lt;code>forEach(callback[, thisArg])&lt;/code> – invokes a callback for each key-value pair in the map in the insertion order. The optional thisArg parameter sets the this value for each callback.&lt;/li>
&lt;li>&lt;code>get(key)&lt;/code> – returns the value associated with the key. If the key does not exist, it returns undefined.&lt;/li>
&lt;li>&lt;code>has(key)&lt;/code> – returns true if a value associated with the key exists, otherwise, return false.&lt;/li>
&lt;li>&lt;code>keys()&lt;/code> – returns a new Iterator that contains the &lt;strong>keys&lt;/strong> for elements in insertion order.&lt;/li>
&lt;li>&lt;code>set(key, value)&lt;/code> – sets the value for the key in the map object. It returns the map object itself therefore you can chain this method with other methods.&lt;/li>
&lt;li>&lt;code>values()&lt;/code> returns a new iterator object that contains &lt;strong>values&lt;/strong> for each element in insertion order.&lt;/li>
&lt;/ul>
&lt;h4 id="weakmap">WeakMap
&lt;/h4>&lt;p>A &lt;code>WeakMap&lt;/code> is similar to a &lt;code>Map&lt;/code> except the keys of a &lt;code>WeakMap&lt;/code> &lt;strong>must be objects&lt;/strong>. It means that when a reference to a key (an object) is out of scope, the corresponding value is &lt;strong>automatically released&lt;/strong> from the memory.&lt;/p>
&lt;p>A &lt;code>WeakMap&lt;/code> only has subset methods of a &lt;code>Map&lt;/code> object:&lt;/p>
&lt;ul>
&lt;li>&lt;code>get(key)&lt;/code>&lt;/li>
&lt;li>&lt;code>set(key, value)&lt;/code>&lt;/li>
&lt;li>&lt;code>has(key)&lt;/code>&lt;/li>
&lt;li>&lt;code>delete(key)&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Here are the main difference between a &lt;code>Map&lt;/code> and a &lt;code>WeekMap&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>Elements of a WeakMap cannot be iterated.&lt;/li>
&lt;li>Cannot clear all elements at once.&lt;/li>
&lt;li>Cannot check the size of a WeakMap.&lt;/li>
&lt;/ul>
&lt;h3 id="set">Set
&lt;/h3>&lt;p>The &lt;code>Set&lt;/code> constructor also accepts an optional &lt;a class="link" href="https://www.javascripttutorial.net/es6/javascript-iterator/" target="_blank" rel="noopener"
>iterable object&lt;/a>. If you pass an iterable object to the &lt;code>Set&lt;/code> constructor, all the elements of the iterable object will be added to the new set:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">setObject&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Set&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="nx">iterableObject&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="useful-methods-1">Useful Methods
&lt;/h4>&lt;p>The &lt;code>Set&lt;/code> object provides the following useful methods:&lt;/p>
&lt;ul>
&lt;li>&lt;code>add(value)&lt;/code> – appends a new element with a specified value to the set. It returns the &lt;code>Set&lt;/code> object, therefore, you can chain this method with another &lt;code>Set&lt;/code> method.&lt;/li>
&lt;li>&lt;code>clear()&lt;/code> – removes all elements from the &lt;code>Set&lt;/code> object.&lt;/li>
&lt;li>&lt;code>delete(value)&lt;/code> – deletes an element specified by the value.&lt;/li>
&lt;li>&lt;code>entries()&lt;/code>– returns a new &lt;code>Iterator&lt;/code> that contains &lt;strong>an array of &lt;code>[value, value]&lt;/code> .&lt;/strong>&lt;/li>
&lt;li>&lt;code>forEach(callback [, thisArg])&lt;/code> – invokes a &lt;a class="link" href="https://www.javascripttutorial.net/javascript-callback/" target="_blank" rel="noopener"
>callback&lt;/a> on each element of the &lt;code>Set&lt;/code> with the &lt;code>this&lt;/code> value sets to &lt;code>thisArg&lt;/code> in each call.&lt;/li>
&lt;li>&lt;code>has(value)&lt;/code> – returns &lt;code>true&lt;/code> if an element with a given value is in the set, or &lt;code>false&lt;/code> if it is not.&lt;/li>
&lt;li>&lt;code>keys()&lt;/code> – is the same as &lt;code>values()&lt;/code> function.&lt;/li>
&lt;li>&lt;code>[@@iterator]&lt;/code> – returns a new &lt;code>Iterator&lt;/code> object that contains values of all elements stored &lt;strong>in the insertion order&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;p>To get the number of elements that the set holds, you use the &lt;code>size&lt;/code> property of the &lt;code>Set&lt;/code> object&lt;/p>
&lt;h4 id="weakset">WeakSet
&lt;/h4>&lt;p>A &lt;code>WeakSet&lt;/code> is similar to a &lt;code>Set&lt;/code> except that it contains &lt;strong>only objects&lt;/strong>. Since objects in a &lt;code>WeakSet&lt;/code> may be automatically garbage-collected, a &lt;code>WeakSet&lt;/code> does not have &lt;code>size&lt;/code> property. Like a &lt;code>WeakMap&lt;/code>, you cannot iterate elements of a &lt;code>WeakSet&lt;/code>, therefore, you will find that WeakSet is rarely used in practice. In fact, you only use a &lt;code>WeakSet&lt;/code> to check if a specified value is in the set.&lt;/p>
&lt;h2 id="proxy">Proxy
&lt;/h2>&lt;p>A JavaScript Proxy is an &lt;strong>object that wraps another object&lt;/strong> (target) and &lt;strong>intercepts&lt;/strong> the fundamental operations of the target object.&lt;/p>
&lt;p>The fundamental operations can be the property lookup, assignment, enumeration, and function invocations, etc.&lt;/p>
&lt;p>To create a new proxy object, you use the following syntax:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">proxy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Proxy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">target&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">handler&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this syntax:&lt;/p>
&lt;ul>
&lt;li>&lt;code>target&lt;/code> – is an object to wrap.&lt;/li>
&lt;li>&lt;code>handler&lt;/code> – is an object that contains methods to control the behaviors of the &lt;code>target&lt;/code>. The methods inside the &lt;code>handler&lt;/code> object are called traps.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>A simple proxy example&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//First, define an object called user
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">firstName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;John&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">lastName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Doe&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">email&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;john.doe@example.com&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//Second, define a `handler` object:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">handler&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">target&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">property&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`Property &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">property&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb"> has been read.`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">property&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//Third, create a `proxy` object:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">proxyUser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Proxy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">handler&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="C:%5cUsers%5cdyhes%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20220125133602732.png"
loading="lazy"
alt="image-20220125133602732"
>&lt;/p>
&lt;p>The following are more traps:&lt;/p>
&lt;ul>
&lt;li>&lt;code>construct&lt;/code> – traps usage of the &lt;code>new&lt;/code> operator&lt;/li>
&lt;li>&lt;code>getPrototypeOf&lt;/code> – traps an internal call to &lt;code>[[GetPrototypeOf]]&lt;/code>&lt;/li>
&lt;li>&lt;code>setPrototypeOf&lt;/code> – traps a call to &lt;code>Object.setPrototypeOf&lt;/code>&lt;/li>
&lt;li>&lt;code>isExtensible&lt;/code> – traps a call to &lt;code>Object.isExtensible&lt;/code>&lt;/li>
&lt;li>&lt;code>preventExtensions&lt;/code> – traps a call to &lt;code>Object.preventExtensions&lt;/code>&lt;/li>
&lt;li>&lt;code>getOwnPropertyDescriptor&lt;/code> – traps a call to &lt;code>Object.getOwnPropertyDescriptor&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="reflection">Reflection
&lt;/h2>&lt;p>In computer programming, reflection is the ability of a program to manipulate variables, properties, and methods of objects at &lt;strong>runtime&lt;/strong>.&lt;/p>
&lt;p>ES6 introduces a new global object called &lt;code>Reflect&lt;/code> that allows you to call methods, construct objects, get and set properties, manipulate and extend properties.&lt;/p>
&lt;p>The &lt;code>Reflect&lt;/code> API is important because it allows you to develop programs and frameworks that are able to &lt;strong>handle dynamic code&lt;/strong>.&lt;/p>
&lt;p>Unlike the most global objects, the &lt;code>Reflect&lt;/code> &lt;strong>is not a constructor&lt;/strong>. It means that you cannot use &lt;code>Reflect&lt;/code> with the &lt;code>new&lt;/code> operator or invoke the &lt;code>Reflect&lt;/code> as a function. It is similar to the &lt;code>Math&lt;/code> and &lt;code>JSON&lt;/code> objects. All the methods of the &lt;code>Reflect&lt;/code> object are &lt;strong>static&lt;/strong>.&lt;/p>
&lt;ul>
&lt;li>&lt;code>Reflect.apply()&lt;/code> – call a function with specified arguments.&lt;/li>
&lt;li>&lt;code>Reflect.construct()&lt;/code> – act like the &lt;code>new&lt;/code> operator, but as a function. It is equivalent to calling &lt;code>new target(...args)&lt;/code>.&lt;/li>
&lt;li>&lt;code>Reflect.defineProperty()&lt;/code> – is similar to &lt;code>Object.defineProperty()&lt;/code>, but return a Boolean value indicating whether or not the property was successfully defined on the object.&lt;/li>
&lt;li>&lt;code>Reflect.deleteProperty()&lt;/code> – behave like the &lt;code>delete&lt;/code> operator, but as a function. It’s equivalent to calling the &lt;code>delete objectName[propertyName]&lt;/code>.&lt;/li>
&lt;li>&lt;code>Reflect.get()&lt;/code> – return the value of a property.&lt;/li>
&lt;li>&lt;code>Reflect.getOwnPropertyDescriptor()&lt;/code> – is similar to &lt;code>Object.getOwnPropertyDescriptor()&lt;/code>. It returns a &lt;strong>property descriptor of a property&lt;/strong> if the property &lt;strong>exists&lt;/strong> on the object, or &lt;code>undefined&lt;/code> otherwise.&lt;/li>
&lt;li>&lt;code>Reflect.getPrototypeOf()&lt;/code> – is the same as &lt;code>Object.getPrototypeOf()&lt;/code>.&lt;/li>
&lt;li>&lt;code>Reflect.has()&lt;/code> – work like the &lt;code>in&lt;/code> operator, but as a function. It returns a boolean indicating whether an property (either owned or inherited) exists.
&lt;code>Reflect.isExtensible()&lt;/code> – is the same as &lt;code>Object.isExtensible()&lt;/code>.&lt;/li>
&lt;li>&lt;code>Reflect.ownKeys()&lt;/code> – return an array of the owned property keys (not inherited) of an object.&lt;/li>
&lt;li>&lt;code>Reflect.preventExtensions()&lt;/code> – is similar to &lt;code>Object.preventExtensions()&lt;/code>. It returns a Boolean.&lt;/li>
&lt;li>&lt;code>Reflect.set()&lt;/code> – assign a value to a property and return a Boolean value which is true if the property is set successfully.&lt;/li>
&lt;li>&lt;code>Reflect.setPrototypeOf()&lt;/code> – set the prototype of an object.&lt;/li>
&lt;/ul>
&lt;h2 id="new-functions">New Functions
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;code>Array.of()&lt;/code>&lt;/p>
&lt;p>In ES5, when you pass a number to the Array constructor, JavaScript creates an array whose length equals the number.&lt;/p>
&lt;p>However, when you pass to the &lt;code>Array&lt;/code> constructor a value that is not a number, JavaScript creates an array that contains one element with that value.&lt;/p>
&lt;p>ES6 introduces the &lt;code>Array.of()&lt;/code> method to solve this problem.&lt;/p>
&lt;p>The &lt;code>Array.of()&lt;/code> method is similar to the &lt;code>Array&lt;/code> constructor except the &lt;code>Array.of()&lt;/code> method does not treat a single numeric value special.&lt;/p>
&lt;p>In other words, the &lt;code>Array.of()&lt;/code> method always creates an array that contains the values that you pass to it regardless of the types or the number of arguments.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Array.from()&lt;/code>&lt;/p>
&lt;p>ES6 introduces the &lt;code>Array.from()&lt;/code> method that creates a new instance of the &lt;code>Array&lt;/code> from an array-like or iterable object. The following illustrates the syntax of the &lt;code>Array.from()&lt;/code> method:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Array&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">from&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">target&lt;/span> &lt;span class="p">[,&lt;/span> &lt;span class="nx">mapFn&lt;/span>&lt;span class="p">[,&lt;/span> &lt;span class="nx">thisArg&lt;/span>&lt;span class="p">]])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this syntax:&lt;/p>
&lt;ul>
&lt;li>&lt;code>target&lt;/code> is an array-like or iterable object to convert to an array.&lt;/li>
&lt;li>&lt;code>mapFn&lt;/code> is the &lt;strong>map function&lt;/strong> to call on every element of the array&lt;/li>
&lt;li>&lt;code>thisArg&lt;/code> is the &lt;code>this&lt;/code> value when executing the &lt;code>mapFn&lt;/code> function.&lt;/li>
&lt;/ul>
&lt;p>The &lt;code>Array.from()&lt;/code> returns a new instance of &lt;code>Array&lt;/code> that contains all elements of the &lt;code>target&lt;/code> object.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>find()&lt;/code>&lt;/p>
&lt;p>ES6 introduced a new method called &lt;code>find()&lt;/code>added to the &lt;code>Array.prototype&lt;/code> object.&lt;/p>
&lt;p>The &lt;code>find()&lt;/code> method returns the first element in an array that satisfies a provided function.&lt;/p>
&lt;p>The following shows the syntax of the &lt;code>find()&lt;/code> method:&lt;/p>
&lt;pre tabindex="0">&lt;code>find(callback(element[, index[, array]])[, thisArg])
&lt;/code>&lt;/pre>&lt;p>The &lt;code>find()&lt;/code> accepts two arguments: a callback function and an optional value to use for the &lt;code>this&lt;/code> inside the &lt;code>callback&lt;/code> function&lt;/p>
&lt;p>The &lt;code>callback&lt;/code> is a function that executes on each element of the array. It takes three arguments:&lt;/p>
&lt;ul>
&lt;li>&lt;code>element&lt;/code> is the current element.&lt;/li>
&lt;li>&lt;code>index&lt;/code> the index of the current element.&lt;/li>
&lt;li>&lt;code>array&lt;/code> the array that the &lt;code>find()&lt;/code> was called upon&lt;/li>
&lt;/ul>
&lt;p>The &lt;code>thisArg&lt;/code> is the object used as &lt;code>this&lt;/code> inside the &lt;code>callback&lt;/code>.&lt;/p>
&lt;p>The &lt;code>find()&lt;/code> executes the &lt;code>callback&lt;/code> function for each element in the array until the &lt;code>callback&lt;/code> returns a truthy value.&lt;/p>
&lt;p>If the callback returns a truthy value, the &lt;code>find()&lt;/code> immediately returns the element and stop searching. Otherwise, it returns &lt;code>undefined&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Object.assign()&lt;/code>&lt;/p>
&lt;p>The following shows the syntax of the &lt;code>Object.assign()&lt;/code> method:&lt;/p>
&lt;pre tabindex="0">&lt;code>Object.assign(target, ...sources)
&lt;/code>&lt;/pre>&lt;p>The &lt;code>Object.assign()&lt;/code> copies all &lt;strong>enumerable and own propeties&lt;/strong> from the &lt;code>source&lt;/code> objects to the &lt;code>target&lt;/code> object. It &lt;strong>returns the &lt;code>target&lt;/code> object&lt;/strong>. It invokes the getters on the source objects and setters on the target. It &lt;strong>assigns properties only&lt;/strong>, not copying or defining new properties. &lt;code>Object.assign()&lt;/code> can be used to &lt;strong>clone or merge&lt;/strong> objects.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//clone
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">widget&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">color&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;red&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">clonedWidget&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">assign&lt;/span>&lt;span class="p">({},&lt;/span> &lt;span class="nx">widget&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">clonedWidget&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//merge
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">box&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">height&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">width&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">20&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">style&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">color&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;Red&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">borderStyle&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;solid&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">styleBox&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">Object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">assign&lt;/span>&lt;span class="p">({},&lt;/span> &lt;span class="nx">box&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">style&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">styleBox&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If the source objects have the same property, the property of the &lt;strong>later&lt;/strong> object &lt;strong>overwrites&lt;/strong> the earlier one&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Object.is()&lt;/code>&lt;/p>
&lt;p>The &lt;code>Object.is()&lt;/code> behaves like the &lt;code>===&lt;/code> operator with two differences:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>-0 and +0&lt;/p>
&lt;p>The &lt;code>===&lt;/code> operator treats &lt;code>-0&lt;/code> and &lt;code>+0&lt;/code> are the same value:&lt;/p>
&lt;p>However, the &lt;code>Object.is()&lt;/code> treats +0 and -0 as different values.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>NaN&lt;/p>
&lt;p>The &lt;code>===&lt;/code> operator considers &lt;code>NaN&lt;/code> and &lt;code>NaN&lt;/code> are different values. The &lt;code>NaN&lt;/code> is the only number that does not equal itself.&lt;/p>
&lt;p>However, &lt;code>Object.is()&lt;/code> treats &lt;code>NaN&lt;/code> as the same value&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="C:%5cUsers%5cdyhes%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20220125135715368.png"
loading="lazy"
alt="image-20220125135715368"
>&lt;/p>
&lt;p>The &lt;code>startsWith()&lt;/code> returns &lt;code>true&lt;/code> if a &lt;a class="link" href="https://www.javascripttutorial.net/javascript-string/" target="_blank" rel="noopener"
>string&lt;/a> begins with the characters of a specified string; otherwise &lt;code>false&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>startsWith()&lt;/code>&lt;/p>
&lt;p>The following shows the syntax of the &lt;code>startsWith()&lt;/code> method:&lt;/p>
&lt;pre tabindex="0">&lt;code>String.startsWith(searchString(pattern) [,position])
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;code>searchString&lt;/code> is the characters to be searched for at the start of this string.&lt;/li>
&lt;li>&lt;code>position&lt;/code> is an optional parameter that determines the start position to search for the &lt;code>searchString&lt;/code>. It defaults to 0.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>endsWith()&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">String&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">startsWith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">searchString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">pattern&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">[,&lt;/span>&lt;span class="nx">position&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>endsWith()&lt;/code> returns &lt;code>true&lt;/code> if a string ends with the characters of a specified string; otherwise &lt;code>false&lt;/code>.Arguments&lt;/p>
&lt;ul>
&lt;li>&lt;code>searchString&lt;/code> is the characters to be searched for at the end of the string.&lt;/li>
&lt;li>&lt;code>length&lt;/code> is an optional parameter that determines the length of the string to search. It defaults to the length of the string.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>includes()&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>The &lt;code>includes()&lt;/code> method determines whether a string contains another string:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">string&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">includes&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">searchString&lt;/span> &lt;span class="p">[,&lt;/span>&lt;span class="nx">position&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The includes() method returns &lt;code>true&lt;/code> if the &lt;code>searchString&lt;/code> found in the &lt;code>string&lt;/code>; otherwise &lt;code>false&lt;/code>.&lt;/p>
&lt;p>The optional &lt;code>position&lt;/code> parameter specifies the position within the &lt;code>string&lt;/code> at which to begin searching for the &lt;code>searchString&lt;/code>. The &lt;code>position&lt;/code> defaults to 0.&lt;/p>
&lt;p>The &lt;code>includes()&lt;/code> matches string case-sensitively.&lt;/p>
&lt;h2 id="class">Class
&lt;/h2>&lt;p>A JavaScript class is a &lt;strong>blueprint&lt;/strong> for creating objects. A class &lt;strong>encapsulates data and functions&lt;/strong> that manipulate data.&lt;/p>
&lt;p>Unlike other programming languages such as Java and C#, JavaScript classes are syntactic sugar over the &lt;strong>prototypal inheritance&lt;/strong> . In other words, ES6 classes are just &lt;strong>special functions&lt;/strong>.&lt;/p>
&lt;p>A &lt;code>class&lt;/code> declaration is syntactic sugar over prototypal inheritance with additional &lt;strong>enhancements&lt;/strong>.&lt;/p>
&lt;p>ES6 introduced a new syntax for declaring a class as shown in this example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">Person&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Despite the similarities between a class and a custom type defined via a constructor function, there are some important &lt;strong>differences&lt;/strong>.&lt;/p>
&lt;ul>
&lt;li>class declarations are &lt;strong>not hoisted&lt;/strong> like function declarations.&lt;/li>
&lt;li>all the code inside a class &lt;strong>automatically executes in the strict mode&lt;/strong>. And you cannot change this behavior.&lt;/li>
&lt;li>class methods are &lt;strong>non-emunerable&lt;/strong>.If you use a constructor/prototype pattern, you have to use the &lt;code>Object.defineProperty()&lt;/code> method to make a property non-enumerable.&lt;/li>
&lt;li>calling the class constructor without the &lt;code>new&lt;/code> operator will result in an &lt;strong>error&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>ES6 provides a specific syntax for defining the getter and setter using the get and set keywords. For example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">Person&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">get&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">set&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">newName&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">newName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">newName&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">trim&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">newName&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="s1">&amp;#39;The name cannot be empty&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">newName&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>Getter&lt;/p>
&lt;p>To call the getter, you use the following syntax:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">person&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When JavaScript sees the access to &lt;code>name&lt;/code> property of the &lt;code>Person&lt;/code> class, it checks if the &lt;code>Person&lt;/code> class has any &lt;strong>&lt;code>name&lt;/code> property&lt;/strong>. If not, JavaScript checks if the Person class has any &lt;strong>method that binds to the &lt;code>name&lt;/code> property&lt;/strong>. In this example, the &lt;code>name()&lt;/code> method binds to the &lt;code>name&lt;/code> property via the &lt;code>get&lt;/code> keyword. Once JavaScript finds the getter method, it executes the getter method and returns a value.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Setter&lt;/p>
&lt;p>The setter uses the &lt;code>set&lt;/code> keyword followed by the method name:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">set&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">newName&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">newName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">newName&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">trim&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">newName&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="s1">&amp;#39;The name cannot be empty&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">newName&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>JavaScript will call the &lt;code>name()&lt;/code> setter when you assign a value to the &lt;code>name&lt;/code> property like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">person&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;Jane Smith&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If a class has only getter but not setter and you attempt to use the setter, the change won’t take any effect.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Static Method&lt;/p>
&lt;p>By definition, static methods are bound to a class, &lt;strong>not the instances&lt;/strong> of that class. Therefore, static methods are useful for defining helper or utility methods.&lt;/p>
&lt;p>The following adds a static method called &lt;code>createAnonymous()&lt;/code> to the &lt;code>Person&lt;/code> type:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">Person&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createAnonymous&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">gender&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">gender&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;male&amp;#34;&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s2">&amp;#34;John Doe&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Jane Doe&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Person&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>createAnonymous()&lt;/code> method is considered a static method because it doesn’t depend on any instance of the &lt;code>Person&lt;/code> type for its property values.&lt;/p>
&lt;p>To call the &lt;code>createAnonymous()&lt;/code> method, you use the &lt;code>Person&lt;/code> type instead of its instances:&lt;/p>
&lt;pre tabindex="0">&lt;code>var anonymous = Person.createAnonymous();
&lt;/code>&lt;/pre>&lt;p>In ES6, you define static methods using the &lt;code>static&lt;/code> keyword.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">Person&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">getName&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">static&lt;/span> &lt;span class="nx">createAnonymous&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">gender&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">gender&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;male&amp;#34;&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s2">&amp;#34;John Doe&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Jane Doe&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Person&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you attempt to call the static method from an instance of the class, you’ll get an error.&lt;/p>
&lt;p>To call a static method from a class constructor or an instance method, you use the class name, followed by the &lt;code>.&lt;/code> and the static method:&lt;/p>
&lt;pre tabindex="0">&lt;code>className.staticMethodName();
//or
this.constructor.staticMethodName();
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>Static Property&lt;/p>
&lt;p>Like a static method, a static property is &lt;strong>shared&lt;/strong> by all instances of a class. To define static property, you use the &lt;code>static&lt;/code> keyword followed by the property name like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>class Item {
static count = 0;
}
Code language: JavaScript (javascript)
&lt;/code>&lt;/pre>&lt;p>To access a static property, you use the class name followed by the &lt;code>.&lt;/code> operator and the static property name&lt;/p>
&lt;p>To access a static property in a class constructor or instance methods, you use the following syntax:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">className&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">staticPropertyName&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//or
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">constructor&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">staticPropertyName&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>class expression&lt;/p>
&lt;p>A class expression &lt;strong>doesn’t require an identifier&lt;/strong> after the &lt;code>class&lt;/code> keyword. And you can use a class expression in a variable declaration and pass it into a function as an argument.&lt;/p>
&lt;p>For example, the following defines a class expression:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">Person&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">class&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">constructor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">getName&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Similar to function expressions, class expressions are &lt;strong>not hoisted&lt;/strong>. It means that you cannot create an instance of the class before defining the class expression.&lt;/p>
&lt;p>&lt;a class="link" href="https://www.javascripttutorial.net/javascript-functions-are-first-class-citizens/" target="_blank" rel="noopener"
>JavaScript classes are first-class citizens&lt;/a>. It means that you can pass a class into a function, return it from a function, and assign it to a variable.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>extends&lt;/code> and &lt;code>super&lt;/code> keyword&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Prior to ES6, implementing a proper inheritance required multiple steps. One of the most commonly used strategies is the prototypal inheritance.&lt;/p>
&lt;p>ES6 simplified these steps by using the &lt;code>extends&lt;/code> and &lt;code>super&lt;/code> keywords.&lt;/p>
&lt;p>First, use the &lt;code>extends&lt;/code> keyword to make the &lt;code>Bird&lt;/code> class inheriting from the &lt;code>Animal&lt;/code> class:&lt;/p>
&lt;pre tabindex="0">&lt;code>class Bird extends Animal {
// ...
}
&lt;/code>&lt;/pre>&lt;p>The &lt;code>Animal&lt;/code> class is called a &lt;strong>base class&lt;/strong> or &lt;strong>parent class&lt;/strong> while the &lt;code>Bird&lt;/code> class is known as a &lt;strong>derived class&lt;/strong> or &lt;strong>child class&lt;/strong>. By doing this, the &lt;code>Bird&lt;/code> class inherits all methods and properties of the &lt;code>Animal&lt;/code> class.&lt;/p>
&lt;p>Second, in the &lt;code>Bird&lt;/code>‘s constructor, call &lt;code>super()&lt;/code> to invoke the &lt;code>Animal&lt;/code>‘s constructor with the &lt;code>legs&lt;/code> argument.&lt;/p>
&lt;p>JavaScript &lt;strong>requires&lt;/strong> the child class to call &lt;code>super()&lt;/code> if it has a constructor.&lt;/p>
&lt;p>Because &lt;strong>the &lt;code>super()&lt;/code> initializes the &lt;code>this&lt;/code> object&lt;/strong>, you need to call the &lt;code>super()&lt;/code> before accessing the &lt;code>this&lt;/code> object. Trying to access &lt;code>this&lt;/code> before calling &lt;code>super()&lt;/code> also results in an error.&lt;/p>
&lt;p>ES6 allows the child class and parent class to have methods with the same name. In this case, when you call the method of an object of the child class, the method in the child class will &lt;strong>shadow&lt;/strong> the method in the parent class.&lt;/p>
&lt;p>To call the method of the parent class in the child class, you use &lt;code>super.method(arguments)&lt;/code>,&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>new.target&lt;/code>&lt;/p>
&lt;p>ES6 provides a &lt;strong>metaproperty&lt;/strong> named &lt;code>new.target&lt;/code> that allows you to detect whether a &lt;strong>function&lt;/strong> or &lt;strong>constructor&lt;/strong> was called using the &lt;code>new&lt;/code> operator.&lt;/p>
&lt;p>The &lt;code>new.target&lt;/code> consists of the &lt;code>new&lt;/code> keyword, a dot, and &lt;code>target&lt;/code> property. The &lt;code>new.target&lt;/code> is available in all functions.&lt;/p>
&lt;p>However, in &lt;a class="link" href="https://www.javascripttutorial.net/es6/javascript-arrow-function/" target="_blank" rel="noopener"
>arrow functions&lt;/a>, the &lt;code>new.targe&lt;/code>t is the one that belongs to &lt;strong>the surrounding function&lt;/strong>.&lt;/p>
&lt;p>The &lt;code>new.target&lt;/code> is very useful to inspect at runtime whether a function is being executed &lt;strong>as a function or as a constructor&lt;/strong>. It is also handy to determine a specific derived class that was called by using the &lt;code>new&lt;/code> operator from within a parent class.&lt;/p>
&lt;p>&lt;strong>In a regular function call, the &lt;code>new.target&lt;/code> returns &lt;code>undefined&lt;/code>.&lt;/strong> If the function was called with the &lt;code>new&lt;/code> operator, the &lt;code>new.target&lt;/code> returns &lt;strong>a reference to the function&lt;/strong>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">Person&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">target&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="s2">&amp;#34;must use new operator with Person&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="promise">Promise
&lt;/h2>&lt;p>A &lt;strong>&lt;code>Promise&lt;/code>&lt;/strong> is a proxy for a value not necessarily known when the promise is created. It allows you to associate handlers with an asynchronous action&amp;rsquo;s eventual success value or failure reason. This lets asynchronous methods return values like synchronous methods: instead of immediately returning the final value, the asynchronous method returns a &lt;em>promise&lt;/em> to supply the value at some point in the &lt;strong>future&lt;/strong>.&lt;/p>
&lt;h3 id="create">Create
&lt;/h3>&lt;p>To create a promise in JavaScript, you use the &lt;code>Promise&lt;/code> constructor:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">completed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">learnJS&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Promise&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">resolve&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">reject&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">completed&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">resolve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;I have completed learning JS.&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">reject&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;I haven&amp;#39;t completed learning JS yet.&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>Promise&lt;/code> constructor accepts a function as an argument. This function is called the &lt;code>executor&lt;/code>.&lt;/p>
&lt;p>The &lt;code>executor&lt;/code> function accepts two &lt;a class="link" href="https://www.javascripttutorial.net/javascript-callback/" target="_blank" rel="noopener"
>callback functions&lt;/a> with the names &lt;code>resolve()&lt;/code> and &lt;code>reject()&lt;/code>.&lt;/p>
&lt;p>By convention, the callback functions passed into the executor are &lt;code>resolve&lt;/code> and &lt;code>reject&lt;/code>. &lt;strong>However, you can use any names you want.&lt;/strong>&lt;/p>
&lt;p>The &lt;code>new Promise(executor)&lt;/code> will automatically call the &lt;code>executor&lt;/code> function.&lt;/p>
&lt;p>Inside the &lt;code>executor&lt;/code> function, you call the &lt;code>resolve()&lt;/code> callback if the executor in the success case and the &lt;code>reject()&lt;/code> callback in the failed case.&lt;/p>
&lt;h3 id="states">States
&lt;/h3>&lt;p>Suppose you promise to complete learning JavaScript by next month.&lt;/p>
&lt;p>And you don’t know if you will spend your time and effort learning JavaScript until next month. You can either be completing learning JavaScript or not.&lt;/p>
&lt;p>A promise has three states:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Pending&lt;/strong>: you don’t know if you will complete learning JavaScript by the next month.&lt;/li>
&lt;li>&lt;strong>Fulfilled&lt;/strong>: you complete learning JavaScript by the next month.&lt;/li>
&lt;li>&lt;strong>Rejected&lt;/strong>: you don’t learn JavaScript at all.&lt;/li>
&lt;/ul>
&lt;p>A promise starts in the pending state which indicates that the promise &lt;strong>hasn’t&lt;/strong> &lt;strong>been completed&lt;/strong>. It ends with either fulfilled (successful) or rejected (failed) state.&lt;/p>
&lt;p>Once the promise reaches either fulfilled state or rejected state, it &lt;strong>stays in that state and can’t switch&lt;/strong>.&lt;/p>
&lt;p>In other words, a promise cannot go from the &lt;code>fulfilled&lt;/code> state to the &lt;code>rejected&lt;/code> state and vice versa. Also, it cannot go back from the &lt;code>fulfilled&lt;/code> state or &lt;code>rejected&lt;/code> state to the &lt;code>pending&lt;/code> state.&lt;/p>
&lt;p>If the promise reaches &lt;code>fulfilled&lt;/code> or &lt;code>rejected&lt;/code> state, the promise is resolved. Once a new &lt;code>Promise&lt;/code> object is created, it is in the pending state until resolved.&lt;/p>
&lt;h3 id="consuming-a-promise">Consuming a promise
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;code>then()&lt;/code>&lt;/p>
&lt;p>To get the value of a promise when it’s fulfilled, you call the &lt;code>then()&lt;/code> method of the promise object. The following shows the syntax of the &lt;code>then()&lt;/code> method:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">promise&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">then&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">onFulfilled&lt;/span>&lt;span class="o">,&lt;/span>&lt;span class="nt">onRejected&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>then()&lt;/code> method accepts two callback functions: &lt;code>onFulfilled&lt;/code> and &lt;code>onRejected&lt;/code>.&lt;/p>
&lt;p>The &lt;code>then()&lt;/code> method calls the &lt;code>onFulfilled()&lt;/code> with a value, if the promise is fulfilled or the &lt;code>onRejected()&lt;/code> with an error if the promise is rejected.&lt;/p>
&lt;p>The &lt;code>then()&lt;/code> method returns a new &lt;code>Promise&lt;/code> with a value resolved to a value.&lt;/p>
&lt;p>When you return a value in the &lt;code>then()&lt;/code> method, the &lt;code>then()&lt;/code> method returns a new &lt;code>Promise&lt;/code> that &lt;strong>immediately resolves to the return value&lt;/strong>.&lt;/p>
&lt;p>Also, you can return &lt;strong>a new promise&lt;/strong> in the &lt;code>then()&lt;/code> method.&lt;/p>
&lt;blockquote>
&lt;p>Note that both &lt;code>onFulfilled&lt;/code> and &lt;code>onRejected&lt;/code> arguments are &lt;strong>optional&lt;/strong>. We usually use &lt;code>then()&lt;/code> method to schedule a callback to be executed when the promise is fulfilled&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;code>catch()&lt;/code>&lt;/p>
&lt;p>&lt;code>catch()&lt;/code> method schedule a callback to be invoked when the promise is rejected. If the &lt;code>catch()&lt;/code> method to handle the error inside the promise is not provided. It will cause a runtime error and terminate the program.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>finally()&lt;/code>&lt;/p>
&lt;p>Place the code that you want to execute in the &lt;code>finally()&lt;/code> method whether the promise is fulfilled or rejected.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="promise-chaining">Promise Chaining
&lt;/h3>&lt;p>Sometimes, you have multiple asynchronous tasks that you want to execute in sequence. In addition, you need to pass the result of the previous step to the next one. In this case, you can use the following syntax:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">step1&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">result&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">step2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">result&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">result&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">step3&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">result&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you need to pass the result from the previous task to the next one without passing the result, you use this syntax:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">step1&lt;/span>&lt;span class="o">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nc">then&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">step2&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nc">then&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">step3&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Processing continues to the next link of the chain even when a &lt;code>.then()&lt;/code> lacks a callback function that returns a Promise object. Therefore, a chain can &lt;strong>safely omit every &lt;em>rejection&lt;/em> callback function&lt;/strong> until the final &lt;code>.catch()&lt;/code>.&lt;/p>
&lt;h3 id="settled-promise">Settled Promise
&lt;/h3>&lt;p>An action can be assigned to an &lt;strong>already &amp;ldquo;settled&amp;rdquo;&lt;/strong> promise. In that case, the action (if appropriate) will be performed &lt;strong>at the first asynchronous opportunity&lt;/strong>. Note that promises are guaranteed to be asynchronous. Therefore, an action for an already &amp;ldquo;settled&amp;rdquo; promise will occur only after the stack has cleared and a clock-tick has passed. The effect is much like that of &lt;code>setTimeout(action,10)&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">promiseA&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Promise&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">resolutionFunc&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">rejectionFunc&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">resolutionFunc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">777&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// At this point, &amp;#34;promiseA&amp;#34; is already settled.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">promiseA&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">val&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;asynchronous logging has val:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">val&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;immediate logging&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// produces output in this order:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// immediate logging
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// asynchronous logging has val: 777
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="static-methods">Static methods
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all" target="_blank" rel="noopener"
>&lt;code>Promise.all(iterable)&lt;/code>&lt;/a>&lt;/p>
&lt;p>&lt;strong>Wait for all&lt;/strong> promises to be &lt;strong>resolved&lt;/strong>, or for &lt;strong>any&lt;/strong> to be &lt;strong>rejected&lt;/strong>.If the returned promise resolves, it is resolved with an aggregating array of the values from the resolved promises, &lt;strong>in the same order&lt;/strong> as defined in the iterable of multiple promises. If it rejects, it is rejected with the reason from the first promise in the iterable that was rejected.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled" target="_blank" rel="noopener"
>&lt;code>Promise.allSettled(iterable)&lt;/code>&lt;/a>&lt;/p>
&lt;p>Wait until &lt;strong>all promises have settled&lt;/strong> (each may resolve or reject).Returns a Promise that resolves after all of the given promises is either fulfilled or rejected, with an array of objects that each describe the outcome of each promise.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/any" target="_blank" rel="noopener"
>&lt;code>Promise.any(iterable)&lt;/code>&lt;/a>&lt;/p>
&lt;p>Takes an iterable of Promise objects and, &lt;strong>as soon as one of the promises in the iterable fulfills&lt;/strong>, returns a single promise that resolves with the value from that promise.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race" target="_blank" rel="noopener"
>&lt;code>Promise.race(iterable)&lt;/code>&lt;/a>&lt;/p>
&lt;p>Wait until &lt;strong>any of the promises is fulfilled or rejected&lt;/strong>.If the returned promise resolves, it is resolved with the value of the first promise in the iterable that resolved.If it rejects, it is rejected with the reason from the first promise that was rejected.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject" target="_blank" rel="noopener"
>&lt;code>Promise.reject(reason)&lt;/code>&lt;/a>&lt;/p>
&lt;p>Returns a new &lt;code>Promise&lt;/code> object that &lt;strong>is rejected&lt;/strong> with the given reason.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve" target="_blank" rel="noopener"
>&lt;code>Promise.resolve(value)&lt;/code>&lt;/a>&lt;/p>
&lt;p>Returns a new &lt;code>Promise&lt;/code> object that &lt;strong>is resolved with the given value&lt;/strong>. If the value is a thenable (i.e. has a &lt;code>then&lt;/code> method), the returned promise will &amp;ldquo;follow&amp;rdquo; that thenable, adopting its eventual state; otherwise, the returned promise will be fulfilled with the value. Generally, if you don&amp;rsquo;t know if a value is a promise or not, &lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve" target="_blank" rel="noopener"
>&lt;code>Promise.resolve(value)&lt;/code>&lt;/a> it instead and work with the return value as a promise.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="asyncawait">&lt;code>async/await&lt;/code>
&lt;/h3>&lt;p>ES2017 introduced the &lt;code>async&lt;/code>/&lt;code>await&lt;/code> keywords that &lt;strong>build on top of promises&lt;/strong>, allowing you to write asynchronous code that looks more like synchronous code and more readable. Technically speaking, the &lt;code>async&lt;/code> / &lt;code>await&lt;/code> is &lt;strong>syntactic sugar for promises&lt;/strong>.&lt;/p>
&lt;p>If a function &lt;strong>returns a Promise&lt;/strong>, you can place the &lt;code>await&lt;/code> keyword in front of the function call. The &lt;code>await&lt;/code> keyword to wait for a &lt;code>Promise&lt;/code> to settle either in resolved or rejected state.&lt;/p>
&lt;p>The &lt;code>await&lt;/code> will wait for the &lt;code>Promise&lt;/code> returned from the &lt;code>f()&lt;/code> to settle.&lt;/p>
&lt;blockquote>
&lt;p>The &lt;code>await&lt;/code> keyword can be used only inside the &lt;code>async&lt;/code> functions.&lt;/p>
&lt;/blockquote>
&lt;p>The following defines an &lt;code>async&lt;/code> function that calls the three asynchronous operations in sequence:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">async&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">showServiceCost&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">getUser&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">services&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">getServices&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">cost&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">getServiceCost&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">services&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`The service cost is &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">cost&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">showServiceCost&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>【CSS】Basics</title><link>https://dyhes.github.io/p/cssbasics/</link><pubDate>Sat, 17 Apr 2021 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/cssbasics/</guid><description>&lt;p>CSS stands for Cascading Style Sheets&lt;/p>
&lt;h2 id="comment">Comment
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="c">/* comment */&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="how-to-use">How to use
&lt;/h2>&lt;ul>
&lt;li>External&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">link&lt;/span> &lt;span class="na">rel&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;stylesheet&amp;#34;&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;mystyle.css&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Internal&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Inline&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">link&lt;/span> &lt;span class="na">rel&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;stylesheet&amp;#34;&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;mystyle.css&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If some properties have been defined for the same selector (element) in different style sheets, the value from &lt;strong>the last read&lt;/strong> style sheet will be used.&lt;/p>
&lt;p>All the styles in a page will &amp;ldquo;cascade&amp;rdquo; into a new &amp;ldquo;virtual&amp;rdquo; style sheet by the following rules, where number one has the highest priority:&lt;/p>
&lt;ol>
&lt;li>Inline style (inside an HTML element)&lt;/li>
&lt;li>External and internal style sheets (in the head section)&lt;/li>
&lt;li>Browser default&lt;/li>
&lt;/ol>
&lt;p>So, an inline style has the highest priority, and will override external and internal styles and browser defaults.&lt;/p>
&lt;h2 id="selector">Selector
&lt;/h2>&lt;ul>
&lt;li>Simple selectors (select elements based on name, id, class)&lt;/li>
&lt;li>&lt;a class="link" href="https://www.w3schools.com/css/css_combinators.asp" target="_blank" rel="noopener"
>Combinator selectors&lt;/a> (select elements based on a specific relationship between them)&lt;/li>
&lt;li>&lt;a class="link" href="https://www.w3schools.com/css/css_pseudo_classes.asp" target="_blank" rel="noopener"
>Pseudo-class selectors&lt;/a> (select elements based on a certain state)&lt;/li>
&lt;li>&lt;a class="link" href="https://www.w3schools.com/css/css_pseudo_elements.asp" target="_blank" rel="noopener"
>Pseudo-elements selectors&lt;/a> (select and style a part of an element)&lt;/li>
&lt;li>&lt;a class="link" href="https://www.w3schools.com/css/css_attribute_selectors.asp" target="_blank" rel="noopener"
>Attribute selectors&lt;/a> (select elements based on an attribute or attribute value)&lt;/li>
&lt;/ul>
&lt;h3 id="simple-selector">Simple Selector
&lt;/h3>&lt;ul>
&lt;li>element selector&lt;/li>
&lt;li>id selector&lt;/li>
&lt;li>class selector&lt;/li>
&lt;/ul>
&lt;h3 id="combinator-selector">Combinator Selector
&lt;/h3>&lt;ul>
&lt;li>descendant selector (space) ：matches all elements that are &lt;strong>descendants&lt;/strong> of a specified element&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">div&lt;/span> &lt;span class="nt">p&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">yellow&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>child selector (&amp;gt;) ：selects all elements that are the &lt;strong>children&lt;/strong> of a specified element.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">div&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nt">p&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">yellow&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>adjacent sibling selector (+) : select an element that is &lt;strong>directly after&lt;/strong> another specific element.:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">div&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nt">p&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">yellow&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>general sibling selector (~) : selects &lt;strong>all&lt;/strong> elements that are &lt;strong>next siblings&lt;/strong> of a specified element.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">div&lt;/span> &lt;span class="o">~&lt;/span> &lt;span class="nt">p&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">yellow&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="pseudo-classes-selector">Pseudo-classes Selector
&lt;/h3>&lt;p>A pseudo-class is used to define a &lt;strong>special state&lt;/strong> of an element.&lt;/p>
&lt;h4 id="syntax">syntax
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nd">pseudo-class&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">property&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="anchor-pseudo-classes-order">Anchor pseudo-classes order
&lt;/h4>&lt;ul>
&lt;li>:link (unvisited)&lt;/li>
&lt;li>:visited&lt;/li>
&lt;li>:hover&lt;/li>
&lt;li>:active (clicked)&lt;/li>
&lt;/ul>
&lt;h4 id="first-child">:first-child
&lt;/h4>&lt;p>The &lt;code>:first-child&lt;/code> pseudo-class matches a specified element that is the first child of another element.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">p&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nd">first-child&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">blue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span>&lt;span class="nt">first&lt;/span> &lt;span class="nt">i&lt;/span> &lt;span class="nt">in&lt;/span> &lt;span class="nt">p&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">p&lt;/span> &lt;span class="nt">i&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nd">first-child&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">blue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">//&lt;/span>&lt;span class="nt">all&lt;/span> &lt;span class="nt">i&lt;/span> &lt;span class="nt">in&lt;/span> &lt;span class="nt">first&lt;/span> &lt;span class="nt">p&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">p&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nd">first-child&lt;/span> &lt;span class="nt">i&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="lang">:lang
&lt;/h4>&lt;p>The &lt;code>:lang&lt;/code> pseudo-class allows you to define special rules for different languages.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vue" data-lang="vue">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">Some&lt;/span> &lt;span class="nx">text&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">q&lt;/span> &lt;span class="na">lang&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;no&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="nx">A&lt;/span> &lt;span class="nx">quote&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="nx">paragraph&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">q&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="nx">Some&lt;/span> &lt;span class="nx">text&lt;/span>&lt;span class="p">.&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">q&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="nx">lang&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">no&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">quotes&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;~&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;~&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">style&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="all-pseudo-classes">all pseudo classes
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">Selector&lt;/th>
&lt;th style="text-align: left">Example&lt;/th>
&lt;th style="text-align: left">Example description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/cssref/sel_active.asp" target="_blank" rel="noopener"
>:active&lt;/a>&lt;/td>
&lt;td style="text-align: left">a:active&lt;/td>
&lt;td style="text-align: left">Selects the active link&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/cssref/sel_checked.asp" target="_blank" rel="noopener"
>:checked&lt;/a>&lt;/td>
&lt;td style="text-align: left">input:checked&lt;/td>
&lt;td style="text-align: left">Selects every checked &lt;input> element&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/cssref/sel_disabled.asp" target="_blank" rel="noopener"
>:disabled&lt;/a>&lt;/td>
&lt;td style="text-align: left">input:disabled&lt;/td>
&lt;td style="text-align: left">Selects every disabled &lt;input> element&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/cssref/sel_empty.asp" target="_blank" rel="noopener"
>:empty&lt;/a>&lt;/td>
&lt;td style="text-align: left">p:empty&lt;/td>
&lt;td style="text-align: left">Selects every &lt;p> element that has no children&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/cssref/sel_enabled.asp" target="_blank" rel="noopener"
>:enabled&lt;/a>&lt;/td>
&lt;td style="text-align: left">input:enabled&lt;/td>
&lt;td style="text-align: left">Selects every enabled &lt;input> element&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/cssref/sel_firstchild.asp" target="_blank" rel="noopener"
>:first-child&lt;/a>&lt;/td>
&lt;td style="text-align: left">p:first-child&lt;/td>
&lt;td style="text-align: left">Selects every &lt;p> elements that is the first child of its parent&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/cssref/sel_first-of-type.asp" target="_blank" rel="noopener"
>:first-of-type&lt;/a>&lt;/td>
&lt;td style="text-align: left">p:first-of-type&lt;/td>
&lt;td style="text-align: left">Selects every &lt;p> element that is the first &lt;p> element of its parent&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/cssref/sel_focus.asp" target="_blank" rel="noopener"
>:focus&lt;/a>&lt;/td>
&lt;td style="text-align: left">input:focus&lt;/td>
&lt;td style="text-align: left">Selects the &lt;input> element that has focus&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/cssref/sel_hover.asp" target="_blank" rel="noopener"
>:hover&lt;/a>&lt;/td>
&lt;td style="text-align: left">a:hover&lt;/td>
&lt;td style="text-align: left">Selects links on mouse over&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/cssref/sel_in-range.asp" target="_blank" rel="noopener"
>:in-range&lt;/a>&lt;/td>
&lt;td style="text-align: left">input:in-range&lt;/td>
&lt;td style="text-align: left">Selects &lt;input> elements with a value within a specified range&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/cssref/sel_invalid.asp" target="_blank" rel="noopener"
>:invalid&lt;/a>&lt;/td>
&lt;td style="text-align: left">input:invalid&lt;/td>
&lt;td style="text-align: left">Selects all &lt;input> elements with an invalid value&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/cssref/sel_lang.asp" target="_blank" rel="noopener"
>:lang(&lt;em>language&lt;/em>)&lt;/a>&lt;/td>
&lt;td style="text-align: left">p:lang(it)&lt;/td>
&lt;td style="text-align: left">Selects every &lt;p> element with a lang attribute value starting with &amp;ldquo;it&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/cssref/sel_last-child.asp" target="_blank" rel="noopener"
>:last-child&lt;/a>&lt;/td>
&lt;td style="text-align: left">p:last-child&lt;/td>
&lt;td style="text-align: left">Selects every &lt;p> elements that is the last child of its parent&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/cssref/sel_last-of-type.asp" target="_blank" rel="noopener"
>:last-of-type&lt;/a>&lt;/td>
&lt;td style="text-align: left">p:last-of-type&lt;/td>
&lt;td style="text-align: left">Selects every &lt;p> element that is the last &lt;p> element of its parent&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/cssref/sel_link.asp" target="_blank" rel="noopener"
>:link&lt;/a>&lt;/td>
&lt;td style="text-align: left">a:link&lt;/td>
&lt;td style="text-align: left">Selects all unvisited links&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/cssref/sel_not.asp" target="_blank" rel="noopener"
>:not(selector)&lt;/a>&lt;/td>
&lt;td style="text-align: left">:not(p)&lt;/td>
&lt;td style="text-align: left">Selects every element that is not a &lt;p> element&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/cssref/sel_nth-child.asp" target="_blank" rel="noopener"
>:nth-child(n)&lt;/a>&lt;/td>
&lt;td style="text-align: left">p:nth-child(2)&lt;/td>
&lt;td style="text-align: left">Selects every &lt;p> element that is the second child of its parent&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/cssref/sel_nth-last-child.asp" target="_blank" rel="noopener"
>:nth-last-child(n)&lt;/a>&lt;/td>
&lt;td style="text-align: left">p:nth-last-child(2)&lt;/td>
&lt;td style="text-align: left">Selects every &lt;p> element that is the second child of its parent, counting from the last child&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/cssref/sel_nth-last-of-type.asp" target="_blank" rel="noopener"
>:nth-last-of-type(n)&lt;/a>&lt;/td>
&lt;td style="text-align: left">p:nth-last-of-type(2)&lt;/td>
&lt;td style="text-align: left">Selects every &lt;p> element that is the second &lt;p> element of its parent, counting from the last child&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/cssref/sel_nth-of-type.asp" target="_blank" rel="noopener"
>:nth-of-type(n)&lt;/a>&lt;/td>
&lt;td style="text-align: left">p:nth-of-type(2)&lt;/td>
&lt;td style="text-align: left">Selects every &lt;p> element that is the second &lt;p> element of its parent&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/cssref/sel_only-of-type.asp" target="_blank" rel="noopener"
>:only-of-type&lt;/a>&lt;/td>
&lt;td style="text-align: left">p:only-of-type&lt;/td>
&lt;td style="text-align: left">Selects every &lt;p> element that is the only &lt;p> element of its parent&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/cssref/sel_only-child.asp" target="_blank" rel="noopener"
>:only-child&lt;/a>&lt;/td>
&lt;td style="text-align: left">p:only-child&lt;/td>
&lt;td style="text-align: left">Selects every &lt;p> element that is the only child of its parent&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/cssref/sel_optional.asp" target="_blank" rel="noopener"
>:optional&lt;/a>&lt;/td>
&lt;td style="text-align: left">input:optional&lt;/td>
&lt;td style="text-align: left">Selects &lt;input> elements with no &amp;ldquo;required&amp;rdquo; attribute&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/cssref/sel_out-of-range.asp" target="_blank" rel="noopener"
>:out-of-range&lt;/a>&lt;/td>
&lt;td style="text-align: left">input:out-of-range&lt;/td>
&lt;td style="text-align: left">Selects &lt;input> elements with a value outside a specified range&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/cssref/sel_read-only.asp" target="_blank" rel="noopener"
>:read-only&lt;/a>&lt;/td>
&lt;td style="text-align: left">input:read-only&lt;/td>
&lt;td style="text-align: left">Selects &lt;input> elements with a &amp;ldquo;readonly&amp;rdquo; attribute specified&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/cssref/sel_read-write.asp" target="_blank" rel="noopener"
>:read-write&lt;/a>&lt;/td>
&lt;td style="text-align: left">input:read-write&lt;/td>
&lt;td style="text-align: left">Selects &lt;input> elements with no &amp;ldquo;readonly&amp;rdquo; attribute&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/cssref/sel_required.asp" target="_blank" rel="noopener"
>:required&lt;/a>&lt;/td>
&lt;td style="text-align: left">input:required&lt;/td>
&lt;td style="text-align: left">Selects &lt;input> elements with a &amp;ldquo;required&amp;rdquo; attribute specified&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/cssref/sel_root.asp" target="_blank" rel="noopener"
>:root&lt;/a>&lt;/td>
&lt;td style="text-align: left">root&lt;/td>
&lt;td style="text-align: left">Selects the document&amp;rsquo;s root element&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/cssref/sel_target.asp" target="_blank" rel="noopener"
>:target&lt;/a>&lt;/td>
&lt;td style="text-align: left">#news:target&lt;/td>
&lt;td style="text-align: left">Selects the current active #news element (clicked on a URL containing that anchor name)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/cssref/sel_valid.asp" target="_blank" rel="noopener"
>:valid&lt;/a>&lt;/td>
&lt;td style="text-align: left">input:valid&lt;/td>
&lt;td style="text-align: left">Selects all &lt;input> elements with a valid value&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/cssref/sel_visited.asp" target="_blank" rel="noopener"
>:visited&lt;/a>&lt;/td>
&lt;td style="text-align: left">a:visited&lt;/td>
&lt;td style="text-align: left">Selects all visited links&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="pseudo-element-selector">Pseudo-element Selector
&lt;/h3>&lt;p>A CSS pseudo-element is used to style &lt;strong>specified parts&lt;/strong> of an element.&lt;/p>
&lt;h4 id="syntax-1">syntax
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">selector&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="nd">pseudo-element&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">property&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="first-line">::first-line
&lt;/h4>&lt;p>&lt;strong>Note:&lt;/strong> The &lt;code>::first-line&lt;/code> pseudo-element can only be applied to &lt;strong>block-level elements&lt;/strong>.&lt;/p>
&lt;p>The following properties apply to the &lt;code>::first-line&lt;/code> pseudo-element:&lt;/p>
&lt;ul>
&lt;li>font properties&lt;/li>
&lt;li>color properties&lt;/li>
&lt;li>background properties&lt;/li>
&lt;li>word-spacing&lt;/li>
&lt;li>letter-spacing&lt;/li>
&lt;li>text-decoration&lt;/li>
&lt;li>vertical-align&lt;/li>
&lt;li>text-transform&lt;/li>
&lt;li>line-height&lt;/li>
&lt;li>clear&lt;/li>
&lt;/ul>
&lt;h4 id="first-letter">::first-letter
&lt;/h4>&lt;p>&lt;strong>Note:&lt;/strong> The &lt;code>::first-letter&lt;/code> pseudo-element can only be applied to block-level elements.&lt;/p>
&lt;p>The following properties apply to the ::first-letter pseudo- element:&lt;/p>
&lt;ul>
&lt;li>font properties&lt;/li>
&lt;li>color properties&lt;/li>
&lt;li>background properties&lt;/li>
&lt;li>margin properties&lt;/li>
&lt;li>padding properties&lt;/li>
&lt;li>border properties&lt;/li>
&lt;li>text-decoration&lt;/li>
&lt;li>vertical-align (only if &amp;ldquo;float&amp;rdquo; is &amp;ldquo;none&amp;rdquo;)&lt;/li>
&lt;li>text-transform&lt;/li>
&lt;li>line-height&lt;/li>
&lt;li>float&lt;/li>
&lt;li>clear&lt;/li>
&lt;/ul>
&lt;h4 id="before-and-after">::before and ::after
&lt;/h4>&lt;p>The &lt;code>::before&lt;/code> and &lt;code>::after&lt;/code> pseudo-element can be used to insert some content before the content of an element.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">h1&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="nd">before&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">content&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">url&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sx">smiley.gif&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="all-pseudo-elements">all pseudo elements
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">Selector&lt;/th>
&lt;th style="text-align: left">Example&lt;/th>
&lt;th style="text-align: left">Example description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/cssref/sel_after.asp" target="_blank" rel="noopener"
>::after&lt;/a>&lt;/td>
&lt;td style="text-align: left">p::after&lt;/td>
&lt;td style="text-align: left">Insert something after the content of each &lt;p> element&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/cssref/sel_before.asp" target="_blank" rel="noopener"
>::before&lt;/a>&lt;/td>
&lt;td style="text-align: left">p::before&lt;/td>
&lt;td style="text-align: left">Insert something before the content of each &lt;p> element&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/cssref/sel_firstletter.asp" target="_blank" rel="noopener"
>::first-letter&lt;/a>&lt;/td>
&lt;td style="text-align: left">p::first-letter&lt;/td>
&lt;td style="text-align: left">Selects the first letter of each &lt;p> element&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/cssref/sel_firstline.asp" target="_blank" rel="noopener"
>::first-line&lt;/a>&lt;/td>
&lt;td style="text-align: left">p::first-line&lt;/td>
&lt;td style="text-align: left">Selects the first line of each &lt;p> element&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/cssref/sel_marker.asp" target="_blank" rel="noopener"
>::marker&lt;/a>&lt;/td>
&lt;td style="text-align: left">::marker&lt;/td>
&lt;td style="text-align: left">Selects the markers of list items&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/cssref/sel_selection.asp" target="_blank" rel="noopener"
>::selection&lt;/a>&lt;/td>
&lt;td style="text-align: left">p::selection&lt;/td>
&lt;td style="text-align: left">Selects the portion of an element that is &lt;strong>selected by a user&lt;/strong>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="attribute-selector">Attribute Selector
&lt;/h3>&lt;h4 id="attribute-selector-1">[attribute] Selector
&lt;/h4>&lt;p>The &lt;code>[attribute]&lt;/code> selector is used to select elements with a specified attribute.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="nt">target&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">yellow&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="attributevalue-selector-等于">[attribute=&amp;ldquo;value&amp;rdquo;] Selector （等于）
&lt;/h4>&lt;p>The &lt;code>[attribute=&amp;quot;value&amp;quot;]&lt;/code> selector is used to select elements with a specified attribute and value.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">a&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="nt">target&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;_blank&amp;#34;&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">yellow&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="attributevalue-selector限制包含">[attribute~=&amp;ldquo;value&amp;rdquo;] Selector（限制包含）
&lt;/h4>&lt;p>The &lt;code>[attribute~=&amp;quot;value&amp;quot;]&lt;/code> selector is used to select elements with an attribute value &lt;strong>containing a specified word.&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="o">~=&lt;/span>&lt;span class="s2">&amp;#34;flower&amp;#34;&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">border&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="kc">solid&lt;/span> &lt;span class="kc">yellow&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The example above will match elements with title=&amp;ldquo;flower&amp;rdquo;, title=&amp;ldquo;summer flower&amp;rdquo;, and title=&amp;ldquo;flower new&amp;rdquo;, but not title=&amp;ldquo;my-flower&amp;rdquo; or title=&amp;ldquo;flowers&amp;rdquo;.&lt;/p>
&lt;h4 id="attributevalue-selector包含">[attribute*=&amp;ldquo;value&amp;rdquo;] Selector（包含）
&lt;/h4>&lt;p>The &lt;code>[attribute*=&amp;quot;value&amp;quot;]&lt;/code> selector is used to select elements whose attribute value contains a specified value.&lt;/p>
&lt;p>The following example selects all elements with a class attribute value that contains &amp;ldquo;te&amp;rdquo;:&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> The value does not have to be a whole word!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>&lt;span class="nt">class&lt;/span>&lt;span class="o">*=&lt;/span>&lt;span class="s2">&amp;#34;te&amp;#34;&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">background&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">yellow&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="attributevalue-selector限制开始">[attribute|=&amp;ldquo;value&amp;rdquo;] Selector（限制开始）
&lt;/h4>&lt;p>The &lt;code>[attribute|=&amp;quot;value&amp;quot;]&lt;/code> selector is used to select elements with the specified attribute, whose value can be exactly the specified value, or the specified value followed by a hyphen (-).&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> The value has to be a whole word, either alone, like class=&amp;ldquo;top&amp;rdquo;, or followed by a hyphen( - ), like class=&amp;ldquo;top-text&amp;rdquo;.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>&lt;span class="nt">class&lt;/span>&lt;span class="o">|=&lt;/span>&lt;span class="s2">&amp;#34;top&amp;#34;&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">background&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">yellow&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="attributevalue-selector开始">[attribute^=&amp;ldquo;value&amp;rdquo;] Selector（开始）
&lt;/h4>&lt;p>The &lt;code>[attribute^=&amp;quot;value&amp;quot;]&lt;/code> selector is used to select elements with the specified attribute, whose value starts with the specified value.&lt;/p>
&lt;p>The following example selects all elements with a class attribute value that starts with &amp;ldquo;top&amp;rdquo;:&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> The value does not have to be a whole word!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>&lt;span class="nt">class&lt;/span>&lt;span class="o">^=&lt;/span>&lt;span class="s2">&amp;#34;test&amp;#34;&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">background&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">yellow&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="attributevalue-selector结束">[attribute$=&amp;ldquo;value&amp;rdquo;] Selector（结束）
&lt;/h4>&lt;p>The &lt;code>[attribute$=&amp;quot;value&amp;quot;]&lt;/code> selector is used to select elements whose attribute value ends with a specified value.&lt;/p>
&lt;p>The following example selects all elements with a class attribute value that ends with &amp;ldquo;test&amp;rdquo;:&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> The value does not have to be a whole word!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>&lt;span class="nt">class&lt;/span>&lt;span class="o">$=&lt;/span>&lt;span class="s2">&amp;#34;test&amp;#34;&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">background&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">yellow&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="special-selector">Special Selector
&lt;/h3>&lt;h4 id="universal-selector">Universal Selector
&lt;/h4>&lt;p>The universal selector (*) selects all HTML elements on the page.&lt;/p>
&lt;h4 id="grouping-selector">Grouping Selector
&lt;/h4>&lt;p>The universal selector (*) selects all HTML elements on the page.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">h1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">h2&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">p&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">text-align&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">center&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">red&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="specificity">Specificity
&lt;/h3>&lt;p>If there are two or more CSS rules that point to the same element, the selector with the highest specificity value will &amp;ldquo;win&amp;rdquo;, and its style declaration will be applied to that HTML element.&lt;/p>
&lt;p>Every CSS selector has its place in the specificity hierarchy.&lt;/p>
&lt;p>There are four categories which define the specificity level of a selector:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Inline styles&lt;/strong> (1000)- Example: &lt;h1 style="color: pink;">&lt;/li>
&lt;li>&lt;strong>IDs&lt;/strong> (100) - Example: #navbar&lt;/li>
&lt;li>&lt;strong>Classes, pseudo-classes, attribute selectors&lt;/strong> (10) - Example: .test, :hover, [href]&lt;/li>
&lt;li>&lt;strong>Elements and pseudo-elements&lt;/strong> (1 ) - Example: h1, ::before&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;strong>Equal specificity: the latest rule wins&lt;/strong>&lt;/p>
&lt;p>&lt;strong>The universal selector (*) and inherited values have a specificity of 0&lt;/strong> - The universal selector (*) and inherited values are ignored!&lt;/p>
&lt;/blockquote>
&lt;h4 id="important">！important
&lt;/h4>&lt;p>if you use the &lt;code>!important&lt;/code> rule, it will override ALL previous styling rules for that specific property on that element!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="p">#&lt;/span>&lt;span class="nn">myid&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">blue&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="nc">myclass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">gray&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">p&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">red&lt;/span> &lt;span class="cp">!important&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The only way to override an &lt;code>!important&lt;/code> rule is to include another &lt;code>!important&lt;/code> rule on a declaration with the same (or higher) specificity in the source code - and here the problem starts! This makes the CSS code confusing and the debugging will be hard, especially if you have a large style sheet!&lt;/p>
&lt;blockquote>
&lt;p>do not use it unless you absolutely have to.&lt;/p>
&lt;/blockquote>
&lt;h2 id="colors">Colors
&lt;/h2>&lt;h3 id="type">type
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>background color&lt;/p>
&lt;ul>
&lt;li>&lt;code>background-color&lt;/code>&lt;/li>
&lt;li>&lt;code>background&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>text color&lt;/p>
&lt;ul>
&lt;li>&lt;code>color&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>border color&lt;/p>
&lt;ul>
&lt;li>&lt;code>border&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="value">value
&lt;/h3>&lt;h4 id="rgb">RGB
&lt;/h4>&lt;p>&lt;strong>rgb(red,green, blue)&lt;/strong>&lt;/p>
&lt;p>Each parameter (red, green, and blue) defines the intensity of the color between 0 and 255.&lt;/p>
&lt;h5 id="rgba">RGBA
&lt;/h5>&lt;p>&lt;strong>rgba(red,green,blue, alpha)&lt;/strong>&lt;/p>
&lt;p>The alpha parameter is a number between 0.0 (fully transparent) and 1.0 (not transparent at all)&lt;/p>
&lt;h4 id="hex">HEX
&lt;/h4>&lt;p>A hexadecimal color is specified with: #RRGGBB, where the RR (red), GG (green) and BB (blue) hexadecimal integers specify the components of the color.&lt;/p>
&lt;p>In CSS, a color can be specified using a hexadecimal value in the form:&lt;/p>
&lt;p>&lt;strong>#rrggbb&lt;/strong>&lt;/p>
&lt;p>Where rr (red), gg (green) and bb (blue) are hexadecimal values between 00 and ff (same as decimal 0-255).&lt;/p>
&lt;h4 id="hsl">HSL
&lt;/h4>&lt;p>In CSS, a color can be specified using hue, saturation, and lightness (HSL) in the form:&lt;/p>
&lt;p>&lt;strong>hsl(&lt;em>hue&lt;/em>, &lt;em>saturation&lt;/em>, &lt;em>lightness&lt;/em>)&lt;/strong>&lt;/p>
&lt;p>Hue is a degree on the color wheel from 0 to 360. 0 is red, 120 is green, and 240 is blue.&lt;/p>
&lt;p>Saturation is a percentage value, 0% means a shade of gray, and 100% is the full color.&lt;/p>
&lt;p>Lightness is also a percentage, 0% is black, 50% is neither light or dark, 100% is white&lt;/p>
&lt;h5 id="hsla">HSLA
&lt;/h5>&lt;p>&lt;strong>hsla(&lt;em>hue,&lt;/em> &lt;em>saturation&lt;/em>, &lt;em>lightness, alpha&lt;/em>)&lt;/strong>&lt;/p>
&lt;p>The alpha parameter is a number between 0.0 (fully transparent) and 1.0 (not transparent at all)&lt;/p>
&lt;h3 id="keyword">Keyword
&lt;/h3>&lt;ul>
&lt;li>&lt;code>transparent&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>equal to rgba(0,0,0,0)&lt;/p>
&lt;ul>
&lt;li>&lt;code>currentcolor&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>is like a variable that holds the current value of the color property of an element.&lt;/p>
&lt;h3 id="opacity">Opacity
&lt;/h3>&lt;p>The alpha parameter is a number between 0.0 (fully transparent) and 1.0 (not transparent at all)&lt;/p>
&lt;h3 id="gradients">Gradients
&lt;/h3>&lt;p>CSS defines three types of gradients:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Linear Gradients (goes down/up/left/right/diagonally)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>background-image: (repeating)-linear-gradient(&lt;em>direction&lt;/em>/angle, &lt;em>color-stop1&lt;/em>, &lt;em>color-stop2, &amp;hellip;&lt;/em>);&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>Radial Gradients (defined by their center)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>background-image: (repeating)-radial-gradient(&lt;em>shape size&lt;/em> at &lt;em>position, start-color, &amp;hellip;, last-color&lt;/em>);&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>Conic Gradients (rotated around a center point)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>background-image: (repeating)-radial-gradient(&lt;em>shape size&lt;/em> at &lt;em>position, start-color, &amp;hellip;, last-color&lt;/em>);&lt;/p>
&lt;/blockquote>
&lt;h2 id="background">Background
&lt;/h2>&lt;h3 id="background-color">&lt;code>background-color&lt;/code>
&lt;/h3>&lt;p>explained before&lt;/p>
&lt;h3 id="background-image">&lt;code>background-image&lt;/code>
&lt;/h3>&lt;p>By default, the image is repeated so it covers the entire element.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">body&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">background-image&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">url&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;paper.gif&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="background-repeat">&lt;code>background-repeat&lt;/code>
&lt;/h4>&lt;p>By default, the &lt;code>background-image&lt;/code> property repeats an image both horizontally and vertically.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">body&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">background-image&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">url&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;gradient_bg.png&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">background-repeat&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nf">repeat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">default&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">repeat-x&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">repeat-y&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">no-repeat&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">space&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">round&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">initial&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">inherit&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="background-position">&lt;code>background-position&lt;/code>
&lt;/h4>&lt;p>The &lt;code>background-position&lt;/code> property is used to specify the position of the background image.&lt;/p>
&lt;h4 id="background-attachment">&lt;code>background-attachment&lt;/code>
&lt;/h4>&lt;p>The &lt;code>background-attachment&lt;/code> property specifies whether the background image should scroll or be fixed (will not scroll with the rest of the page)&lt;/p>
&lt;h3 id="background-1">&lt;code>background&lt;/code>
&lt;/h3>&lt;p>shorthand property for above properties&lt;/p>
&lt;h2 id="box-model">Box Model
&lt;/h2>&lt;p>&lt;img src="https://www.runoob.com/images/box-model.gif"
loading="lazy"
alt="CSS box-model"
>&lt;/p>
&lt;p>Explanation of the different parts:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Content&lt;/strong> - The content of the box, where text and images appear&lt;/li>
&lt;li>&lt;strong>Padding&lt;/strong> - Clears an area around the content. The padding is &lt;strong>transparent&lt;/strong>&lt;/li>
&lt;li>&lt;strong>Border&lt;/strong> - A border that goes around the padding and content&lt;/li>
&lt;li>&lt;strong>Margin&lt;/strong> - Clears an area outside the border. The margin is &lt;strong>transparent&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="padding">Padding
&lt;/h2>&lt;p>Padding is used to create space around an element&amp;rsquo;s content, inside of any defined borders.&lt;/p>
&lt;p>CSS has properties for specifying the padding for each side of an element:&lt;/p>
&lt;ul>
&lt;li>&lt;code>padding-top&lt;/code>&lt;/li>
&lt;li>&lt;code>padding-right&lt;/code>&lt;/li>
&lt;li>&lt;code>padding-bottom&lt;/code>&lt;/li>
&lt;li>&lt;code>padding-left&lt;/code>&lt;/li>
&lt;li>&lt;code>padding&lt;/code>(shorthand)&lt;/li>
&lt;/ul>
&lt;p>All the padding properties can have the following values:&lt;/p>
&lt;ul>
&lt;li>&lt;em>length&lt;/em> - specifies a padding in px, pt, cm, etc.&lt;/li>
&lt;li>&lt;em>%&lt;/em> - specifies a padding in % of the width of the containing element&lt;/li>
&lt;li>inherit - specifies that the padding should be inherited from the parent element&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note:&lt;/strong> Negative values are &lt;strong>not allowed.&lt;/strong>&lt;/p>
&lt;p>If the &lt;code>padding&lt;/code> property has three values:&lt;/p>
&lt;ul>
&lt;li>padding: 25px 50px 75px;
&lt;ul>
&lt;li>top padding is 25px&lt;/li>
&lt;li>right and left paddings are 50px&lt;/li>
&lt;li>bottom padding is 75px&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="border">Border
&lt;/h2>&lt;p>The CSS border properties allow you to specify the style, width, and color of an element&amp;rsquo;s border.&lt;/p>
&lt;ul>
&lt;li>&lt;code>border-style&lt;/code>&lt;/li>
&lt;li>&lt;code>border-width&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>The width can be set as a specific size (in px, pt, cm, em, etc) or by using one of the three pre-defined values: thin, medium, or thick&lt;/p>
&lt;p>The &lt;code>border-width&lt;/code> property can have from one to four values (for the top border, right border, bottom border, and the left border)&lt;/p>
&lt;ul>
&lt;li>&lt;code>border-color&lt;/code>&lt;/li>
&lt;li>&lt;code>border&lt;/code>(shorthand)&lt;/li>
&lt;/ul>
&lt;p>the &lt;code>border-style&lt;/code> is required&lt;/p>
&lt;ul>
&lt;li>&lt;code>border-image&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>you can set an image to be used as the border around an element.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Tip:&lt;/strong> The &lt;code>border-image&lt;/code> property is actually a shorthand property for the &lt;code>border-image-source&lt;/code>, &lt;code>border-image-slice&lt;/code>, &lt;code>border-image-width&lt;/code>, &lt;code>border-image-outset&lt;/code> and &lt;code>border-image-repeat&lt;/code> properties.&lt;/p>
&lt;/blockquote>
&lt;h3 id="side-specific">Side-Specific
&lt;/h3>&lt;p>&lt;code>border-(side)-(value)&lt;/code>&lt;/p>
&lt;h3 id="rounded">Rounded
&lt;/h3>&lt;p>With the CSS &lt;code>border-radius&lt;/code> property, you can give any element &amp;ldquo;rounded corners&amp;rdquo;.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Tip:&lt;/strong> The &lt;code>border-radius&lt;/code> property is actually a shorthand property for the &lt;code>border-top-left-radius&lt;/code>, &lt;code>border-top-right-radius&lt;/code>, &lt;code>border-bottom-right-radius&lt;/code> and &lt;code>border-bottom-left-radius&lt;/code> properties&lt;/p>
&lt;/blockquote>
&lt;h2 id="margins">Margins
&lt;/h2>&lt;p>Margins are used to create space around elements, &lt;strong>outside&lt;/strong> of any defined borders.&lt;/p>
&lt;ul>
&lt;li>&lt;code>margin-top&lt;/code>&lt;/li>
&lt;li>&lt;code>margin-right&lt;/code>&lt;/li>
&lt;li>&lt;code>margin-bottom&lt;/code>&lt;/li>
&lt;li>&lt;code>margin-left&lt;/code>&lt;/li>
&lt;li>&lt;code>margin&lt;/code> (shorthand)&lt;/li>
&lt;/ul>
&lt;p>All the margin properties can have the following values:&lt;/p>
&lt;ul>
&lt;li>auto - the browser calculates the margin&lt;/li>
&lt;li>&lt;em>length&lt;/em> - specifies a margin in px, pt, cm, etc.&lt;/li>
&lt;li>&lt;em>%&lt;/em> - specifies a margin in % of the width of the containing element&lt;/li>
&lt;li>inherit - specifies that the margin should be inherited from the parent element&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Tip:&lt;/strong> Negative values are allowed.&lt;/p>
&lt;p>If the &lt;code>margin&lt;/code> property has three values:&lt;/p>
&lt;ul>
&lt;li>margin: 25px 50px 75px;
&lt;ul>
&lt;li>top margin is 25px&lt;/li>
&lt;li>right and left margins are 50px&lt;/li>
&lt;li>bottom margin is 75px&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="margin-collapse">Margin Collapse
&lt;/h3>&lt;p>&lt;strong>Top and bottom&lt;/strong> margins of elements are sometimes collapsed into a single margin that is equal to the &lt;strong>largest&lt;/strong> of the two margins.&lt;/p>
&lt;p>This does not happen on left and right margins! Only top and bottom margins!&lt;/p>
&lt;h2 id="widthheight">Width/Height
&lt;/h2>&lt;p>The &lt;code>height&lt;/code> and &lt;code>width&lt;/code> properties are used to set the height and width of an element.&lt;/p>
&lt;p>The height and width properties do not include padding, borders, or margins. It sets the height/width of the area inside the padding, border, and margin of the element.&lt;/p>
&lt;p>The &lt;code>height&lt;/code> and &lt;code>width&lt;/code> properties may have the following values:&lt;/p>
&lt;ul>
&lt;li>&lt;code>auto&lt;/code> - This is default. The browser calculates the height and width&lt;/li>
&lt;li>&lt;code>length&lt;/code> - Defines the height/width in px, cm etc.&lt;/li>
&lt;li>&lt;code>%&lt;/code> - Defines the height/width in percent of the containing block&lt;/li>
&lt;li>&lt;code>initial&lt;/code> - Sets the height/width to its default value&lt;/li>
&lt;li>&lt;code>inherit&lt;/code> - The height/width will be inherited from its parent value&lt;/li>
&lt;/ul>
&lt;p>we can also use &lt;code>min/max-width/height&lt;/code> to achieve our goal.&lt;/p>
&lt;h3 id="box-sizing">Box Sizing
&lt;/h3>&lt;p>The CSS &lt;code>box-sizing&lt;/code> property allows us to include the padding and border in an element&amp;rsquo;s total width and height.&lt;/p>
&lt;p>By default, the width and height of an element is calculated like this:&lt;/p>
&lt;p>width + padding + border = actual width of an element
height + padding + border = actual height of an element&lt;/p>
&lt;p>This means: When you set the width/height of an element, the element often appears &lt;strong>bigger&lt;/strong> than you have set&lt;/p>
&lt;p>If you set &lt;code>box-sizing: border-box;&lt;/code> on an element, padding and border are included in the width and height&lt;/p>
&lt;h2 id="outline">Outline
&lt;/h2>&lt;p>An outline is a line drawn outside the element&amp;rsquo;s border.&lt;/p>
&lt;p>CSS has the following outline properties:&lt;/p>
&lt;ul>
&lt;li>&lt;code>outline-style&lt;/code>&lt;/li>
&lt;li>&lt;code>outline-color&lt;/code>&lt;/li>
&lt;li>&lt;code>outline-width&lt;/code>&lt;/li>
&lt;li>&lt;code>outline-offset&lt;/code>&lt;/li>
&lt;li>&lt;code>outline&lt;/code>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> Outline differs from &lt;a class="link" href="https://www.w3schools.com/css/css_border.asp" target="_blank" rel="noopener"
>borders&lt;/a>! Unlike border, the outline is drawn outside the element&amp;rsquo;s border, and may overlap other content. Also, the outline is NOT a part of the element&amp;rsquo;s dimensions; the element&amp;rsquo;s total width and height is not affected by the width of the outline.&lt;/p>
&lt;/blockquote>
&lt;h2 id="text">Text
&lt;/h2>&lt;h3 id="text-color">Text Color
&lt;/h3>&lt;p>The &lt;code>color&lt;/code> property is used to set the color of the text.&lt;/p>
&lt;h3 id="text-alignment">Text Alignment
&lt;/h3>&lt;ul>
&lt;li>&lt;code>text-align &lt;/code>&lt;/li>
&lt;/ul>
&lt;p>set the &lt;strong>horizontal&lt;/strong> alignment of a text.&lt;/p>
&lt;p>When the &lt;code>text-align&lt;/code> property is set to &amp;ldquo;justify&amp;rdquo;, each line is stretched so that every line has equal width, and the left and right margins are straight (like in magazines and newspapers)&lt;/p>
&lt;ul>
&lt;li>&lt;code>text-align-last&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>The &lt;code>text-align-last&lt;/code> property specifies how to align the last line of a text.&lt;/p>
&lt;ul>
&lt;li>&lt;code>direction&lt;/code>&lt;/li>
&lt;li>&lt;code>unicode-bidi&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>The &lt;code>direction&lt;/code> and &lt;code>unicode-bidi&lt;/code> properties can be used to change the text direction of an element&lt;/p>
&lt;ul>
&lt;li>&lt;code>vertical-align&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;code>vertical-align&lt;/code> property sets the vertical alignment of an element.&lt;/p>
&lt;h3 id="text-decoration">Text Decoration
&lt;/h3>&lt;ul>
&lt;li>&lt;code>text-decoration-line&lt;/code>&lt;/li>
&lt;li>&lt;code>text-decoration-color&lt;/code>&lt;/li>
&lt;li>&lt;code>text-decoration-style&lt;/code>&lt;/li>
&lt;li>&lt;code>text-decoration-thickness&lt;/code>&lt;/li>
&lt;li>&lt;code>text-decoration&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="text-transformation">Text Transformation
&lt;/h3>&lt;p>The &lt;code>text-transform&lt;/code> property is used to specify uppercase and lowercase letters in a text.&lt;/p>
&lt;p>&lt;code>text-transform: none|capitalize|uppercase|lowercase|initial|inherit;&lt;/code>&lt;/p>
&lt;h3 id="text-spacing">Text Spacing
&lt;/h3>&lt;ul>
&lt;li>&lt;code>text-indent&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>specify the indentation of the first line of a text&lt;/p>
&lt;ul>
&lt;li>&lt;code>letter-spacing&lt;/code>&lt;/li>
&lt;li>&lt;code>line-height&lt;/code>&lt;/li>
&lt;li>&lt;code>word-spacing&lt;/code>&lt;/li>
&lt;li>&lt;code>white-space&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="text-shadow">Text Shadow
&lt;/h3>&lt;p>horizontal shadow ;vertical shadow ;blur effect;colors&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">h1&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">white&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">text-shadow&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="mh">#000000&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="text-effect">Text Effect
&lt;/h3>&lt;ul>
&lt;li>&lt;code>text-overflow&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>specifies how overflowed content that is not displayed should be signaled to the user.&lt;/p>
&lt;ul>
&lt;li>&lt;code>word-wrap&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>allows long words to be able to be broken and wrap onto the next line.&lt;/p>
&lt;ul>
&lt;li>&lt;code>word-break&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>specifies line breaking rules.&lt;/p>
&lt;ul>
&lt;li>&lt;code>writing-mode&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>specifies whether lines of text are laid out horizontally or vertically.&lt;/p>
&lt;h2 id="font">Font
&lt;/h2>&lt;h3 id="font-family">Font Family
&lt;/h3>&lt;p>In CSS there are five generic font families:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Serif&lt;/strong> fonts have a small stroke at the edges of each letter. They create a sense of formality and elegance.&lt;/li>
&lt;li>&lt;strong>Sans-serif&lt;/strong> fonts have clean lines (no small strokes attached). They create a modern and minimalistic look.&lt;/li>
&lt;li>&lt;strong>Monospace&lt;/strong> fonts - here all the letters have the same fixed width. They create a mechanical look.&lt;/li>
&lt;li>&lt;strong>Cursive&lt;/strong> fonts imitate human handwriting.&lt;/li>
&lt;li>&lt;strong>Fantasy&lt;/strong> fonts are decorative/playful fonts.&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Note&lt;/strong>: If the font name is more than one word, it must be in quotation marks, like: &amp;ldquo;Times New Roman&amp;rdquo;.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Tip:&lt;/strong> The &lt;code>font-family&lt;/code> property should hold several font names as a &amp;ldquo;&lt;strong>fallback&lt;/strong>&amp;rdquo; system, to ensure maximum compatibility between browsers/operating systems. Start with the font you want, and end with a generic family (to let the browser pick a similar font in the generic family, if no other fonts are available). The font names should be separated with comma.&lt;/p>
&lt;/blockquote>
&lt;p>The following list are the best web safe fonts for HTML and CSS:&lt;/p>
&lt;ul>
&lt;li>Arial (sans-serif)&lt;/li>
&lt;li>Verdana (sans-serif)&lt;/li>
&lt;li>Helvetica (sans-serif)&lt;/li>
&lt;li>Tahoma (sans-serif)&lt;/li>
&lt;li>Trebuchet MS (sans-serif)&lt;/li>
&lt;li>Times New Roman (serif)&lt;/li>
&lt;li>Georgia (serif)&lt;/li>
&lt;li>Garamond (serif)&lt;/li>
&lt;li>Courier New (monospace)&lt;/li>
&lt;li>Brush Script MT (cursive)&lt;/li>
&lt;/ul>
&lt;h3 id="font-style">Font Style
&lt;/h3>&lt;p>&lt;code>font-style&lt;/code> property is mostly used to specify italic text.&lt;/p>
&lt;p>This property has three values:&lt;/p>
&lt;ul>
&lt;li>normal - The text is shown normally&lt;/li>
&lt;li>italic - The text is shown in italics&lt;/li>
&lt;li>oblique - The text is &amp;ldquo;leaning&amp;rdquo; (oblique is very similar to italic, but less supported)&lt;/li>
&lt;/ul>
&lt;p>&lt;code>font-weight&lt;/code> specifies the weight of a font ( normal bold)&lt;/p>
&lt;p>&lt;code>font-variant&lt;/code> property specifies whether or not a text should be displayed in a small-caps font.( In a small-caps font, all lowercase letters are converted to uppercase letters. However, the converted uppercase letters appears in a smaller font size than the original uppercase letters in the text. )&lt;/p>
&lt;h3 id="font-size">Font Size
&lt;/h3>&lt;p>The font-size value can be an absolute, or relative size.&lt;/p>
&lt;p>Absolute size:&lt;/p>
&lt;ul>
&lt;li>Sets the text to a specified size&lt;/li>
&lt;li>Does not allow a user to change the text size in all browsers (bad for accessibility reasons)&lt;/li>
&lt;li>Absolute size is useful when the physical size of the output is known&lt;/li>
&lt;/ul>
&lt;p>Relative size:&lt;/p>
&lt;ul>
&lt;li>Sets the size relative to surrounding elements&lt;/li>
&lt;li>Allows a user to change the text size in browsers&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note:&lt;/strong> If you do not specify a font size, the default size for normal text, like paragraphs, is 16px (16px=1em).&lt;/p>
&lt;p>1em is equal to the current font size. The default text size in browsers is 16px. So, the default size of 1em is 16px.&lt;/p>
&lt;p>with the em size, it is possible to adjust the text size in all browsers.&lt;/p>
&lt;p>The solution that works in all browsers, is to set a default font-size in percent for the &lt;body> element:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">body&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">font-size&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="kt">%&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">h1&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">font-size&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">2.5&lt;/span>&lt;span class="kt">em&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">h2&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">font-size&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">1.875&lt;/span>&lt;span class="kt">em&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">p&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">font-size&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">0.875&lt;/span>&lt;span class="kt">em&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="font-1">&lt;code>font&lt;/code>
&lt;/h3>&lt;p>The &lt;code>font&lt;/code> property is a shorthand property for:&lt;/p>
&lt;ul>
&lt;li>&lt;code>font-style&lt;/code>&lt;/li>
&lt;li>&lt;code>font-variant&lt;/code>&lt;/li>
&lt;li>&lt;code>font-weight&lt;/code>&lt;/li>
&lt;li>&lt;code>font-size/line-height&lt;/code>&lt;/li>
&lt;li>&lt;code>font-family&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note:&lt;/strong> The &lt;code>font-size&lt;/code> and &lt;code>font-family&lt;/code> values are required. If one of the other values is missing, their default value are used.&lt;/p>
&lt;h3 id="google-fonts">Google Fonts
&lt;/h3>&lt;p>If you do not want to use any of the standard fonts in HTML, you can use Google Fonts.&lt;/p>
&lt;p>Google Fonts are free to use, and have more than 1000 fonts to choose from.&lt;/p>
&lt;p>Just add a special style sheet link in the &lt;head> section and then refer to the font in the CSS.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nt">link&lt;/span> &lt;span class="nt">rel&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;stylesheet&amp;#34;&lt;/span> &lt;span class="nt">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;https://fonts.googleapis.com/css?family=Sofia|Audiowide|Sofia|Trirong&amp;#34;&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Google have also enabled different font effects that you can use.&lt;/p>
&lt;p>First add &lt;code>effect=effectname&lt;/code> to the Google API, then add a special class name to the element that is going to use the special effect. The class name always starts with &lt;code>font-effect-&lt;/code> and ends with the &lt;code>effectname&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nt">link&lt;/span> &lt;span class="nt">rel&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;stylesheet&amp;#34;&lt;/span> &lt;span class="nt">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;https://fonts.googleapis.com/css?family=Sofia&amp;amp;effect=fire&amp;#34;&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nt">h1&lt;/span> &lt;span class="nt">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;font-effect-fire&amp;#34;&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="nt">Sofia&lt;/span> &lt;span class="nt">on&lt;/span> &lt;span class="nt">Fire&lt;/span>&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="web-fonts">Web Fonts
&lt;/h3>&lt;p>Web fonts allow Web designers to use fonts that are not installed on the user&amp;rsquo;s computer.&lt;/p>
&lt;p>When you have found/bought the font you wish to use, just include the font file on your web server, and it will be automatically downloaded to the user when needed.&lt;/p>
&lt;p>Your &amp;ldquo;own&amp;rdquo; fonts are defined within the CSS &lt;code>@font-face&lt;/code> rule.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="p">@&lt;/span>&lt;span class="k">font-face&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">font-family&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nt">myFirstFont&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">src&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nt">url&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">sansation_light&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">woff&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">div&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">font-family&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">myFirstFont&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="lists">Lists
&lt;/h2>&lt;ul>
&lt;li>&lt;code>list-style-type&lt;/code>&lt;/li>
&lt;li>`list-style-image``&lt;/li>
&lt;li>``list-style-position`&lt;/li>
&lt;li>&lt;code>list-style&lt;/code> ( shorthand )&lt;/li>
&lt;/ul>
&lt;h2 id="layout">Layout
&lt;/h2>&lt;h3 id="display">Display
&lt;/h3>&lt;p>The &lt;code>display&lt;/code> property is the most important CSS property for controlling layout.&lt;/p>
&lt;p>Every HTML element has a default display value depending on what type of element it is. The default display value for most elements is &lt;code>block&lt;/code> or &lt;code>inline&lt;/code>.&lt;/p>
&lt;p>&lt;code>display: none;&lt;/code> is commonly used with JavaScript to hide and show elements without deleting and recreating them.&lt;/p>
&lt;p>&lt;code>visibility:hidden;&lt;/code> also hides an element.&lt;/p>
&lt;p>However, the element will still take up the same space as before. The element will be hidden, but still affect the layout&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">Value&lt;/th>
&lt;th style="text-align: left">Description&lt;/th>
&lt;th style="text-align: left">Play it&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">inline&lt;/td>
&lt;td style="text-align: left">Displays an element as an inline element (like &lt;span>). Any height and width properties will have no effect&lt;/td>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/cssref/playdemo.asp?filename=playcss_display&amp;amp;preval=inline" target="_blank" rel="noopener"
>Demo ❯&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">block&lt;/td>
&lt;td style="text-align: left">Displays an element as a block element (like &lt;p>). It starts on a new line, and takes up the whole width&lt;/td>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/cssref/playdemo.asp?filename=playcss_display&amp;amp;preval=block" target="_blank" rel="noopener"
>Demo ❯&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">contents&lt;/td>
&lt;td style="text-align: left">Makes the container disappear, making the child elements children of the element the next level up in the DOM&lt;/td>
&lt;td style="text-align: left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">flex&lt;/td>
&lt;td style="text-align: left">Displays an element as a &lt;strong>block-level flex container&lt;/strong>&lt;/td>
&lt;td style="text-align: left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">grid&lt;/td>
&lt;td style="text-align: left">Displays an element as a &lt;strong>block-level grid container&lt;/strong>&lt;/td>
&lt;td style="text-align: left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">inline-block&lt;/td>
&lt;td style="text-align: left">Displays an element as an inline-level block container. The element itself is formatted as an inline element, but you &lt;strong>can apply height and width values&lt;/strong>&lt;/td>
&lt;td style="text-align: left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">inline-flex&lt;/td>
&lt;td style="text-align: left">Displays an element as an inline-level flex container&lt;/td>
&lt;td style="text-align: left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">inline-grid&lt;/td>
&lt;td style="text-align: left">Displays an element as an inline-level grid container&lt;/td>
&lt;td style="text-align: left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">inline-table&lt;/td>
&lt;td style="text-align: left">The element is displayed as an inline-level table&lt;/td>
&lt;td style="text-align: left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">list-item&lt;/td>
&lt;td style="text-align: left">Let the element behave like a &lt;li> element&lt;/td>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/cssref/playdemo.asp?filename=playcss_display&amp;amp;preval=list-item" target="_blank" rel="noopener"
>Demo ❯&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">run-in&lt;/td>
&lt;td style="text-align: left">Displays an element as either block or inline, depending on context&lt;/td>
&lt;td style="text-align: left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">table&lt;/td>
&lt;td style="text-align: left">Let the element behave like a &lt;table> element&lt;/td>
&lt;td style="text-align: left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">table-caption&lt;/td>
&lt;td style="text-align: left">Let the element behave like a &lt;caption> element&lt;/td>
&lt;td style="text-align: left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">table-column-group&lt;/td>
&lt;td style="text-align: left">Let the element behave like a &lt;colgroup> element&lt;/td>
&lt;td style="text-align: left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">table-header-group&lt;/td>
&lt;td style="text-align: left">Let the element behave like a &lt;thead> element&lt;/td>
&lt;td style="text-align: left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">table-footer-group&lt;/td>
&lt;td style="text-align: left">Let the element behave like a &lt;tfoot> element&lt;/td>
&lt;td style="text-align: left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">table-row-group&lt;/td>
&lt;td style="text-align: left">Let the element behave like a &lt;tbody> element&lt;/td>
&lt;td style="text-align: left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">table-cell&lt;/td>
&lt;td style="text-align: left">Let the element behave like a &lt;td> element&lt;/td>
&lt;td style="text-align: left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">table-column&lt;/td>
&lt;td style="text-align: left">Let the element behave like a &lt;col> element&lt;/td>
&lt;td style="text-align: left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">table-row&lt;/td>
&lt;td style="text-align: left">Let the element behave like a &lt;tr> element&lt;/td>
&lt;td style="text-align: left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">none&lt;/td>
&lt;td style="text-align: left">The element is completely removed&lt;/td>
&lt;td style="text-align: left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">initial&lt;/td>
&lt;td style="text-align: left">Sets this property to its default value. &lt;a class="link" href="https://www.w3schools.com/cssref/css_initial.asp" target="_blank" rel="noopener"
>Read about &lt;em>initial&lt;/em>&lt;/a>&lt;/td>
&lt;td style="text-align: left">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">inherit&lt;/td>
&lt;td style="text-align: left">Inherits this property from its parent element. &lt;a class="link" href="https://www.w3schools.com/cssref/css_inherit.asp" target="_blank" rel="noopener"
>Read about &lt;em>inherit&lt;/em>&lt;/a>&lt;/td>
&lt;td style="text-align: left">&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="displayinline-block">&lt;code>display:inline-block&lt;/code>
&lt;/h4>&lt;p>Compared to &lt;code>display: inline&lt;/code>, the major difference is that &lt;code>display: inline-block&lt;/code> allows to set a width and height on the element.&lt;/p>
&lt;p>Also, with &lt;code>display: inline-block&lt;/code>, the top and bottom margins/paddings are respected, but with &lt;code>display: inline&lt;/code> they are not.&lt;/p>
&lt;p>Compared to &lt;code>display: block&lt;/code>, the major difference is that &lt;code>display: inline-block&lt;/code> does not add a line-break after the element, so the element can sit next to other elements.&lt;/p>
&lt;h3 id="position">Position
&lt;/h3>&lt;p>The &lt;code>position&lt;/code> property specifies the type of positioning method used for an element.&lt;/p>
&lt;p>There are five different position values:&lt;/p>
&lt;ul>
&lt;li>&lt;code>static&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>HTML elements are positioned static by default.&lt;/p>
&lt;p>An element with &lt;code>position: static;&lt;/code> is not positioned in any special way; it is always positioned according to the normal flow of the page&lt;/p>
&lt;ul>
&lt;li>&lt;code>relative&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>An element with &lt;code>position: relative;&lt;/code> is positioned relative to its normal position.&lt;/p>
&lt;p>Setting the &lt;strong>top, right, bottom, and left&lt;/strong> properties of a relatively-positioned element will cause it to be adjusted away from its normal position. Other content &lt;strong>will not be adjusted&lt;/strong> to fit into any gap left by the element.&lt;/p>
&lt;ul>
&lt;li>&lt;code>fixed&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>An element with &lt;code>position: fixed;&lt;/code> is positioned &lt;strong>relative to the viewport&lt;/strong>, which means it always stays in the same place even if the page is scrolled. The top, right, bottom, and left properties are used to position the element.&lt;/p>
&lt;ul>
&lt;li>&lt;code>absolute&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>An element with &lt;code>position: absolute;&lt;/code> is positioned relative to the nearest positioned ancestor (instead of positioned relative to the viewport, like fixed).&lt;/p>
&lt;p>However; if an absolute positioned element has no positioned ancestors, it uses the document body, and moves along with page scrolling.&lt;/p>
&lt;ul>
&lt;li>&lt;code>sticky&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>A sticky element toggles between &lt;code>relative&lt;/code> and &lt;code>fixed&lt;/code>, depending on the scroll position. It is positioned relative until a given offset position is met in the viewport - then it &amp;ldquo;sticks&amp;rdquo; in place (like position:fixed).&lt;/p>
&lt;h3 id="z-index">Z-index
&lt;/h3>&lt;p>specifies the stack order of an element.&lt;/p>
&lt;p>&lt;code>z-index&lt;/code> &lt;strong>only works&lt;/strong> on &lt;a class="link" href="https://www.w3schools.com/css/css_positioning.asp" target="_blank" rel="noopener"
>positioned elements&lt;/a> (position: absolute, position: relative, position: fixed, or position: sticky) and &lt;a class="link" href="https://www.w3schools.com/css/css3_flexbox.asp" target="_blank" rel="noopener"
>flex items&lt;/a> (elements that are direct children of display: flex elements).&lt;/p>
&lt;h3 id="overflow">Overflow
&lt;/h3>&lt;p>controls what happens to content that is too big to fit into an area, specifies whether to clip the content or to add scrollbars when the content of an element is too big to fit in the specified area.&lt;/p>
&lt;ul>
&lt;li>&lt;code>visible&lt;/code> - Default. The overflow is not clipped. The content renders outside the element&amp;rsquo;s box&lt;/li>
&lt;li>&lt;code>hidden&lt;/code> - The overflow is clipped, and the rest of the content will be invisible&lt;/li>
&lt;li>&lt;code>scroll&lt;/code> - The overflow is clipped, and a scrollbar is added to see the rest of the content&lt;/li>
&lt;li>&lt;code>auto&lt;/code> - Similar to &lt;code>scroll&lt;/code>, but it adds scrollbars only when necessary&lt;/li>
&lt;/ul>
&lt;p>The &lt;code>overflow-x&lt;/code> and &lt;code>overflow-y&lt;/code> properties specifies whether to change the overflow of content just horizontally or vertically (or both):&lt;/p>
&lt;h3 id="float-and-clear">Float and Clear
&lt;/h3>&lt;h4 id="float">&lt;code>float&lt;/code>
&lt;/h4>&lt;p>The CSS &lt;code>float&lt;/code> property specifies how an element should float.&lt;/p>
&lt;p>The CSS &lt;code>clear&lt;/code> property specifies what elements can float beside the cleared element and on which side.&lt;/p>
&lt;p>The &lt;code>float&lt;/code> property can have one of the following values:&lt;/p>
&lt;ul>
&lt;li>&lt;code>left&lt;/code> - The element floats to the left of its container&lt;/li>
&lt;li>&lt;code>right&lt;/code> - The element floats to the right of its container&lt;/li>
&lt;li>&lt;code>none&lt;/code> - The element does not float (will be displayed just where it occurs in the text). This is default&lt;/li>
&lt;li>&lt;code>inherit&lt;/code> - The element inherits the float value of its parent&lt;/li>
&lt;/ul>
&lt;h4 id="clear">&lt;code>clear&lt;/code>
&lt;/h4>&lt;p>When we use the &lt;code>float&lt;/code> property, and we want the next element below (not on right or left), we will have to use the &lt;code>clear&lt;/code> property.&lt;/p>
&lt;p>The &lt;code>clear&lt;/code> property specifies what should happen with the element that is next to a floating element.&lt;/p>
&lt;p>The &lt;code>clear&lt;/code> property can have one of the following values:&lt;/p>
&lt;ul>
&lt;li>&lt;code>none&lt;/code> - The element is not pushed below left or right floated elements. This is default&lt;/li>
&lt;li>&lt;code>left&lt;/code> - The element is pushed below left floated elements&lt;/li>
&lt;li>&lt;code>right&lt;/code> - The element is pushed below right floated elements&lt;/li>
&lt;li>&lt;code>both&lt;/code> - The element is pushed below both left and right floated elements&lt;/li>
&lt;li>&lt;code>inherit&lt;/code> - The element inherits the clear value from its parent&lt;/li>
&lt;/ul>
&lt;p>When clearing floats, you should &lt;strong>match&lt;/strong> the clear to the float: If an element is floated to the left, then you should clear to the left. Your floated element will continue to float, but the cleared element will appear below it on the web page.&lt;/p>
&lt;p>If a floated element is taller than the containing element, it will &amp;ldquo;overflow&amp;rdquo; outside of its container. We can then add a clearfix hack to solve this problem&lt;/p>
&lt;h3 id="align">Align
&lt;/h3>&lt;h4 id="horizontally">Horizontally
&lt;/h4>&lt;p>To horizontally center a block element (like &lt;div>), use &lt;code>margin: auto;&lt;/code>&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> Center aligning has no effect if the &lt;code>width&lt;/code> property is not set (or set to 100%).&lt;/p>
&lt;p>To just center the text inside an element, use &lt;code>text-align: center;&lt;/code>&lt;/p>
&lt;h4 id="vertically">Vertically
&lt;/h4>&lt;ul>
&lt;li>
&lt;p>There are many ways to center an element vertically in CSS. A simple solution is to use top and bottom &lt;code>padding&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Another trick is to use the &lt;code>line-height&lt;/code> property with a value that is equal to the &lt;code>height&lt;/code> property&lt;/p>
&lt;/li>
&lt;li>
&lt;p>another solution is to use positioning and the &lt;code>transform&lt;/code> property&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="nc">center&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">200&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">position&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">relative&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">border&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="kc">solid&lt;/span> &lt;span class="kc">green&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="nc">center&lt;/span> &lt;span class="nt">p&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">margin&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">position&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">absolute&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">top&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">50&lt;/span>&lt;span class="kt">%&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">left&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">50&lt;/span>&lt;span class="kt">%&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kp">-ms-&lt;/span>&lt;span class="k">transform&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">translate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">-50&lt;/span>&lt;span class="kt">%&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">-50&lt;/span>&lt;span class="kt">%&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">transform&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">translate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">-50&lt;/span>&lt;span class="kt">%&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">-50&lt;/span>&lt;span class="kt">%&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>You can also use flexbox to center things. Just note that flexbox is not supported in IE10 and earlier versions&lt;/li>
&lt;/ul>
&lt;h2 id="flex">Flex
&lt;/h2>&lt;p>The Flexible Box Layout Module, makes it easier to design flexible responsive layout structure without using float or positioning.&lt;/p>
&lt;h3 id="container">container
&lt;/h3>&lt;p>The flex container becomes flexible by setting the &lt;code>display&lt;/code> property to &lt;code>flex&lt;/code>.&lt;/p>
&lt;p>The flex container properties are:&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.w3schools.com/css/css3_flexbox_container.asp#flex-direction" target="_blank" rel="noopener"
>&lt;code>flex-direction&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>defines in which direction the container wants to stack the flex items.&lt;/p>
&lt;p>&lt;code>column | column-reverse | row | row-reverse &lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.w3schools.com/css/css3_flexbox_container.asp#flex-wrap" target="_blank" rel="noopener"
>&lt;code>flex-wrap&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>specifies whether the flex items should wrap or not.&lt;/p>
&lt;p>&lt;code>nowrap(default) | wrap |wrap-reverse&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.w3schools.com/css/css3_flexbox_container.asp#flex-flow" target="_blank" rel="noopener"
>&lt;code>flex-flow&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>shorthand for &lt;code>flex-direction&lt;/code> and &lt;code>flex-wrap&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.w3schools.com/css/css3_flexbox_container.asp#justify-content" target="_blank" rel="noopener"
>&lt;code>justify-content&lt;/code>&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;code>flex-start&lt;/code>&lt;/li>
&lt;li>&lt;code>center&lt;/code>&lt;/li>
&lt;li>&lt;code>flex-end&lt;/code>&lt;/li>
&lt;li>&lt;code>space-around&lt;/code> :displays the flex items with space before, between, and after the lines&lt;/li>
&lt;li>&lt;code>space-between&lt;/code>：displays the flex items with space between the lines&lt;/li>
&lt;li>&lt;code>space-evenly&lt;/code>:equal space around them&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.w3schools.com/css/css3_flexbox_container.asp#align-items" target="_blank" rel="noopener"
>&lt;code>align-items&lt;/code>&lt;/a> :used to align the flex items.&lt;/p>
&lt;ul>
&lt;li>&lt;code>flex-start&lt;/code>&lt;/li>
&lt;li>&lt;code>flex-end&lt;/code>&lt;/li>
&lt;li>&lt;code>center&lt;/code>&lt;/li>
&lt;li>&lt;code>stretch &lt;/code>: Items are stretched to fit the container&lt;/li>
&lt;li>&lt;code>baseline&lt;/code>: Items are positioned at the baseline of the container&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.w3schools.com/css/css3_flexbox_container.asp#align-content" target="_blank" rel="noopener"
>&lt;code>align-content&lt;/code>&lt;/a>: but instead of aligning flex items, it aligns flex lines&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="item">item
&lt;/h3>&lt;p>The flex item properties are:&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.w3schools.com/css/css3_flexbox_items.asp#order" target="_blank" rel="noopener"
>&lt;code>order&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>specifies the appearance order of the flex items.&lt;/p>
&lt;p>The first flex item in the code does not have to appear as the first item in the layout.&lt;/p>
&lt;p>The order value must be a number, default value is 0.&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.w3schools.com/css/css3_flexbox_items.asp#flex-grow" target="_blank" rel="noopener"
>&lt;code>flex-grow&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>The &lt;code>flex-grow&lt;/code> property specifies how much a flex item will grow relative to the rest of the flex items.&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.w3schools.com/css/css3_flexbox_items.asp#flex-shrink" target="_blank" rel="noopener"
>&lt;code>flex-shrink&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>The &lt;code>flex-grow&lt;/code> property specifies how much a flex item will shrink relative to the rest of the flex items.&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.w3schools.com/css/css3_flexbox_items.asp#flex-basis" target="_blank" rel="noopener"
>&lt;code>flex-basis&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>specifies the initial length of a flex item.&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.w3schools.com/css/css3_flexbox_items.asp#flex" target="_blank" rel="noopener"
>&lt;code>flex&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>shorthand property for the &lt;code>flex-grow&lt;/code>, &lt;code>flex-shrink&lt;/code>, and &lt;code>flex-basis&lt;/code> properties.&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.w3schools.com/css/css3_flexbox_items.asp#align-self" target="_blank" rel="noopener"
>&lt;code>align-self&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>specifies the alignment for the selected item inside the flexible container.&lt;/p>
&lt;h2 id="grid">Grid
&lt;/h2>&lt;h3 id="container-1">container
&lt;/h3>&lt;ul>
&lt;li>&lt;code>grid-template-columns&lt;/code>&lt;/li>
&lt;li>&lt;code>grid-template-rows&lt;/code>&lt;/li>
&lt;li>&lt;code>justify-content&lt;/code>&lt;/li>
&lt;li>&lt;code>align-content&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="item-1">item
&lt;/h3>&lt;p>By default, a container has one grid item for each column, in each row, but you can style the grid items so that they will span multiple columns and/or rows.&lt;/p>
&lt;ul>
&lt;li>&lt;code>grid-column&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>shorthand property for the &lt;code>grid-column-start&lt;/code> and the &lt;code>grid-column-end&lt;/code> properties., defines on which column(s) to place an item.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="nc">item1&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">grid-column&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="nc">item1&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">grid-column&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">span&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>&lt;code>grid-row&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>gird-area&lt;/code> : shorthand for the above two properties&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="nc">item8&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">grid-area&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">5&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="nc">item8&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">grid-area&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">5&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="units">Units
&lt;/h2>&lt;p>CSS has several different units for expressing a length.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> A whitespace cannot appear between the number and the unit. However, if the value is &lt;code>0&lt;/code>, the unit can be omitted.&lt;/p>
&lt;/blockquote>
&lt;p>There are two types of length units: &lt;strong>absolute&lt;/strong> and &lt;strong>relative&lt;/strong>.&lt;/p>
&lt;h3 id="absolute">Absolute
&lt;/h3>&lt;p>Absolute length units are not recommended for use on screen, because screen sizes vary so much. However, they can be used if the output medium is known, such as for print layout.&lt;/p>
&lt;p>Absolute length units are not recommended for use on screen, because screen sizes vary so much. However, they can be used if the output medium is known, such as for print layout.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">Unit&lt;/th>
&lt;th style="text-align: left">Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">cm&lt;/td>
&lt;td style="text-align: left">centimeters&lt;a class="link" href="https://www.w3schools.com/css/tryit.asp?filename=trycss_unit_cm" target="_blank" rel="noopener"
>Try it&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">mm&lt;/td>
&lt;td style="text-align: left">millimeters&lt;a class="link" href="https://www.w3schools.com/css/tryit.asp?filename=trycss_unit_mm" target="_blank" rel="noopener"
>Try it&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">in&lt;/td>
&lt;td style="text-align: left">inches (1in = 96px = 2.54cm)&lt;a class="link" href="https://www.w3schools.com/css/tryit.asp?filename=trycss_unit_in" target="_blank" rel="noopener"
>Try it&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">px *&lt;/td>
&lt;td style="text-align: left">pixels (1px = 1/96th of 1in)&lt;a class="link" href="https://www.w3schools.com/css/tryit.asp?filename=trycss_unit_px" target="_blank" rel="noopener"
>Try it&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">pt&lt;/td>
&lt;td style="text-align: left">points (1pt = 1/72 of 1in)&lt;a class="link" href="https://www.w3schools.com/css/tryit.asp?filename=trycss_unit_pt" target="_blank" rel="noopener"
>Try it&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">pc&lt;/td>
&lt;td style="text-align: left">picas (1pc = 12 pt)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>* Pixels (px) are relative to the viewing device. For low-dpi devices, 1px is one device pixel (dot) of the display. For printers and high resolution screens 1px implies multiple device pixels.&lt;/p>
&lt;h3 id="relative">Relative
&lt;/h3>&lt;p>Relative length units specify a length relative to another length property. Relative length units scales better between different rendering mediums.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">Unit&lt;/th>
&lt;th style="text-align: left">Description&lt;/th>
&lt;th style="text-align: left">&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">em&lt;/td>
&lt;td style="text-align: left">Relative to the font-size of the element (2em means 2 times the size of the current font)&lt;/td>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/css/tryit.asp?filename=trycss_unit_em" target="_blank" rel="noopener"
>Try it&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">ex&lt;/td>
&lt;td style="text-align: left">Relative to the x-height of the current font (rarely used)&lt;/td>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/css/tryit.asp?filename=trycss_unit_ex" target="_blank" rel="noopener"
>Try it&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">ch&lt;/td>
&lt;td style="text-align: left">Relative to width of the &amp;ldquo;0&amp;rdquo; (zero)&lt;/td>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/css/tryit.asp?filename=trycss_unit_ch" target="_blank" rel="noopener"
>Try it&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">rem&lt;/td>
&lt;td style="text-align: left">Relative to font-size of the root element&lt;/td>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/css/tryit.asp?filename=trycss_unit_rem" target="_blank" rel="noopener"
>Try it&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">vw&lt;/td>
&lt;td style="text-align: left">Relative to 1% of the width of the viewport*&lt;/td>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/css/tryit.asp?filename=trycss_unit_vw" target="_blank" rel="noopener"
>Try it&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">vh&lt;/td>
&lt;td style="text-align: left">Relative to 1% of the height of the viewport*&lt;/td>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/css/tryit.asp?filename=trycss_unit_vh" target="_blank" rel="noopener"
>Try it&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">vmin&lt;/td>
&lt;td style="text-align: left">Relative to 1% of viewport&amp;rsquo;s* smaller dimension&lt;/td>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/css/tryit.asp?filename=trycss_unit_vmin" target="_blank" rel="noopener"
>Try it&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">vmax&lt;/td>
&lt;td style="text-align: left">Relative to 1% of viewport&amp;rsquo;s* larger dimension&lt;/td>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/css/tryit.asp?filename=trycss_unit_vmax" target="_blank" rel="noopener"
>Try it&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">%&lt;/td>
&lt;td style="text-align: left">Relative to the parent element&lt;/td>
&lt;td style="text-align: left">&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="math-functions">Math Functions
&lt;/h2>&lt;h3 id="calc">calc()
&lt;/h3>&lt;blockquote>
&lt;p>calc(&lt;em>expression&lt;/em>)&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">calc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="kt">%&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="max">max()
&lt;/h3>&lt;blockquote>
&lt;p>max(&lt;em>value1&lt;/em>, &lt;em>value2&lt;/em>, &amp;hellip;)&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nf">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">50&lt;/span>&lt;span class="kt">%&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">300&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="min">min()
&lt;/h3>&lt;blockquote>
&lt;p>max(&lt;em>value1&lt;/em>, &lt;em>value2&lt;/em>, &amp;hellip;)&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nf">min&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">50&lt;/span>&lt;span class="kt">%&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">300&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="transforms">Transforms
&lt;/h2>&lt;h3 id="2d">2D
&lt;/h3>&lt;p>With the CSS &lt;code>transform&lt;/code> property you can use the following 2D transformation methods:&lt;/p>
&lt;ul>
&lt;li>&lt;code>translate()&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>moves an element from its current position (according to the parameters given for the X-axis and the Y-axis).&lt;/p>
&lt;ul>
&lt;li>&lt;code>rotate()&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>rotates an element clockwise(positive deg) or counter-clockwise (negative deg) according to a given degree.&lt;/p>
&lt;ul>
&lt;li>&lt;code>scaleX()&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>increases or decreases the width of an element.&lt;/p>
&lt;ul>
&lt;li>&lt;code>scaleY()&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>increases or decreases the height of an element.&lt;/p>
&lt;ul>
&lt;li>&lt;code>scale()&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>increases or decreases the size of an element (according to the parameters given for the width and height).&lt;/p>
&lt;ul>
&lt;li>&lt;code>skewX()&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>skews an element along the X-axis by the given angle.&lt;/p>
&lt;ul>
&lt;li>&lt;code>skewY()&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>skews an element along the Y-axis by the given angle.&lt;/p>
&lt;ul>
&lt;li>&lt;code>skew()&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>skews an element along the X and Y-axis by the given angles.&lt;/p>
&lt;ul>
&lt;li>&lt;code>matrix()&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>combines all the 2D transform methods into one.&lt;/p>
&lt;blockquote>
&lt;p>matrix(scaleX(),skewY(),skewX(),scaleY(),translateX(),translateY())&lt;/p>
&lt;/blockquote>
&lt;h3 id="3d">3D
&lt;/h3>&lt;p>CSS also supports 3D transformations.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">Function&lt;/th>
&lt;th style="text-align: left">Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">matrix3d (&lt;em>n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n&lt;/em>)&lt;/td>
&lt;td style="text-align: left">Defines a 3D transformation, using a 4x4 matrix of 16 values&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">translate3d(&lt;em>x,y,z&lt;/em>)&lt;/td>
&lt;td style="text-align: left">Defines a 3D translation&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">translateX(&lt;em>x&lt;/em>)&lt;/td>
&lt;td style="text-align: left">Defines a 3D translation, using only the value for the X-axis&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">translateY(&lt;em>y&lt;/em>)&lt;/td>
&lt;td style="text-align: left">Defines a 3D translation, using only the value for the Y-axis&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">translateZ(&lt;em>z&lt;/em>)&lt;/td>
&lt;td style="text-align: left">Defines a 3D translation, using only the value for the Z-axis&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">scale3d(&lt;em>x,y,z&lt;/em>)&lt;/td>
&lt;td style="text-align: left">Defines a 3D scale transformation&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">scaleX(&lt;em>x&lt;/em>)&lt;/td>
&lt;td style="text-align: left">Defines a 3D scale transformation by giving a value for the X-axis&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">scaleY(&lt;em>y&lt;/em>)&lt;/td>
&lt;td style="text-align: left">Defines a 3D scale transformation by giving a value for the Y-axis&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">scaleZ(&lt;em>z&lt;/em>)&lt;/td>
&lt;td style="text-align: left">Defines a 3D scale transformation by giving a value for the Z-axis&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">rotate3d(&lt;em>x,y,z,angle&lt;/em>)&lt;/td>
&lt;td style="text-align: left">Defines a 3D rotation&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">rotateX(&lt;em>angle&lt;/em>)&lt;/td>
&lt;td style="text-align: left">Defines a 3D rotation along the X-axis&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">rotateY(&lt;em>angle&lt;/em>)&lt;/td>
&lt;td style="text-align: left">Defines a 3D rotation along the Y-axis&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">rotateZ(&lt;em>angle&lt;/em>)&lt;/td>
&lt;td style="text-align: left">Defines a 3D rotation along the Z-axis&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">perspective(&lt;em>n&lt;/em>)&lt;/td>
&lt;td style="text-align: left">Defines a perspective view for a 3D transformed element&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="transitions">Transitions
&lt;/h2>&lt;ul>
&lt;li>&lt;code>transition&lt;/code>&lt;/li>
&lt;li>&lt;code>transition-delay&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>specifies a delay (in seconds) for the transition effect.&lt;/p>
&lt;ul>
&lt;li>&lt;code>transition-duration&lt;/code>&lt;/li>
&lt;li>&lt;code>transition-property&lt;/code>&lt;/li>
&lt;li>&lt;code>transition-timing-function&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>To create a transition effect, you must specify two things:&lt;/p>
&lt;ul>
&lt;li>the CSS property you want to add an effect to&lt;/li>
&lt;li>the duration of the effect&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> If the duration part is not specified, the transition will have no effect, because the default value is 0.&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">div&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">transition&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="k">width&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="kt">s&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">height&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="kt">s&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">div&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nd">hover&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">300&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">/*Several Property Values*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">div&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nd">hover&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">300&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="timing-function">Timing Function
&lt;/h3>&lt;p>The &lt;code>transition-timing-function&lt;/code> property specifies the speed curve of the transition effect.&lt;/p>
&lt;p>The transition-timing-function property can have the following values:&lt;/p>
&lt;ul>
&lt;li>&lt;code>ease&lt;/code> - specifies a transition effect with a slow start, then fast, then end slowly (this is default)&lt;/li>
&lt;li>&lt;code>linear&lt;/code> - specifies a transition effect with the same speed from start to end&lt;/li>
&lt;li>&lt;code>ease-in&lt;/code> - specifies a transition effect with a slow start&lt;/li>
&lt;li>&lt;code>ease-out&lt;/code> - specifies a transition effect with a slow end&lt;/li>
&lt;li>&lt;code>ease-in-out&lt;/code> - specifies a transition effect with a slow start and end&lt;/li>
&lt;li>&lt;code>cubic-bezier(n,n,n,n)&lt;/code> - lets you define your own values in a cubic-bezier function&lt;/li>
&lt;/ul>
&lt;h2 id="animations">Animations
&lt;/h2>&lt;ul>
&lt;li>&lt;code>@keyframes&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>To use CSS animation, you must first specify some keyframes for the animation.&lt;/p>
&lt;p>Keyframes hold what styles the element will have at certain times.&lt;/p>
&lt;ul>
&lt;li>&lt;code>animation-name&lt;/code>&lt;/li>
&lt;li>&lt;code>animation-duration&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>The &lt;code>animation-duration&lt;/code> property defines how long an animation should take to complete. If the &lt;code>animation-duration&lt;/code> property is not specified, no animation will occur, because the default value is 0s (0 seconds).&lt;/p>
&lt;ul>
&lt;li>&lt;code>animation-delay&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Negative values are also allowed. If using negative values, the animation will start as if it had already been playing for &lt;em>N&lt;/em> seconds.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>animation-iteration-count&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>animation-direction&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>normal&lt;/code> - The animation is played as normal (forwards). This is default&lt;/li>
&lt;li>&lt;code>reverse&lt;/code> - The animation is played in reverse direction (backwards)&lt;/li>
&lt;li>&lt;code>alternate &lt;/code>- The animation is played forwards first, then backwards&lt;/li>
&lt;li>&lt;code>alternate-reverse&lt;/code> - The animation is played backwards first, then forwards&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>animation-timing-function&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>animation-fill-mode&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>none&lt;/code> - Default value. Animation will not apply any styles to the element before or after it is executing&lt;/li>
&lt;li>&lt;code>forwards&lt;/code> - The element will retain the style values that is set by the last keyframe (depends on animation-direction and animation-iteration-count)&lt;/li>
&lt;li>&lt;code>backwards&lt;/code> - The element will get the style values that is set by the first keyframe (depends on animation-direction), and retain this during the animation-delay period&lt;/li>
&lt;li>&lt;code>both&lt;/code> - The animation will follow the rules for both forwards and backwards, extending the animation properties in both directions&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>CSS animations do not affect an element before the first keyframe is played or after the last keyframe is played. The animation-fill-mode property can override this behavior.&lt;/p>
&lt;ul>
&lt;li>&lt;code>animation&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="media-queries">Media Queries
&lt;/h2>&lt;p>The &lt;code>@media&lt;/code> rule, introduced in CSS2, made it possible to define different style rules for different media types.&lt;/p>
&lt;p>Unfortunately these media types never got a lot of support by devices, other than the print media type.&lt;/p>
&lt;p>Media queries in CSS3 extended the CSS2 media types idea: Instead of looking for a type of device, they look at the capability of the device.&lt;/p>
&lt;ul>
&lt;li>width and height of the viewport&lt;/li>
&lt;li>width and height of the device&lt;/li>
&lt;li>orientation (is the tablet/phone in landscape or portrait mode?)&lt;/li>
&lt;li>resolution&lt;/li>
&lt;/ul>
&lt;p>A media query consists of a media type and can contain one or more expressions, which resolve to either true or false.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="p">@&lt;/span>&lt;span class="k">media&lt;/span> &lt;span class="nt">not&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="nt">only&lt;/span> &lt;span class="nt">mediatype&lt;/span> &lt;span class="nt">and&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="nt">mediafeature&lt;/span> &lt;span class="nt">and&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="nt">or&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="nt">not&lt;/span> &lt;span class="nt">mediafeature&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">CSS-Code&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="media-types">Media Types
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">Value&lt;/th>
&lt;th style="text-align: left">Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">all&lt;/td>
&lt;td style="text-align: left">Default. Used for all media type devices&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">print&lt;/td>
&lt;td style="text-align: left">Used for printers&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">screen&lt;/td>
&lt;td style="text-align: left">Used for computer screens, tablets, smart-phones etc.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">speech&lt;/td>
&lt;td style="text-align: left">Used for screenreaders that &amp;ldquo;reads&amp;rdquo; the page out loud&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="media-features">Media Features
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">Value&lt;/th>
&lt;th style="text-align: left">Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">any-hover&lt;/td>
&lt;td style="text-align: left">Does any available input mechanism allow the user to hover over elements? (added in Media Queries Level 4)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">any-pointer&lt;/td>
&lt;td style="text-align: left">Is any available input mechanism a pointing device, and if so, how accurate is it? (added in Media Queries Level 4)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">aspect-ratio&lt;/td>
&lt;td style="text-align: left">The ratio between the width and the height of the viewport&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">color&lt;/td>
&lt;td style="text-align: left">The number of bits per color component for the output device&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">color-gamut&lt;/td>
&lt;td style="text-align: left">The approximate range of colors that are supported by the user agent and output device (added in Media Queries Level 4)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">color-index&lt;/td>
&lt;td style="text-align: left">The number of colors the device can display&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">grid&lt;/td>
&lt;td style="text-align: left">Whether the device is a grid or bitmap&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">height&lt;/td>
&lt;td style="text-align: left">The viewport height&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">hover&lt;/td>
&lt;td style="text-align: left">Does the primary input mechanism allow the user to hover over elements? (added in Media Queries Level 4)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">inverted-colors&lt;/td>
&lt;td style="text-align: left">Is the browser or underlying OS inverting colors? (added in Media Queries Level 4)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">light-level&lt;/td>
&lt;td style="text-align: left">Current ambient light level (added in Media Queries Level 4)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">max-aspect-ratio&lt;/td>
&lt;td style="text-align: left">The maximum ratio between the width and the height of the display area&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">max-color&lt;/td>
&lt;td style="text-align: left">The maximum number of bits per color component for the output device&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">max-color-index&lt;/td>
&lt;td style="text-align: left">The maximum number of colors the device can display&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">max-height&lt;/td>
&lt;td style="text-align: left">The maximum height of the display area, such as a browser window&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">max-monochrome&lt;/td>
&lt;td style="text-align: left">The maximum number of bits per &amp;ldquo;color&amp;rdquo; on a monochrome (greyscale) device&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">max-resolution&lt;/td>
&lt;td style="text-align: left">The maximum resolution of the device, using dpi or dpcm&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">max-width&lt;/td>
&lt;td style="text-align: left">The maximum width of the display area, such as a browser window&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">min-aspect-ratio&lt;/td>
&lt;td style="text-align: left">The minimum ratio between the width and the height of the display area&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">min-color&lt;/td>
&lt;td style="text-align: left">The minimum number of bits per color component for the output device&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">min-color-index&lt;/td>
&lt;td style="text-align: left">The minimum number of colors the device can display&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">min-height&lt;/td>
&lt;td style="text-align: left">The minimum height of the display area, such as a browser window&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">min-monochrome&lt;/td>
&lt;td style="text-align: left">The minimum number of bits per &amp;ldquo;color&amp;rdquo; on a monochrome (greyscale) device&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">min-resolution&lt;/td>
&lt;td style="text-align: left">The minimum resolution of the device, using dpi or dpcm&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">min-width&lt;/td>
&lt;td style="text-align: left">The minimum width of the display area, such as a browser window&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">monochrome&lt;/td>
&lt;td style="text-align: left">The number of bits per &amp;ldquo;color&amp;rdquo; on a monochrome (greyscale) device&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">orientation&lt;/td>
&lt;td style="text-align: left">The orientation of the viewport (landscape or portrait mode)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">overflow-block&lt;/td>
&lt;td style="text-align: left">How does the output device handle content that overflows the viewport along the block axis (added in Media Queries Level 4)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">overflow-inline&lt;/td>
&lt;td style="text-align: left">Can content that overflows the viewport along the inline axis be scrolled (added in Media Queries Level 4)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">pointer&lt;/td>
&lt;td style="text-align: left">Is the primary input mechanism a pointing device, and if so, how accurate is it? (added in Media Queries Level 4)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">resolution&lt;/td>
&lt;td style="text-align: left">The resolution of the output device, using dpi or dpcm&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">scan&lt;/td>
&lt;td style="text-align: left">The scanning process of the output device&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">scripting&lt;/td>
&lt;td style="text-align: left">Is scripting (e.g. JavaScript) available? (added in Media Queries Level 4)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">update&lt;/td>
&lt;td style="text-align: left">How quickly can the output device modify the appearance of the content (added in Media Queries Level 4)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">width&lt;/td>
&lt;td style="text-align: left">The viewport width&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>e.g.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="c">/* changes the background-color to lightgreen if the viewport is 480 pixels wide or wider */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">@&lt;/span>&lt;span class="k">media&lt;/span> &lt;span class="nt">screen&lt;/span> &lt;span class="nt">and&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="nt">min-width&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nt">480px&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">body&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">lightgreen&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="variables">Variables
&lt;/h2>&lt;p>The &lt;code>var()&lt;/code> function is used to insert the value of a CSS variable.&lt;/p>
&lt;p>CSS variables have access to the DOM, which means that you can create variables with local or global scope, change the variables with JavaScript, and change the variables based on media queries.&lt;/p>
&lt;p>A good way to use CSS variables is when it comes to the &lt;strong>colors&lt;/strong> of your design. Instead of copy and paste the same colors over and over again, you can place them in variables.&lt;/p>
&lt;blockquote>
&lt;p>var(&amp;ndash;&lt;em>name, value&lt;/em>)&lt;/p>
&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;em>name&lt;/em>&lt;/th>
&lt;th>Required. The variable name (must start with two dashes)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;em>value&lt;/em>&lt;/td>
&lt;td>Optional. The fallback value (used if the variable is not found)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="global-and-local">global and local
&lt;/h3>&lt;p>CSS variables can have a global or local scope.&lt;/p>
&lt;p>Global variables can be accessed/used through the entire document, while local variables can be used only inside the selector where it is declared.&lt;/p>
&lt;p>To create a variable with global scope, declare it inside the &lt;code>:root&lt;/code> selector. The &lt;code>:root&lt;/code> selector matches the document&amp;rsquo;s root element.&lt;/p>
&lt;p>To create a variable with local scope, declare it inside the selector that is going to use it.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="p">:&lt;/span>&lt;span class="nd">root&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">--blue&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mh">#1e90ff&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">--white&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mh">#ffffff&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">body&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nf">var&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="kc">blue&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">h2&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">border-bottom&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="kc">solid&lt;/span> &lt;span class="nf">var&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="kc">blue&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="nc">container&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nf">var&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="kc">blue&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nf">var&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="kc">white&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">padding&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">15&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">button&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nf">var&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="kc">white&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nf">var&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="kc">blue&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">border&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="kc">solid&lt;/span> &lt;span class="nf">var&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="kc">blue&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">padding&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="override">override
&lt;/h3>&lt;p>we can re-declare the &amp;ndash;blue variable inside a specific selector. When we use var(&amp;ndash;blue) inside this selector, it will use the local variable redeclared within it.&lt;/p>
&lt;h3 id="with-javascript">with javascript
&lt;/h3>&lt;p>CSS variables have access to the DOM, which means that you can change them with JavaScript.&lt;/p>
&lt;h2 id="responsive">Responsive
&lt;/h2>&lt;h3 id="viewport">Viewport
&lt;/h3>&lt;p>HTML5 introduced a method to let web designers take control over the viewport, through the &lt;code>&amp;lt;meta&amp;gt;&lt;/code> tag.&lt;/p>
&lt;p>You should include the following &lt;code>&amp;lt;meta&amp;gt;&lt;/code> viewport element in all your web pages:&lt;/p>
&lt;p>&amp;lt;meta name=&amp;ldquo;viewport&amp;rdquo; content=&amp;ldquo;width=device-width, initial-scale=1.0&amp;rdquo;&amp;gt;&lt;/p>
&lt;p>This gives the browser instructions on how to control the page&amp;rsquo;s dimensions and scaling.&lt;/p>
&lt;p>The &lt;code>width=device-width&lt;/code> part sets the width of the page to follow the screen-width of the device (which will vary depending on the device).&lt;/p>
&lt;p>The &lt;code>initial-scale=1.0&lt;/code> part sets the initial zoom level when the page is first loaded by the browser.&lt;/p>
&lt;h3 id="media-queries-1">Media Queries
&lt;/h3>&lt;p>Media Queries are about defining different style rules for different devices (screens, tablets, mobile phones, etc.)&lt;/p>
&lt;h2 id="others">Others
&lt;/h2>&lt;h3 id="object-fit">&lt;code>object-fit&lt;/code>
&lt;/h3>&lt;p>The CSS &lt;code>object-fit&lt;/code> property is used to specify how an &lt;img> or &lt;video> should be resized to fit its container.&lt;/p>
&lt;ul>
&lt;li>&lt;code>fill&lt;/code> - This is default. The image is resized to fill the given dimension. If necessary, the image will be stretched or squished to fit&lt;/li>
&lt;li>&lt;code>contain&lt;/code> - The image keeps its aspect ratio, but is resized to fit within the given dimension&lt;/li>
&lt;li>&lt;code>cover&lt;/code> - The image keeps its aspect ratio and fills the given dimension. The image will be clipped to fit&lt;/li>
&lt;li>&lt;code>none&lt;/code> - The image is not resized&lt;/li>
&lt;li>&lt;code>scale-down&lt;/code> - the image is scaled down to the smallest version of &lt;code>none&lt;/code> or &lt;code>contain&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="object-position">&lt;code>object-position&lt;/code>
&lt;/h3>&lt;h3 id="masking">Masking
&lt;/h3>&lt;p>With CSS masking you create a mask layer to place over an element to partially or fully hide portions of the element.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> Most browsers only have partial support for CSS masking. You will need to use the -webkit- prefix in addition to the standard property in most browsers.&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="nc">mask1&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kp">-webkit-&lt;/span>&lt;span class="k">mask-image&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">url&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sx">w3logo.png&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">mask-image&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">url&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sx">w3logo.png&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kp">-webkit-&lt;/span>&lt;span class="k">mask-repeat&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">no-repeat&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">mask-repeat&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">no-repeat&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="user-interface">User Interface
&lt;/h3>&lt;ul>
&lt;li>&lt;code>resize&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>The &lt;code>resize&lt;/code> property specifies if (and how) an element should be resizable by the user.&lt;/p>
&lt;ul>
&lt;li>&lt;code>outline-offset&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>The &lt;code>outline-offset&lt;/code> property adds space between an outline and the edge or border of an element.&lt;/p></description></item><item><title>【HTML】 Basics</title><link>https://dyhes.github.io/p/html-basics/</link><pubDate>Fri, 16 Apr 2021 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/html-basics/</guid><description>&lt;h2 id="iframe">&lt;code>&amp;lt;iframe&amp;gt;&lt;/code>
&lt;/h2>&lt;p>An iframe can be used as the target frame for a link.&lt;/p>
&lt;p>The &lt;code>target&lt;/code> attribute of the link must refer to the &lt;code>name&lt;/code> attribute of the iframe:&lt;/p>
&lt;h2 id="meta">&lt;code>&amp;lt;meta&amp;gt;&lt;/code>
&lt;/h2>&lt;p>The &lt;code>&amp;lt;meta&amp;gt;&lt;/code> element is typically used to specify the character set, page description, keywords, author of the document, and viewport settings. The metadata will &lt;strong>not be displayed&lt;/strong> on the page, but are &lt;strong>used by browsers&lt;/strong> (how to display content or reload page), by &lt;strong>search engines&lt;/strong> (keywords), and other web services.&lt;/p>
&lt;ul>
&lt;li>Define the &lt;strong>character set&lt;/strong> used:&lt;/li>
&lt;/ul>
&lt;p>&amp;lt;meta charset=&amp;ldquo;UTF-8&amp;rdquo;&amp;gt;&lt;/p>
&lt;ul>
&lt;li>Define &lt;strong>keywords&lt;/strong> for &lt;strong>search engines&lt;/strong>:&lt;/li>
&lt;/ul>
&lt;p>&amp;lt;meta name=&amp;ldquo;keywords&amp;rdquo; content=&amp;ldquo;HTML, CSS, JavaScript&amp;rdquo;&amp;gt;&lt;/p>
&lt;ul>
&lt;li>Define a &lt;strong>description&lt;/strong> of your web page:&lt;/li>
&lt;/ul>
&lt;p>&amp;lt;meta name=&amp;ldquo;description&amp;rdquo; content=&amp;ldquo;Free Web tutorials&amp;rdquo;&amp;gt;&lt;/p>
&lt;ul>
&lt;li>Define the &lt;strong>author&lt;/strong> of a page:&lt;/li>
&lt;/ul>
&lt;p>&amp;lt;meta name=&amp;ldquo;author&amp;rdquo; content=&amp;ldquo;John Doe&amp;rdquo;&amp;gt;&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Refresh&lt;/strong> document every 30 seconds:&lt;/li>
&lt;/ul>
&lt;p>&amp;lt;meta http-equiv=&amp;ldquo;refresh&amp;rdquo; content=&amp;ldquo;30&amp;rdquo;&amp;gt;&lt;/p>
&lt;ul>
&lt;li>Setting the &lt;strong>viewport&lt;/strong> to make your website look good on all devices:&lt;/li>
&lt;/ul>
&lt;p>&amp;lt;meta name=&amp;ldquo;viewport&amp;rdquo; content=&amp;ldquo;width=device-width, initial-scale=1.0&amp;rdquo;&amp;gt;&lt;/p>
&lt;h2 id="base">base
&lt;/h2>&lt;p>he &lt;code>&amp;lt;base&amp;gt;&lt;/code> element specifies the base URL and/or target for all relative URLs in a page.&lt;/p>
&lt;p>The &lt;code>&amp;lt;base&amp;gt;&lt;/code> tag must have either an href or a target attribute present, or both.&lt;/p>
&lt;p>There can only be one single &lt;code>&amp;lt;base&amp;gt;&lt;/code> element in a document!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">base&lt;/span> &lt;span class="na">href&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://www.w3schools.com/&amp;#34;&lt;/span> &lt;span class="na">target&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;_blank&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="layout">Layout
&lt;/h2>&lt;p>There are four different techniques to create multicolumn layouts. Each technique has its pros and cons:&lt;/p>
&lt;ul>
&lt;li>CSS framework&lt;/li>
&lt;li>CSS float property&lt;/li>
&lt;li>CSS flexbox&lt;/li>
&lt;li>CSS grid&lt;/li>
&lt;/ul>
&lt;h2 id="segmentic">Segmentic
&lt;/h2>&lt;p>In HTML there are some semantic elements that can be used to define different parts of a web page:&lt;/p>
&lt;ul>
&lt;li>
&lt;article>
&lt;/li>
&lt;li>
&lt;aside>
&lt;/li>
&lt;li>
&lt;details>
&lt;/li>
&lt;li>
&lt;figcaption>
&lt;/li>
&lt;li>
&lt;figure>
&lt;/li>
&lt;li>
&lt;footer>
&lt;/li>
&lt;li>
&lt;header>
&lt;/li>
&lt;li>
&lt;main>
&lt;/li>
&lt;li>
&lt;mark>
&lt;/li>
&lt;li>
&lt;nav>
&lt;/li>
&lt;li>
&lt;section>
&lt;/li>
&lt;li>
&lt;summary>
&lt;/li>
&lt;li>
&lt;time>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="C:%5cUsers%5cdyhes%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20220128132450001.png"
loading="lazy"
alt="image-20220128132450001"
>&lt;/p>
&lt;h2 id="form">Form
&lt;/h2>&lt;h3 id="attribute">Attribute
&lt;/h3>&lt;h4 id="action">Action
&lt;/h4>&lt;p>The &lt;code>action&lt;/code> attribute defines the action to be performed when the form is submitted.&lt;/p>
&lt;p>&lt;strong>Tip:&lt;/strong> If the &lt;code>action&lt;/code> attribute is omitted, the action is set to the current page.&lt;/p>
&lt;h4 id="target">Target
&lt;/h4>&lt;p>The &lt;code>target&lt;/code> attribute can have one of the following values:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">Value&lt;/th>
&lt;th style="text-align: left">Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">_blank&lt;/td>
&lt;td style="text-align: left">The response is displayed in a new window or tab&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">_self&lt;/td>
&lt;td style="text-align: left">The response is displayed in the current window&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">_parent&lt;/td>
&lt;td style="text-align: left">The response is displayed in the parent frame&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">_top&lt;/td>
&lt;td style="text-align: left">The response is displayed in the full body of the window&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;em>framename&lt;/em>&lt;/td>
&lt;td style="text-align: left">The response is displayed in a named iframe&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>The default value is &lt;code>_self&lt;/code> which means that the response will open in the current window.&lt;/p>
&lt;h4 id="method">Method
&lt;/h4>&lt;p>The &lt;code>method&lt;/code> attribute specifies the HTTP method to be used when submitting the form data.&lt;/p>
&lt;p>The form-data can be sent as URL variables (with &lt;code>method=&amp;quot;get&amp;quot;&lt;/code>) or as HTTP post transaction (with &lt;code>method=&amp;quot;post&amp;quot;&lt;/code>).&lt;/p>
&lt;p>The default HTTP method when submitting form data is GET.&lt;/p>
&lt;p>&lt;strong>Notes on GET:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Appends the form data to the URL, in name/value pairs&lt;/li>
&lt;li>NEVER use GET to send sensitive data! (the submitted form data is visible in the URL!)&lt;/li>
&lt;li>The length of a URL is limited (2048 characters)&lt;/li>
&lt;li>Useful for form submissions where a user wants to bookmark the result&lt;/li>
&lt;li>GET is good for non-secure data, like query strings in Google&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Notes on POST:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Appends the form data inside the body of the HTTP request (the submitted form data is not shown in the URL)&lt;/li>
&lt;li>POST has no size limitations, and can be used to send large amounts of data.&lt;/li>
&lt;li>Form submissions with POST cannot be bookmarked&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Tip:&lt;/strong> Always use POST if the form data contains sensitive or personal information!&lt;/p>
&lt;h4 id="autocomplete">Autocomplete
&lt;/h4>&lt;p>The &lt;code>autocomplete&lt;/code> attribute specifies whether a form should have autocomplete on or off.&lt;/p>
&lt;p>When autocomplete is on, the browser automatically complete values based on values that the user has entered before.&lt;/p>
&lt;h4 id="novalidate">Novalidate
&lt;/h4>&lt;p>The &lt;code>novalidate&lt;/code> attribute is a boolean attribute.&lt;/p>
&lt;p>When present, it specifies that the form-data (input) should not be validated when submitted.&lt;/p>
&lt;h4 id="other">other
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">Attribute&lt;/th>
&lt;th style="text-align: left">Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/tags/att_form_accept_charset.asp" target="_blank" rel="noopener"
>accept-charset&lt;/a>&lt;/td>
&lt;td style="text-align: left">Specifies the character encodings used for form submission&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/tags/att_form_action.asp" target="_blank" rel="noopener"
>action&lt;/a>&lt;/td>
&lt;td style="text-align: left">Specifies where to send the form-data when a form is submitted&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/tags/att_form_autocomplete.asp" target="_blank" rel="noopener"
>autocomplete&lt;/a>&lt;/td>
&lt;td style="text-align: left">Specifies whether a form should have autocomplete on or off&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/tags/att_form_enctype.asp" target="_blank" rel="noopener"
>enctype&lt;/a>&lt;/td>
&lt;td style="text-align: left">Specifies how the form-data should be encoded when submitting it to the server (only for method=&amp;ldquo;post&amp;rdquo;)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/tags/att_form_method.asp" target="_blank" rel="noopener"
>method&lt;/a>&lt;/td>
&lt;td style="text-align: left">Specifies the HTTP method to use when sending form-data&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/tags/att_form_name.asp" target="_blank" rel="noopener"
>name&lt;/a>&lt;/td>
&lt;td style="text-align: left">Specifies the name of the form&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/tags/att_form_novalidate.asp" target="_blank" rel="noopener"
>novalidate&lt;/a>&lt;/td>
&lt;td style="text-align: left">Specifies that the form should not be validated when submitted&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/tags/att_form_rel.asp" target="_blank" rel="noopener"
>rel&lt;/a>&lt;/td>
&lt;td style="text-align: left">Specifies the relationship between a linked resource and the current document&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/tags/att_form_target.asp" target="_blank" rel="noopener"
>target&lt;/a>&lt;/td>
&lt;td style="text-align: left">Specifies where to display the response that is received after submitting the form&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="element">Element
&lt;/h3>&lt;p>The HTML &lt;code>&amp;lt;form&amp;gt;&lt;/code> element can contain one or more of the following form elements:&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;lt;input&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>&amp;lt;label&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>&amp;lt;select&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>&amp;lt;textarea&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>&amp;lt;button&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>&amp;lt;fieldset&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>&amp;lt;legend&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>&amp;lt;datalist&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>&amp;lt;output&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>&amp;lt;option&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>&amp;lt;optgroup&amp;gt;&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="input">input
&lt;/h4>&lt;p>The HTML &lt;code>&amp;lt;input&amp;gt;&lt;/code> element is the most used form element.&lt;/p>
&lt;p>An &lt;code>&amp;lt;input&amp;gt;&lt;/code> element can be displayed in many ways, depending on the &lt;code>type&lt;/code> attribute.&lt;/p>
&lt;p>Here are some examples:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">Type&lt;/th>
&lt;th style="text-align: left">Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">&lt;input type="text">&lt;/td>
&lt;td style="text-align: left">Displays a single-line text input field, If the &lt;code>name&lt;/code> attribute is omitted, the value of the input field will not be sent at all.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;input type="radio">&lt;/td>
&lt;td style="text-align: left">Displays a radio button (for selecting one of many choices)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;input type="checkbox">&lt;/td>
&lt;td style="text-align: left">Displays a checkbox (for selecting zero or more of many choices)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;input type="submit">&lt;/td>
&lt;td style="text-align: left">Displays a submit button (for submitting the form),The form-handler is specified in the form&amp;rsquo;s &lt;code>action&lt;/code> attribute.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;input type="button">&lt;/td>
&lt;td style="text-align: left">Displays a clickable button&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="label">label
&lt;/h4>&lt;p>The &lt;code>&amp;lt;label&amp;gt;&lt;/code> element is useful for screen-reader users, because the screen-reader will read out loud the label when the user focus on the input element.&lt;/p>
&lt;p>The &lt;code>&amp;lt;label&amp;gt;&lt;/code> element also help users who have difficulty clicking on very small regions (such as radio buttons or checkboxes) - because when the user clicks the text within the &lt;code>&amp;lt;label&amp;gt;&lt;/code> element, it toggles the radio button/checkbox.&lt;/p>
&lt;p>The &lt;code>for&lt;/code> attribute of the &lt;code>&amp;lt;label&amp;gt;&lt;/code> tag should be equal to the &lt;code>id&lt;/code> attribute of the &lt;code>&amp;lt;input&amp;gt;&lt;/code> element to bind them together.&lt;/p>
&lt;h4 id="selectoption">select,option
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">label&lt;/span> &lt;span class="na">for&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;cars&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Choose a car:&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">label&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">select&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;cars&amp;#34;&lt;/span> &lt;span class="na">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;cars&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">option&lt;/span> &lt;span class="na">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;volvo&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Volvo&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">option&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">option&lt;/span> &lt;span class="na">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;saab&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Saab&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">option&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">option&lt;/span> &lt;span class="na">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;fiat&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Fiat&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">option&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">option&lt;/span> &lt;span class="na">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;audi&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Audi&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">option&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">select&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>&amp;lt;option&amp;gt;&lt;/code> elements defines an option that can be selected.&lt;/p>
&lt;p>By default, the first item in the drop-down list is selected.&lt;/p>
&lt;p>To define a pre-selected option, add the &lt;code>selected&lt;/code> attribute to the option&lt;/p>
&lt;p>Use the &lt;code>multiple&lt;/code> attribute to allow the user to select more than one value&lt;/p>
&lt;h4 id="textarea">textarea
&lt;/h4>&lt;p>the &lt;code>&amp;lt;textarea&amp;gt;&lt;/code> element defines a multi-line input field (a text area)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">textarea&lt;/span> &lt;span class="na">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;message&amp;#34;&lt;/span> &lt;span class="na">rows&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;10&amp;#34;&lt;/span> &lt;span class="na">cols&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;30&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">The cat was playing in the garden.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">textarea&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="fieldsetlegend">fieldset,legend
&lt;/h4>&lt;p>The &lt;code>&amp;lt;fieldset&amp;gt;&lt;/code> element is used to group related data in a form.&lt;/p>
&lt;p>The &lt;code>&amp;lt;legend&amp;gt;&lt;/code> element defines a caption for the &lt;code>&amp;lt;fieldset&amp;gt;&lt;/code> element.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">form&lt;/span> &lt;span class="na">action&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;/action_page.php&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">fieldset&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">legend&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Personalia:&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">legend&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">label&lt;/span> &lt;span class="na">for&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;fname&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>First name:&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">label&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">br&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;text&amp;#34;&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;fname&amp;#34;&lt;/span> &lt;span class="na">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;fname&amp;#34;&lt;/span> &lt;span class="na">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;John&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">br&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">label&lt;/span> &lt;span class="na">for&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;lname&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Last name:&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">label&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">br&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;text&amp;#34;&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;lname&amp;#34;&lt;/span> &lt;span class="na">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;lname&amp;#34;&lt;/span> &lt;span class="na">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;Doe&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">br&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;&lt;/span>&lt;span class="nt">br&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;submit&amp;#34;&lt;/span> &lt;span class="na">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;Submit&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">fieldset&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">form&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="datalist">datalist
&lt;/h4>&lt;p>The &lt;code>&amp;lt;datalist&amp;gt;&lt;/code> element specifies a list of pre-defined options for an &lt;code>&amp;lt;input&amp;gt;&lt;/code> element.&lt;/p>
&lt;p>Users will see a drop-down list of the pre-defined options as they input data.&lt;/p>
&lt;p>The &lt;code>list&lt;/code> attribute of the &lt;code>&amp;lt;input&amp;gt;&lt;/code> element, must refer to the &lt;code>id&lt;/code> attribute of the &lt;code>&amp;lt;datalist&amp;gt;&lt;/code> element.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">form&lt;/span> &lt;span class="na">action&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;/action_page.php&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">input&lt;/span> &lt;span class="na">list&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;browsers&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">datalist&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;browsers&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">option&lt;/span> &lt;span class="na">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;Internet Explorer&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">option&lt;/span> &lt;span class="na">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;Firefox&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">option&lt;/span> &lt;span class="na">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;Chrome&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">option&lt;/span> &lt;span class="na">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;Opera&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">option&lt;/span> &lt;span class="na">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;Safari&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">datalist&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">form&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="graphics">Graphics
&lt;/h2>&lt;h3 id="canvas">Canvas
&lt;/h3>&lt;p>The HTML &lt;code>&amp;lt;canvas&amp;gt;&lt;/code> element is used to draw graphics, on the fly, via JavaScript.&lt;/p>
&lt;p>The &lt;code>&amp;lt;canvas&amp;gt;&lt;/code> element is only a container for graphics. You must use JavaScript to actually draw the graphics.&lt;/p>
&lt;p>Canvas has several methods for drawing paths, boxes, circles, text, and adding images.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> Always specify an &lt;code>id&lt;/code> attribute (to be referred to in a script), and a &lt;code>width&lt;/code> and &lt;code>height&lt;/code> attribute to define the size of the canvas. To add a border, use the &lt;code>style&lt;/code> attribute.&lt;/p>
&lt;h3 id="svg">SVG
&lt;/h3>&lt;ul>
&lt;li>SVG stands for Scalable Vector Graphics&lt;/li>
&lt;li>SVG is used to define graphics for the Web&lt;/li>
&lt;li>SVG is a W3C recommendation&lt;/li>
&lt;/ul>
&lt;p>SVG is a language for describing 2D graphics in XML.&lt;/p>
&lt;p>Canvas draws 2D graphics, on the fly (with a JavaScript).&lt;/p>
&lt;p>SVG is XML based, which means that every element is available within the SVG DOM. You can attach JavaScript event handlers for an element.&lt;/p>
&lt;p>In SVG, each drawn shape is remembered as an object. If attributes of an SVG object are changed, the browser can automatically re-render the shape.&lt;/p>
&lt;p>Canvas is rendered pixel by pixel. In canvas, once the graphic is drawn, it is forgotten by the browser. If its position should be changed, the entire scene needs to be redrawn, including any objects that might have been covered by the graphic.&lt;/p></description></item><item><title>【Python】Matplotlib</title><link>https://dyhes.github.io/p/pythonmatplotlib/</link><pubDate>Thu, 14 Jan 2021 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/pythonmatplotlib/</guid><description>&lt;p>Matplotlib is a low level graph plotting library in python that serves as a visualization utility.&lt;/p>
&lt;p>Matplotlib was created by John D. Hunter.&lt;/p>
&lt;p>Most of the Matplotlib utilities lies under the &lt;code>pyplot&lt;/code> submodule, and are usually imported under the &lt;code>plt&lt;/code> alias.&lt;/p>
&lt;h2 id="plotting">Plotting
&lt;/h2>&lt;p>The &lt;code>plot()&lt;/code> function is used to draw points (markers) in a diagram.&lt;/p>
&lt;p>To plot only the markers, you can use &lt;em>shortcut string notation&lt;/em> parameter &amp;lsquo;o&amp;rsquo;, which means &amp;lsquo;rings&amp;rsquo;.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">xpoints&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ypoints&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">plot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">xpoints&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ypoints&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;o&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">show&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If we do not specify the points in the x-axis, they will get the default values 0, 1, 2, 3,&lt;/p>
&lt;h3 id="maker">Maker
&lt;/h3>&lt;p>You can use the keyword argument &lt;code>marker&lt;/code> to emphasize each point with a specified marker&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">plot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ypoints&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;o:r&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## marker|line|color&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">show&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">Marker&lt;/th>
&lt;th style="text-align: left">Description&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">&amp;lsquo;o&amp;rsquo;&lt;/td>
&lt;td style="text-align: left">Circle&lt;/td>
&lt;td>&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_matplotlib_marker_o" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&amp;lsquo;*&amp;rsquo;&lt;/td>
&lt;td style="text-align: left">Star&lt;/td>
&lt;td>&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_matplotlib_marker_star" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&amp;lsquo;.&amp;rsquo;&lt;/td>
&lt;td style="text-align: left">Point&lt;/td>
&lt;td>&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_matplotlib_marker_point" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&amp;lsquo;,&amp;rsquo;&lt;/td>
&lt;td style="text-align: left">Pixel&lt;/td>
&lt;td>&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_matplotlib_marker_pixel" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&amp;lsquo;x&amp;rsquo;&lt;/td>
&lt;td style="text-align: left">X&lt;/td>
&lt;td>&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_matplotlib_marker_x" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&amp;lsquo;X&amp;rsquo;&lt;/td>
&lt;td style="text-align: left">X (filled)&lt;/td>
&lt;td>&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_matplotlib_marker_x_filled" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&amp;lsquo;+&amp;rsquo;&lt;/td>
&lt;td style="text-align: left">Plus&lt;/td>
&lt;td>&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_matplotlib_marker_plus" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&amp;lsquo;P&amp;rsquo;&lt;/td>
&lt;td style="text-align: left">Plus (filled)&lt;/td>
&lt;td>&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_matplotlib_marker_plus_filled" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&amp;rsquo;s&amp;rsquo;&lt;/td>
&lt;td style="text-align: left">Square&lt;/td>
&lt;td>&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_matplotlib_marker_s" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&amp;lsquo;D&amp;rsquo;&lt;/td>
&lt;td style="text-align: left">Diamond&lt;/td>
&lt;td>&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_matplotlib_marker_D" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&amp;rsquo;d'&lt;/td>
&lt;td style="text-align: left">Diamond (thin)&lt;/td>
&lt;td>&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_matplotlib_marker_thin_d" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&amp;lsquo;p&amp;rsquo;&lt;/td>
&lt;td style="text-align: left">Pentagon&lt;/td>
&lt;td>&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_matplotlib_marker_p" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&amp;lsquo;H&amp;rsquo;&lt;/td>
&lt;td style="text-align: left">Hexagon&lt;/td>
&lt;td>&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_matplotlib_marker_H" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&amp;lsquo;h&amp;rsquo;&lt;/td>
&lt;td style="text-align: left">Hexagon&lt;/td>
&lt;td>&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_matplotlib_marker_hexagon" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&amp;lsquo;v&amp;rsquo;&lt;/td>
&lt;td style="text-align: left">Triangle Down&lt;/td>
&lt;td>&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_matplotlib_marker_v" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&amp;lsquo;^&amp;rsquo;&lt;/td>
&lt;td style="text-align: left">Triangle Up&lt;/td>
&lt;td>&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_matplotlib_marker_triangle_up" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&amp;lsquo;&amp;lt;&amp;rsquo;&lt;/td>
&lt;td style="text-align: left">Triangle Left&lt;/td>
&lt;td>&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_matplotlib_marker_triangle_left" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&amp;lsquo;&amp;gt;&amp;rsquo;&lt;/td>
&lt;td style="text-align: left">Triangle Right&lt;/td>
&lt;td>&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_matplotlib_marker_triangle_right" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&amp;lsquo;1&amp;rsquo;&lt;/td>
&lt;td style="text-align: left">Tri Down&lt;/td>
&lt;td>&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_matplotlib_marker_1" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&amp;lsquo;2&amp;rsquo;&lt;/td>
&lt;td style="text-align: left">Tri Up&lt;/td>
&lt;td>&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_matplotlib_marker_2" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&amp;lsquo;3&amp;rsquo;&lt;/td>
&lt;td style="text-align: left">Tri Left&lt;/td>
&lt;td>&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_matplotlib_marker_3" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&amp;lsquo;4&amp;rsquo;&lt;/td>
&lt;td style="text-align: left">Tri Right&lt;/td>
&lt;td>&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_matplotlib_marker_4" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&amp;lsquo;|&amp;rsquo;&lt;/td>
&lt;td style="text-align: left">Vline&lt;/td>
&lt;td>&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_matplotlib_marker_vline" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&amp;lsquo;_&amp;rsquo;&lt;/td>
&lt;td style="text-align: left">Hline&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">Line Syntax&lt;/th>
&lt;th style="text-align: left">Description&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">&amp;lsquo;-&amp;rsquo;&lt;/td>
&lt;td style="text-align: left">Solid line&lt;/td>
&lt;td>&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_matplotlib_fmt_line_solid" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&amp;lsquo;:&amp;rsquo;&lt;/td>
&lt;td style="text-align: left">Dotted line&lt;/td>
&lt;td>&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_matplotlib_fmt_line_dot" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&amp;lsquo;&amp;ndash;&amp;rsquo;&lt;/td>
&lt;td style="text-align: left">Dashed line&lt;/td>
&lt;td>&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_matplotlib_fmt_line_dash" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&amp;lsquo;-.&amp;rsquo;&lt;/td>
&lt;td style="text-align: left">Dashed/dotted line&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">Color Syntax&lt;/th>
&lt;th style="text-align: left">Description&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">&amp;lsquo;r&amp;rsquo;&lt;/td>
&lt;td style="text-align: left">Red&lt;/td>
&lt;td>&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_matplotlib_fmt_r" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&amp;lsquo;g&amp;rsquo;&lt;/td>
&lt;td style="text-align: left">Green&lt;/td>
&lt;td>&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_matplotlib_fmt_g" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&amp;lsquo;b&amp;rsquo;&lt;/td>
&lt;td style="text-align: left">Blue&lt;/td>
&lt;td>&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_matplotlib_fmt_b" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&amp;lsquo;c&amp;rsquo;&lt;/td>
&lt;td style="text-align: left">Cyan&lt;/td>
&lt;td>&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_matplotlib_fmt_c" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&amp;rsquo;m'&lt;/td>
&lt;td style="text-align: left">Magenta&lt;/td>
&lt;td>&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_matplotlib_fmt_m" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&amp;lsquo;y&amp;rsquo;&lt;/td>
&lt;td style="text-align: left">Yellow&lt;/td>
&lt;td>&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_matplotlib_fmt_y" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&amp;lsquo;k&amp;rsquo;&lt;/td>
&lt;td style="text-align: left">Black&lt;/td>
&lt;td>&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_matplotlib_fmt_k" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&amp;lsquo;w&amp;rsquo;&lt;/td>
&lt;td style="text-align: left">White&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>You can use the keyword argument &lt;code>markersize&lt;/code> or the shorter version, &lt;code>ms&lt;/code> to set the size of the markers.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">plt&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">plot&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ypoints&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">marker&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;o&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ms&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>【Python】Numpy</title><link>https://dyhes.github.io/p/pythonnumpy/</link><pubDate>Wed, 13 Jan 2021 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/pythonnumpy/</guid><description>&lt;h2 id="introduction">Introduction
&lt;/h2>&lt;p>NumPy short for &amp;ldquo;Numerical Python&amp;rdquo; is a Python library, which is used for working with arrays.&lt;/p>
&lt;p>In Python we have lists that serve the purpose of arrays, but they are slow to process.&lt;/p>
&lt;p>NumPy aims to provide an array object that is &lt;strong>up to 50x faster&lt;/strong> than traditional Python lists. ( NumPy arrays are stored at one continuous place in memory unlike lists, so processes can access and manipulate them very efficiently. )&lt;/p>
&lt;p>The array object in NumPy is called &lt;code>ndarray&lt;/code>, it provides a lot of supporting functions that make working with &lt;code>ndarray&lt;/code> very easy.&lt;/p>
&lt;h2 id="creacte-ndarray-object">Creacte &lt;code>ndarray&lt;/code> Object
&lt;/h2>&lt;p>To create an &lt;code>ndarray&lt;/code>, we can pass a list, tuple or any array-like object into the &lt;code>array()&lt;/code> method, and it will be converted into an &lt;code>ndarray&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A dimension in arrays is one level of array depth (nested arrays).&lt;/p>
&lt;blockquote>
&lt;p>NumPy has a whole sub module dedicated towards matrix operations called &lt;code>numpy.mat&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>NumPy Arrays provides the &lt;code>ndim&lt;/code> attribute whicht is an integer that tells us how many dimensions the array have.&lt;/p>
&lt;h2 id="access">Access
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">d1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">d2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">d3&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="slicing">Slicing
&lt;/h2>&lt;ul>
&lt;li>&lt;code>[start:end]&lt;/code>.&lt;/li>
&lt;li>&lt;code>[start:end:step]&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>If we don&amp;rsquo;t pass start its considered 0&lt;/p>
&lt;p>If we don&amp;rsquo;t pass end its considered length of array in that dimension&lt;/p>
&lt;p>If we don&amp;rsquo;t pass step its considered 1&lt;/p>
&lt;blockquote>
&lt;p>The result &lt;em>includes&lt;/em> the start index, but &lt;em>excludes&lt;/em> the end index.&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#slicing 2-D Arrays&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="data-types">Data Types
&lt;/h2>&lt;p>NumPy has some extra data types, and refer to data types with one character, like &lt;code>i&lt;/code> for integers, &lt;code>u&lt;/code> for unsigned integers etc.&lt;/p>
&lt;p>Below is a list of all data types in NumPy and the characters used to represent them.&lt;/p>
&lt;ul>
&lt;li>&lt;code>i&lt;/code> - integer&lt;/li>
&lt;li>&lt;code>b&lt;/code> - boolean&lt;/li>
&lt;li>&lt;code>u&lt;/code> - unsigned integer&lt;/li>
&lt;li>&lt;code>f&lt;/code> - float&lt;/li>
&lt;li>&lt;code>c&lt;/code> - complex float&lt;/li>
&lt;li>&lt;code>m&lt;/code> - timedelta&lt;/li>
&lt;li>&lt;code>M&lt;/code> - datetime&lt;/li>
&lt;li>&lt;code>O&lt;/code> - object&lt;/li>
&lt;li>&lt;code>S&lt;/code> - string&lt;/li>
&lt;li>&lt;code>U&lt;/code> - unicode string&lt;/li>
&lt;li>&lt;code>V&lt;/code> - fixed chunk of memory for other type ( void )&lt;/li>
&lt;/ul>
&lt;p>The NumPy array object has a property called &lt;code>dtype&lt;/code> that returns the data type of the array.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dtype&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## int64&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">dtype&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;S&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If a type is given in which elements can&amp;rsquo;t be casted then NumPy will raise a ValueError.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="s1">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;2&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;3&amp;#39;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">dtype&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;i&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## ValueError&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="converting-data-type">Converting Data Type
&lt;/h3>&lt;p>The best way to change the data type of an existing array, is to make a copy of the array with the &lt;code>astype()&lt;/code> method.&lt;/p>
&lt;p>The &lt;code>astype()&lt;/code> function creates a copy of the array, and allows you to specify the data type as a parameter.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mf">1.1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">2.1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">3.1&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">newarr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">astype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;i&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="copy-and-view">Copy and View
&lt;/h2>&lt;p>The main difference between a copy and a view of an array is that the copy is a &lt;strong>new array&lt;/strong>, and the view is &lt;strong>just a view of the original array&lt;/strong>.&lt;/p>
&lt;p>The copy &lt;em>owns&lt;/em> the data and any changes made to the copy will not affect original array, and any changes made to the original array will not affect the copy.&lt;/p>
&lt;p>The view &lt;em>does not own&lt;/em> the data and any changes made to the view will affect the original array, and any changes made to the original array will affect the view.&lt;/p>
&lt;p>Every NumPy array has the attribute &lt;code>base&lt;/code> that returns &lt;code>None&lt;/code> if the array owns the data.&lt;/p>
&lt;p>Otherwise, the &lt;code>base&lt;/code> attribute refers to the original object.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">copy&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">view&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">base&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## none&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">base&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## arr&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="shape">Shape
&lt;/h2>&lt;p>The shape of an array is the number of elements in each dimension.&lt;/p>
&lt;p>NumPy arrays have an attribute called &lt;code>shape&lt;/code> that returns a &lt;strong>tuple&lt;/strong> with each index having the number of corresponding elements.&lt;/p>
&lt;h3 id="reshape">Reshape
&lt;/h3>&lt;p>By reshaping we can add or remove dimensions or change number of elements in each dimension.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">11&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">newarr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">reshape&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">newarr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">reshape&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>We can reshape an 8 elements 1D array into 4 elements in 2 rows 2D array but we cannot reshape it into a 3 elements 3 rows 2D array as that would require 3x3 = 9 elements.&lt;/p>
&lt;/blockquote>
&lt;p>the returned array is a &lt;strong>view&lt;/strong>&lt;/p>
&lt;p>You are allowed to have one &amp;ldquo;unknown&amp;rdquo; dimension.&lt;/p>
&lt;p>Meaning that you do not have to specify an exact number for one of the dimensions in the reshape method.&lt;/p>
&lt;p>Pass &lt;code>-1&lt;/code> as the value, and NumPy will calculate this number for you.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">newarr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">reshape&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> We can not pass &lt;code>-1&lt;/code> to more than one dimension.&lt;/p>
&lt;/blockquote>
&lt;h4 id="flattening">Flattening
&lt;/h4>&lt;p>Flattening array means converting a multidimensional array into a 1D array.&lt;/p>
&lt;p>We can use &lt;code>reshape(-1)&lt;/code> to do this.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> There are a lot of functions for changing the shapes of arrays in numpy &lt;code>flatten&lt;/code>, &lt;code>ravel&lt;/code> and also for rearranging the elements &lt;code>rot90&lt;/code>, &lt;code>flip&lt;/code>, &lt;code>fliplr&lt;/code>, &lt;code>flipud&lt;/code> etc.&lt;/p>
&lt;/blockquote>
&lt;h2 id="iterating">Iterating
&lt;/h2>&lt;p>The function &lt;code>nditer()&lt;/code> is a helping function that can be used from very basic to very advanced iterations. It solves some basic issues which we face in iteration.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">nditer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="with-different-data-types">With Different Data Types
&lt;/h3>&lt;p>We can use &lt;code>op_dtypes&lt;/code> argument and pass it the expected datatype to change the datatype of elements while iterating.&lt;/p>
&lt;p>NumPy does not change the data type of the element in-place (where the element is in array) so it needs some other space to perform this action, that extra space is called buffer, and in order to enable it in &lt;code>nditer()&lt;/code> we pass &lt;code>flags=['buffered']&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">nditer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">flags&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;buffered&amp;#39;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">op_dtypes&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;S&amp;#39;&lt;/span>&lt;span class="p">]):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="with-different-step-size">With Different Step Size
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">nditer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">[:,&lt;/span> &lt;span class="p">::&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="join">Join
&lt;/h2>&lt;p>In SQL we join tables based on a key, whereas in NumPy we join arrays by axes.&lt;/p>
&lt;p>We pass a sequence of arrays that we want to join to the &lt;code>concatenate()&lt;/code> function, along with the axis. If axis is not explicitly passed, it is taken as 0.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">arr1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">arr2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">concatenate&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">arr1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">arr2&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#along the row&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">arr1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">]])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">arr2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">]])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">concatenate&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">arr1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">arr2&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">axis&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#[[1 2 5 6]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## [3 4 7 8]]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="split">Split
&lt;/h2>&lt;p>Splitting is reverse operation of Joining.&lt;/p>
&lt;p>Joining merges multiple arrays into one and Splitting breaks one array into multiple.&lt;/p>
&lt;p>We use &lt;code>array_split()&lt;/code> for splitting arrays, we pass it the array we want to split and the number of splits.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">newarr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array_split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>The return value is an array containing three arrays.&lt;/p>
&lt;/blockquote>
&lt;p>If the array has less elements than required, it will adjust from the end accordingly.&lt;/p>
&lt;blockquote>
&lt;p>We also have the method &lt;code>split()&lt;/code> available but it will not adjust the elements when elements are less in source array for splitting like in example above, &lt;code>array_split()&lt;/code> worked properly but &lt;code>split()&lt;/code> would fail.&lt;/p>
&lt;/blockquote>
&lt;h2 id="search">Search
&lt;/h2>&lt;p>You can search an array for a certain value, and return the indexes that get a match.&lt;/p>
&lt;p>To search an array, use the &lt;code>where()&lt;/code> method.&lt;/p>
&lt;h2 id="filter">Filter
&lt;/h2>&lt;p>Getting some elements out of an existing array and creating a new array out of them is called &lt;em>filtering&lt;/em>.&lt;/p>
&lt;p>In NumPy, you filter an array using a &lt;em>boolean index list&lt;/em>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">41&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">42&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">43&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">44&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="kc">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">False&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">False&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">newarr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can directly substitute the array instead of the iterable variable in our condition and it will work just as we expect it to.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">41&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">42&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">43&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">44&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">filter_arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">arr&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">42&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">newarr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">filter_arr&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="random">Random
&lt;/h2>&lt;p>Random number &lt;strong>does NOT&lt;/strong> mean a different number every time. Random means something that &lt;strong>can not be predicted logically&lt;/strong>.&lt;/p>
&lt;h3 id="pseudo-random-and-true-random">Pseudo Random and True Random
&lt;/h3>&lt;p>Random numbers generated through a generation algorithm are called &lt;em>pseudo random&lt;/em>.&lt;/p>
&lt;p>In order to generate a truly random number on our computers we need to get the random data from some outside source. This outside source is generally our keystrokes, mouse movements, data on network etc.&lt;/p>
&lt;p>We do not need truly random numbers, unless its related to security (e.g. encryption keys) or the basis of application is the randomness (e.g. Digital roulette wheels).&lt;/p>
&lt;p>NumPy offers the &lt;code>random&lt;/code> module to work with random numbers.&lt;/p>
&lt;p>The random module&amp;rsquo;s &lt;code>rand()&lt;/code> method returns a random float between 0 and 1.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">from&lt;/span> &lt;span class="nn">numpy&lt;/span> &lt;span class="kn">import&lt;/span> &lt;span class="n">random&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## Generate a random integer from 0 to 100&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">randint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>randint()&lt;/code> method takes a &lt;code>size&lt;/code> parameter where you can specify the shape of an array.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">x&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">randint&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>rand()&lt;/code> method also allows you to specify the shape of the array.&lt;/p>
&lt;p>The &lt;code>choice()&lt;/code> method allows you to generate a random value based on an array of values.&lt;/p>
&lt;p>The &lt;code>choice()&lt;/code> method takes an array as a parameter and randomly returns one of the values.&lt;/p>
&lt;h3 id="seaborn">Seaborn
&lt;/h3>&lt;p>Seaborn is a library that uses Matplotlib underneath to plot graphs. It will be used to visualize random distributions.&lt;/p>
&lt;h2 id="data-distribution">Data Distribution
&lt;/h2>&lt;p>Data Distribution is a list of all possible values, and how often each value occurs.&lt;/p>
&lt;p>Such lists are important when working with statistics and data science.&lt;/p>
&lt;p>The random module offer methods that returns randomly generated data distributions.&lt;/p>
&lt;p>We can generate random numbers based on defined probabilities using the &lt;code>choice()&lt;/code> method of the &lt;code>random&lt;/code> module.&lt;/p>
&lt;p>The &lt;code>choice()&lt;/code> method allows us to specify the probability for each value.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">choice&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mf">0.1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">0.0&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="permutations">Permutations
&lt;/h3>&lt;p>A permutation refers to an arrangement of elements. e.g. [3, 2, 1] is a permutation of [1, 2, 3] and vice-versa.&lt;/p>
&lt;p>The NumPy Random module provides two methods for this: &lt;code>shuffle()&lt;/code> and &lt;code>permutation()&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>The &lt;code>shuffle()&lt;/code> method makes changes to the original array.&lt;/li>
&lt;li>The &lt;code>permutation()&lt;/code> method &lt;em>returns&lt;/em> a re-arranged array (and leaves the original array un-changed).&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">shuffle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">newarr&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">random&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">permutation&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="numpy-ufuncs">Numpy ufuncs
&lt;/h2>&lt;p>ufuncs stands for &amp;ldquo;&lt;strong>Universal Functions&lt;/strong>&amp;rdquo; and they are NumPy functions that operates on the &lt;code>ndarray&lt;/code> object.&lt;/p>
&lt;p>ufuncs are used to implement &lt;em>&lt;strong>vectorization&lt;/strong>&lt;/em> (Converting iterative statements into a vector based operation ) in NumPy which is way faster than iterating over elements.&lt;/p>
&lt;p>ufuncs also take additional arguments, like:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>where&lt;/code> boolean array or condition defining where the operations should take place.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>dtype&lt;/code> defining the return type of elements.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>out&lt;/code> output array where the return value should be copied.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="create">create
&lt;/h3>&lt;p>To create you own ufunc, you have to &lt;strong>define a normal function&lt;/strong>, like you do with normal functions in Python, then you &lt;strong>add it to your NumPy ufunc library&lt;/strong> with the &lt;code>frompyfunc()&lt;/code> method.&lt;/p>
&lt;p>The &lt;code>frompyfunc()&lt;/code> method takes the following arguments:&lt;/p>
&lt;ol>
&lt;li>&lt;code>function&lt;/code> - the name of the function.&lt;/li>
&lt;li>&lt;code>inputs&lt;/code> - the number of input arguments (arrays).&lt;/li>
&lt;li>&lt;code>outputs&lt;/code> - the number of output arrays.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">myadd&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">y&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">myadd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">frompyfunc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">myadd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A ufunc should return &lt;code>&amp;lt;class 'numpy.ufunc'&amp;gt;&lt;/code>.&lt;/p>
&lt;p>If it is not a ufunc, it will return another type, like this built-in NumPy function for joining two or more arrays &lt;code>&amp;lt;class'builtin_function_or_method'&amp;gt;&lt;/code>&lt;/p>
&lt;p>To test if the function is a ufunc in an if statement, use the &lt;code>numpy.ufunc&lt;/code> value&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="nb">type&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">np&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ufunc&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>【Python】Pandas</title><link>https://dyhes.github.io/p/pythonpandas/</link><pubDate>Wed, 13 Jan 2021 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/pythonpandas/</guid><description>&lt;h2 id="intro">Intro
&lt;/h2>&lt;p>Pandas is a Python library, which is used to analyze data.&lt;/p>
&lt;p>It has functions for analyzing, cleaning, exploring, and manipulating data.&lt;/p>
&lt;p>The name &amp;ldquo;Pandas&amp;rdquo; has a reference to both &amp;ldquo;&lt;strong>Panel Data&lt;/strong>&amp;rdquo;, and &amp;ldquo;&lt;strong>Python Data Analysis&lt;/strong>&amp;rdquo; and was created by Wes McKinney in 2008.&lt;/p>
&lt;p>Pandas allows us to analyze big data and make conclusions based on statistical theories.&lt;/p>
&lt;p>Pandas gives you answers about the data. Like:&lt;/p>
&lt;ul>
&lt;li>Is there a &lt;strong>correlation&lt;/strong> between two or more columns?&lt;/li>
&lt;li>What is &lt;strong>average&lt;/strong> value?&lt;/li>
&lt;li>&lt;strong>Max&lt;/strong> value?&lt;/li>
&lt;li>&lt;strong>Min&lt;/strong> value?&lt;/li>
&lt;/ul>
&lt;p>Pandas are also able to delete rows that are not relevant, or contains wrong values, like empty or NULL values. This is called &lt;em>&lt;strong>cleaning&lt;/strong>&lt;/em> the data.&lt;/p>
&lt;h2 id="series">Series
&lt;/h2>&lt;p>A Pandas Series is like a column in a table.&lt;/p>
&lt;p>It is a one-dimensional array holding data of any type.&lt;/p>
&lt;h3 id="labels">Labels
&lt;/h3>&lt;p>If nothing else is specified, the values are labeled with their index number. First value has index 0, second value has index 1 etc.&lt;/p>
&lt;p>This label can be used to access a specified value.&lt;/p>
&lt;p>With the &lt;code>index&lt;/code> argument, you can name your own labels.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">myvar&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pd&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Series&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;x&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;y&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;z&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can also use a key/value object, like a dictionary, when creating a Series.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">calories&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34;day1&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">420&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;day2&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">380&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;day3&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">390&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">myvar&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pd&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Series&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">calories&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">myvar&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pd&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Series&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">calories&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;day1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;day2&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## only using data from &amp;#39;day1&amp;#39; and &amp;#39;day2&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> The keys of the dictionary become the labels.&lt;/p>
&lt;/blockquote>
&lt;h2 id="dataframes">DataFrames
&lt;/h2>&lt;p>A Pandas DataFrame is a 2 dimensional data structure, like a 2 dimensional array, or a table with rows and columns.&lt;/p>
&lt;p>Series is like a column, a DataFrame is the whole table.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;calories&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">420&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">380&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">390&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;duration&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">50&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">40&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">45&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">myvar&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pd&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DataFrame&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Pandas use the &lt;code>loc&lt;/code> attribute to return one or more specified row(s)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#use a list of indexes:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">df&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">loc&lt;/span>&lt;span class="p">[[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> When using &lt;code>[]&lt;/code>, the result is a Pandas &lt;strong>DataFrame&lt;/strong>.&lt;/p>
&lt;/blockquote>
&lt;p>With the &lt;code>index&lt;/code> argument, you can name your own indexes.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;calories&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">420&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">380&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">390&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;duration&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">50&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">40&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">45&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">df&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pd&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DataFrame&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;day1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;day2&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;day3&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="read-csv">Read CSV
&lt;/h2>&lt;p>A simple way to store big data sets is to use CSV files (comma separated files).&lt;/p>
&lt;p>CSV files contains plain text and is a well know format that can be read by everyone including Pandas.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">df&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pd&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read_csv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;data.csv&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">df&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">to_string&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#use to_string() to print the entire DataFrame.&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>If you have a large DataFrame with many rows, Pandas will only return the first 5 rows, and the last 5 rows:&lt;/p>
&lt;/blockquote>
&lt;h2 id="read-json">Read JSON
&lt;/h2>&lt;p>Big data sets are often stored, or extracted as JSON.&lt;/p>
&lt;p>JSON is plain text, but has the format of an object, and is well known in the world of programming, including Pandas.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">df&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pd&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read_json&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;data.json&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If your JSON code is not in a file, but in a Python Dictionary, you can load it into a DataFrame directly.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">df&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pd&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">DataFrame&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="viewing-data">Viewing Data
&lt;/h2>&lt;ul>
&lt;li>&lt;code>head()&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>One of the most used method for getting a quick overview of the DataFrame, is the &lt;code>head()&lt;/code> method.&lt;/p>
&lt;p>The &lt;code>head()&lt;/code> method returns the headers and a specified number of rows, starting from the top.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">df&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">head&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> if the number of rows is not specified, the &lt;code>head()&lt;/code> method will return the top 5 rows.&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;code>tail()&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>There is also a &lt;code>tail()&lt;/code> method for viewing the &lt;em>last&lt;/em> rows of the DataFrame.&lt;/p>
&lt;p>The &lt;code>tail()&lt;/code> method returns the headers(names of columns) and a specified number of rows, starting from the bottom.&lt;/p>
&lt;ul>
&lt;li>&lt;code>info()&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>The DataFrames object has a method called &lt;code>info()&lt;/code>, that gives you more information about the data set.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">print&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">df&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">info&lt;/span>&lt;span class="o">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">/* &amp;lt;class &amp;#39;pandas.core.frame.DataFrame&amp;#39;&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c"> RangeIndex: 169 entries, 0 to 168
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c"> Data columns (total 4 columns):
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c"> ## Column Non-Null Count Dtype
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c"> --- ------ -------------- -----
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c"> 0 Duration 169 non-null int64
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c"> 1 Pulse 169 non-null int64
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c"> 2 Maxpulse 169 non-null int64
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c"> 3 Calories 164 non-null float64
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c"> dtypes: float64(1), int64(3)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c"> memory usage: 5.4 KB
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c"> None */&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="cleaning-data">Cleaning Data
&lt;/h2>&lt;p>Data cleaning means fixing bad data in your data set.&lt;/p>
&lt;p>Bad data could be:&lt;/p>
&lt;ul>
&lt;li>Empty cells&lt;/li>
&lt;li>Data in wrong format&lt;/li>
&lt;li>Wrong data&lt;/li>
&lt;li>Duplicates&lt;/li>
&lt;/ul>
&lt;h3 id="empty-cell">Empty Cell
&lt;/h3>&lt;ol>
&lt;li>Remove Rows&lt;/li>
&lt;li>Replace Empty Values&lt;/li>
&lt;/ol>
&lt;p>Pandas uses the mean() median() and mode() methods to calculate the respective values for a specified column.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">new_df&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">df&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dropna&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#If you want to change the original DataFrame, use the inplace = True argument&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">df&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dropna&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">inplace&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#2 &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">df&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;Calories&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mean&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">df&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;Calories&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">median&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">df&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;Calories&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">mode&lt;/span>&lt;span class="p">()[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">df&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;Calories&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">fillna&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">inplace&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> By default, the &lt;code>dropna()&lt;/code> method returns a &lt;em>new&lt;/em> DataFrame, and will not change the original.&lt;/p>
&lt;/blockquote>
&lt;h3 id="wrong-format">Wrong Format
&lt;/h3>&lt;ol>
&lt;li>Remove Rows&lt;/li>
&lt;li>Convert Format&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">df&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dropna&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">subset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;Date&amp;#39;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">inplace&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">df&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dropna&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">subset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;Date&amp;#39;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">inplace&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="wrong-data">Wrong Data
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">df&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">df&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">loc&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Duration&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">120&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">df&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">loc&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Duration&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">120&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#or&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">df&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">df&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">loc&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Duration&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">120&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">df&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">loc&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Duration&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">120&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="duplicates">Duplicates
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">df&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">drop_duplicates&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">inplace&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="data-correlations">Data Correlations
&lt;/h2>&lt;p>A great aspect of the Pandas module is the &lt;code>corr()&lt;/code> method.&lt;/p>
&lt;p>The &lt;code>corr()&lt;/code> method calculates the relationship between each column in your data set.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> The &lt;code>corr()&lt;/code> method ignores &amp;ldquo;not numeric&amp;rdquo; columns.&lt;/p>
&lt;/blockquote>
&lt;p>The Result of the &lt;code>corr()&lt;/code> method is a table with a lot of numbers that represents how well the relationship is between two columns.&lt;/p></description></item><item><title>【Python】语法</title><link>https://dyhes.github.io/p/python%E8%AF%AD%E6%B3%95/</link><pubDate>Tue, 12 Jan 2021 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/python%E8%AF%AD%E6%B3%95/</guid><description>&lt;h2 id="variables">Variables
&lt;/h2>&lt;p>Variables are containers for storing data values.&lt;/p>
&lt;p>A variable is created &lt;strong>the moment&lt;/strong> you first assign a value to it.&lt;/p>
&lt;p>If you want to specify the data type of a variable, this can be done with &lt;strong>casting&lt;/strong>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">## x will be &amp;#39;3&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">## y will be 3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">z&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">float&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">## z will be 3.0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can get the data type of a variable with the &lt;code>type()&lt;/code> function.&lt;/p>
&lt;h3 id="variable-names">Variable Names
&lt;/h3>&lt;ul>
&lt;li>A variable name must start with a &lt;strong>letter&lt;/strong> or the &lt;strong>underscore character&lt;/strong>&lt;/li>
&lt;li>A variable name &lt;strong>cannot start with a number&lt;/strong>&lt;/li>
&lt;li>A variable name can only contain a&lt;strong>lpha-numeric characters and underscores&lt;/strong> (A-z, 0-9, and _ )&lt;/li>
&lt;li>Variable names are &lt;strong>case-sensitive&lt;/strong> (age, Age and AGE are three different variables)&lt;/li>
&lt;/ul>
&lt;p>more readable:&lt;/p>
&lt;ul>
&lt;li>Camel Case&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">myVariableName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;John&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Pascal Case&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">MyVariableName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;John&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Snake Case&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">my_variable_name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;John&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="variable-scope">Variable Scope
&lt;/h3>&lt;p>Variables that are created outside of a function (as in all of the examples above) are known as global variables.&lt;/p>
&lt;p>If you create a variable with the same name inside a function, this variable will be local, and can only be used inside the function. The global variable with the same name will remain as it was, global and with the original value.&lt;/p>
&lt;p>To create a global variable inside a function, &lt;strong>you can use the &lt;code>global&lt;/code> keyword&lt;/strong>.&lt;/p>
&lt;p>Also, use the &lt;code>global&lt;/code> keyword if you want to &lt;strong>change a global variable inside a function&lt;/strong>.&lt;/p>
&lt;h2 id="data-type">Data Type
&lt;/h2>&lt;p>Python has the following data types built-in by default, in these categories:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Text Type:&lt;/th>
&lt;th>&lt;code>str&lt;/code>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Numeric Types:&lt;/td>
&lt;td>&lt;code>int&lt;/code>, &lt;code>float&lt;/code>, &lt;code>complex&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Sequence Types:&lt;/td>
&lt;td>&lt;code>list&lt;/code>, &lt;code>tuple&lt;/code>, &lt;code>range&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Mapping Type:&lt;/td>
&lt;td>&lt;code>dict&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Set Types:&lt;/td>
&lt;td>&lt;code>set&lt;/code>, &lt;code>frozenset&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Boolean Type:&lt;/td>
&lt;td>&lt;code>bool&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Binary Types:&lt;/td>
&lt;td>&lt;code>bytes&lt;/code>, &lt;code>bytearray&lt;/code>, &lt;code>memoryview&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="casting">Casting
&lt;/h3>&lt;p>There may be times when you want to specify a type on to a variable. This can be done with casting. Python is an object-orientated language, and as such it uses classes to define data types, including its primitive types.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">Example&lt;/th>
&lt;th style="text-align: left">Data Type&lt;/th>
&lt;th style="text-align: left">Try it&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">x = str(&amp;ldquo;Hello World&amp;rdquo;)&lt;/td>
&lt;td style="text-align: left">str&lt;/td>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_type_str2" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">x = int(20)&lt;/td>
&lt;td style="text-align: left">int&lt;/td>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_type_int2" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">x = float(20.5)&lt;/td>
&lt;td style="text-align: left">float&lt;/td>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_type_float2" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">x = complex(1j)&lt;/td>
&lt;td style="text-align: left">complex&lt;/td>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_type_complex2" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">x = list((&amp;ldquo;apple&amp;rdquo;, &amp;ldquo;banana&amp;rdquo;, &amp;ldquo;cherry&amp;rdquo;))&lt;/td>
&lt;td style="text-align: left">list&lt;/td>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_type_list2" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">x = tuple((&amp;ldquo;apple&amp;rdquo;, &amp;ldquo;banana&amp;rdquo;, &amp;ldquo;cherry&amp;rdquo;))&lt;/td>
&lt;td style="text-align: left">tuple&lt;/td>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_type_tuple2" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">x = range(6)&lt;/td>
&lt;td style="text-align: left">range&lt;/td>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_type_range2" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">x = dict(name=&amp;ldquo;John&amp;rdquo;, age=36)&lt;/td>
&lt;td style="text-align: left">dict&lt;/td>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_type_dict2" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">x = set((&amp;ldquo;apple&amp;rdquo;, &amp;ldquo;banana&amp;rdquo;, &amp;ldquo;cherry&amp;rdquo;))&lt;/td>
&lt;td style="text-align: left">set&lt;/td>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_type_set2" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">x = frozenset((&amp;ldquo;apple&amp;rdquo;, &amp;ldquo;banana&amp;rdquo;, &amp;ldquo;cherry&amp;rdquo;))&lt;/td>
&lt;td style="text-align: left">frozenset&lt;/td>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_type_frozenset2" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">x = bool(5)&lt;/td>
&lt;td style="text-align: left">bool&lt;/td>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_type_bool2" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">x = bytes(5)&lt;/td>
&lt;td style="text-align: left">bytes&lt;/td>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_type_bytes2" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">x = bytearray(5)&lt;/td>
&lt;td style="text-align: left">bytearray&lt;/td>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_type_bytearray2" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">x = memoryview(bytes(5))&lt;/td>
&lt;td style="text-align: left">memoryview&lt;/td>
&lt;td style="text-align: left">&lt;a class="link" href="https://www.w3schools.com/python/trypython.asp?filename=demo_type_memoryview2" target="_blank" rel="noopener"
>Try it »&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="booleans">Booleans
&lt;/h3>&lt;p>Almost any value is evaluated to &lt;code>True&lt;/code> if it has some sort of content.&lt;/p>
&lt;p>Any string is &lt;code>True&lt;/code>, except empty strings.&lt;/p>
&lt;p>Any number is &lt;code>True&lt;/code>, except &lt;code>0&lt;/code>.&lt;/p>
&lt;p>Any list, tuple, set, and dictionary are &lt;code>True&lt;/code>, except empty ones.&lt;/p>
&lt;h3 id="collections">Collections
&lt;/h3>&lt;p>There are four collection data types in the Python programming language:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>List&lt;/strong> is a collection which is ordered and changeable. Allows duplicate members.&lt;/li>
&lt;li>&lt;strong>&lt;a class="link" href="https://www.w3schools.com/python/python_tuples.asp" target="_blank" rel="noopener"
>Tuple&lt;/a>&lt;/strong> is a collection which is ordered and unchangeable. Allows duplicate members.&lt;/li>
&lt;li>&lt;strong>&lt;a class="link" href="https://www.w3schools.com/python/python_sets.asp" target="_blank" rel="noopener"
>Set&lt;/a>&lt;/strong> is a collection which is unordered, unchangeable, and unindexed. No duplicate members.&lt;/li>
&lt;li>&lt;strong>&lt;a class="link" href="https://www.w3schools.com/python/python_dictionaries.asp" target="_blank" rel="noopener"
>Dictionary&lt;/a>&lt;/strong> is a collection which is ordered and changeable. No duplicate members.&lt;/li>
&lt;/ul>
&lt;h3 id="list">List
&lt;/h3>&lt;p>Lists are used to store multiple items in a single variable.&lt;/p>
&lt;p>Lists are one of 4 built-in data types in Python used to store collections of data, the other 3 are &lt;a class="link" href="https://www.w3schools.com/python/python_tuples.asp" target="_blank" rel="noopener"
>Tuple&lt;/a>, &lt;a class="link" href="https://www.w3schools.com/python/python_sets.asp" target="_blank" rel="noopener"
>Set&lt;/a>, and &lt;a class="link" href="https://www.w3schools.com/python/python_dictionaries.asp" target="_blank" rel="noopener"
>Dictionary&lt;/a>, all with different qualities and usage.&lt;/p>
&lt;p>A list can contain different data types&lt;/p>
&lt;ul>
&lt;li>
&lt;p>add&lt;/p>
&lt;ul>
&lt;li>To add an item to the end of the list, use the append() method&lt;/li>
&lt;li>To insert a list item at a specified index, use the &lt;code>insert()&lt;/code> method.&lt;/li>
&lt;li>To append elements from &lt;em>another list&lt;/em> ( or any iterable object ) to the current list, use the &lt;code>extend()&lt;/code> method.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>remove&lt;/p>
&lt;ul>
&lt;li>The &lt;code>remove()&lt;/code> method removes the specified &lt;strong>item&lt;/strong>.&lt;/li>
&lt;li>The &lt;code>pop()&lt;/code> method removes the specified index. If you do not specify the index, the &lt;code>pop()&lt;/code> method removes the last item.&lt;/li>
&lt;li>The &lt;code>del&lt;/code> keyword also removes the specified index and can also delete the list completely.&lt;/li>
&lt;li>The &lt;code>clear()&lt;/code> method empties the list. The list still remains, but it has no content.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">thislist&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">remove&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;banana&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">thislist&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">del&lt;/span> &lt;span class="n">thislist&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">del&lt;/span> &lt;span class="n">thislist&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">thislist&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">clear&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="list-comprehension">List Comprehension
&lt;/h4>&lt;p>List comprehension offers a shorter syntax when you want to &lt;strong>create&lt;/strong> a new list &lt;strong>based on&lt;/strong> the values of an &lt;strong>existing list&lt;/strong>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">newlist&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">expression&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="n">item&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="n">iterable&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">condition&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="tuple">Tuple
&lt;/h3>&lt;p>A tuple is a collection which is ordered and &lt;strong>unchangeable&lt;/strong>.&lt;/p>
&lt;p>Since tuples are indexed, they can have items with the same value&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-pyhton" data-lang="pyhton">thistuple = (&amp;#34;apple&amp;#34;,)
&amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt;
#NOT a tuple
thistuple = (&amp;#34;apple&amp;#34;)
&amp;lt;class &amp;#39;str&amp;#39;&amp;gt;
&lt;/code>&lt;/pre>&lt;p>You can convert the tuple into a list, change the list, and convert the list back into a tuple.&lt;/p>
&lt;h4 id="unpack">Unpack
&lt;/h4>&lt;p>we are allowed to extract the values back into variables. This is called &amp;ldquo;unpacking&amp;rdquo;:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">fruits&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;apple&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;banana&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;cherry&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="n">green&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">yellow&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">red&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fruits&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="asterisk">Asterisk&lt;code>*&lt;/code>
&lt;/h5>&lt;p>If the number of variables is less than the number of values, you can add an &lt;code>*&lt;/code> to the variable name and the values will be assigned to the variable as a list:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">fruits&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;apple&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;banana&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;cherry&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;strawberry&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;raspberry&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="n">green&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">yellow&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">red&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fruits&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="n">green&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">tropic&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">red&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fruits&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If the asterisk is added to another variable name than the last, Python will assign values to the variable until the number of values left matches the number of variables left.&lt;/p>
&lt;h3 id="set">Set
&lt;/h3>&lt;p>A set is a collection which is &lt;em>unordered&lt;/em>, &lt;em>unchangeable&lt;/em>*, and &lt;em>unindexed&lt;/em>.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> Set &lt;em>items&lt;/em> are unchangeable, but you can remove items and add new items.&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>add&lt;/p>
&lt;ul>
&lt;li>
&lt;p>To add one item to a set use the &lt;code>add()&lt;/code> method.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>To add items from another set into the current set, use the &lt;code>update()&lt;/code> method.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>remove&lt;/p>
&lt;ul>
&lt;li>&lt;code>remove()&lt;/code>: if the item to remove does not exist, &lt;code>remove()&lt;/code> will raise an error.&lt;/li>
&lt;li>&lt;code>discard()&lt;/code> : if the item to remove does not exist, &lt;code>discard()&lt;/code> will &lt;strong>NOT&lt;/strong> raise an error.&lt;/li>
&lt;li>&lt;code>pop()&lt;/code> :remove and return the &lt;em>last&lt;/em> item, you will not know what item that gets removed.&lt;/li>
&lt;li>&lt;code>clear()&lt;/code> : you will not know what item that gets removed.&lt;/li>
&lt;li>&lt;code>del&lt;/code> :delete the set completely&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>join&lt;/p>
&lt;ul>
&lt;li>&lt;code>union()&lt;/code> : returns a new set containing all items from both sets&lt;/li>
&lt;li>&lt;code>update()&lt;/code> : inserts all the items from one set into another.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="set-operation">Set Operation
&lt;/h4>&lt;p>The &lt;code>intersection_update()&lt;/code> method will keep only the items that are present in both sets.&lt;/p>
&lt;p>The &lt;code>intersection()&lt;/code> method will return a &lt;em>new&lt;/em> set, that only contains the items that are present in both sets.&lt;/p>
&lt;p>The &lt;code>symmetric_difference_update()&lt;/code> method will keep only the elements that are NOT present in both sets.&lt;/p>
&lt;p>The &lt;code>symmetric_difference()&lt;/code> method will return a new set, that contains only the elements that are NOT present in both sets.&lt;/p>
&lt;h3 id="dictionary">Dictionary
&lt;/h3>&lt;p>A dictionary is a collection which is ordered*, changeable and do not allow duplicates.&lt;/p>
&lt;blockquote>
&lt;p>As of Python version 3.7, dictionaries are &lt;em>ordered&lt;/em>. In Python 3.6 and earlier, dictionaries are &lt;em>unordered&lt;/em>.&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>Access
&lt;ul>
&lt;li>referring to its key name inside square brackets&lt;/li>
&lt;li>&lt;code>get()&lt;/code>&lt;/li>
&lt;li>&lt;code>keys()&lt;/code>: return a list of all the &lt;strong>keys&lt;/strong> in the dictionary.&lt;/li>
&lt;li>&lt;code>values()&lt;/code> : return a list of all the &lt;strong>values&lt;/strong> in the dictionary.&lt;/li>
&lt;li>&lt;code>items()&lt;/code> : return each item in a dictionary, as &lt;strong>tuples&lt;/strong> in a list.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">thisdict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;model&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">thisdict&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;model&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Change / Add
&lt;ul>
&lt;li>referring to its key name&lt;/li>
&lt;li>&lt;code>update()&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Remove
&lt;ul>
&lt;li>&lt;code>pop()&lt;/code> : removes the item with the specified key name&lt;/li>
&lt;li>&lt;code>popitem()&lt;/code>: removes the last inserted item (in versions before 3.7, a random item is removed instead)&lt;/li>
&lt;li>&lt;code>del&lt;/code> : removes the item with the specified key name or the entire dictionary&lt;/li>
&lt;li>&lt;code>clear() &lt;/code> :empties the dictionary&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">thisdict&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">pop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;model&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">thisdict&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">popitem&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">del&lt;/span> &lt;span class="n">thisdict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;model&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">del&lt;/span> &lt;span class="n">thisdict&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">thisdict&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">clear&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>copy: &lt;code>copy()&lt;/code> or &lt;code>dict()&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="looping">Looping
&lt;/h4>&lt;ul>
&lt;li>for in&lt;/li>
&lt;li>&lt;code>keys()&lt;/code>&lt;/li>
&lt;li>&lt;code>values()&lt;/code>&lt;/li>
&lt;li>&lt;code>items()&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="arrays">Arrays
&lt;/h3>&lt;p>Python does not have built-in support for Arrays, but &lt;a class="link" href="https://www.w3schools.com/python/python_lists.asp" target="_blank" rel="noopener"
>Python Lists&lt;/a> can be used instead.&lt;/p>
&lt;p>To work with arrays in Python you can import a library, like the &lt;a class="link" href="https://www.w3schools.com/python/numpy/default.asp" target="_blank" rel="noopener"
>NumPy library&lt;/a>.&lt;/p>
&lt;h2 id="function">Function
&lt;/h2>&lt;p>A function is a block of code which only runs when it is called.&lt;/p>
&lt;p>In Python a function is defined using the &lt;code>def&lt;/code> keyword&lt;/p>
&lt;h3 id="lambda">Lambda
&lt;/h3>&lt;p>A lambda function is a small anonymous function.&lt;/p>
&lt;p>A lambda function can take any number of arguments, but can only have one expression.&lt;/p>
&lt;blockquote>
&lt;p>lambda &lt;em>arguments&lt;/em> : &lt;em>expression&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>The power of lambda is better shown when you use them as an anonymous function &lt;strong>inside another function&lt;/strong>.&lt;/p>
&lt;h2 id="classes">Classes
&lt;/h2>&lt;p>Python is an object oriented programming language.&lt;/p>
&lt;p>Almost everything in Python is an object, with its properties and methods.&lt;/p>
&lt;p>A Class is like an object constructor, or a &amp;ldquo;blueprint&amp;rdquo; for creating objects.&lt;/p>
&lt;p>To create a class, use the keyword &lt;code>class&lt;/code>&lt;/p>
&lt;h3 id="___init___-function">&lt;em>&lt;strong>init&lt;/strong>()&lt;/em> Function
&lt;/h3>&lt;p>All classes have a function called &lt;strong>init&lt;/strong>(), which is always executed when the class is being initiated. Use the &lt;strong>init&lt;/strong>() function to assign values to object properties, or other operations that are necessary to do when the object is being created&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Person&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">age&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">age&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">age&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Person&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;John&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">36&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">p1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Note:&lt;/p>
&lt;p>The &lt;code>self&lt;/code> parameter is a reference to the current instance of the class, and is used to access variables that belong to the class.&lt;/p>
&lt;p>It does not have to be named &lt;code>self&lt;/code> , you can call it whatever you like, but it has to be the first parameter of any function in the class&lt;/p>
&lt;/blockquote>
&lt;h3 id="del">&lt;code>del&lt;/code>
&lt;/h3>&lt;p>You can delete properties on objects or objects by using the &lt;code>del&lt;/code> keyword&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">del&lt;/span> &lt;span class="n">p1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">age&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">del&lt;/span> &lt;span class="n">p1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="inheritance">Inheritance
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">childClass&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">parentClass&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">parentClass&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">super&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="fm">__init__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>where &lt;code>super()&lt;/code> represent parentClass&lt;/p>
&lt;h2 id="iterators">Iterators
&lt;/h2>&lt;p>An iterator is an object that contains a countable number of values.&lt;/p>
&lt;p>An iterator is an object that can be iterated upon, meaning that you can traverse through all the values.&lt;/p>
&lt;p>Technically, in Python, an iterator is an object which implements the &lt;strong>iterator protocol&lt;/strong>, which consist of the methods &lt;code>__iter__()&lt;/code> and &lt;code>__next__()&lt;/code>.&lt;/p>
&lt;h3 id="iterator-vs-iterable">Iterator vs Iterable
&lt;/h3>&lt;p>Lists, tuples, dictionaries, and sets are all iterable objects. They are iterable &lt;em>containers&lt;/em> which you can get an iterator from.&lt;/p>
&lt;p>All these objects have a &lt;code>iter()&lt;/code> method which is used to get an iterator&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">mytuple&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;apple&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;banana&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;cherry&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">myit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">iter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mytuple&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">myit&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">myit&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">myit&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>for&lt;/code> loop actually creates an iterator object and executes the next() method for each loop.&lt;/p>
&lt;p>To create an object/class as an iterator you have to implement the methods &lt;code>__iter__()&lt;/code> and &lt;code>__next__()&lt;/code> to your object.&lt;/p>
&lt;p>To prevent the iteration to go on forever, we can use the &lt;code>StopIteration&lt;/code> statement.&lt;/p>
&lt;p>In the &lt;code>__next__()&lt;/code> method, we can add a terminating condition to raise an error if the iteration is done a specified number of times&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">MyNumbers&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__iter__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="bp">self&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="fm">__next__&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">a&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="ne">StopIteration&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="exception">Exception
&lt;/h2>&lt;p>The &lt;code>try&lt;/code> block lets you test a block of code for errors.&lt;/p>
&lt;p>The &lt;code>except&lt;/code> block lets you handle the error.&lt;/p>
&lt;p>The &lt;code>else&lt;/code> block lets you execute code when there is no error.&lt;/p>
&lt;p>The &lt;code>finally&lt;/code> block lets you execute code, regardless of the result of the try- and except blocks.&lt;/p>
&lt;p>To throw (or raise) an exception, use the &lt;code>raise&lt;/code> keyword.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">try&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">raise&lt;/span> &lt;span class="n">SomeException&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">except&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">finally&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="user-input">User Input
&lt;/h2>&lt;p>Python allows for user input.&lt;/p>
&lt;p>That means we are able to ask the user for input.&lt;/p>
&lt;p>The method is a bit different in Python 3.6 than Python 2.7.&lt;/p>
&lt;p>Python 3.6 uses the &lt;code>input()&lt;/code> method.&lt;/p>
&lt;p>Python 2.7 uses the &lt;code>raw_input()&lt;/code> method.&lt;/p>
&lt;h2 id="string-formatting-by-format">String Formatting by &lt;code>format()&lt;/code>
&lt;/h2>&lt;p>The &lt;code>format()&lt;/code> method allows you to format selected parts of a string.&lt;/p>
&lt;p>To control such values, add placeholders (curly brackets &lt;code>{}&lt;/code>) in the text, and run the values through the &lt;code>format()&lt;/code> method&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;The price is &lt;/span>&lt;span class="si">{}&lt;/span>&lt;span class="s2"> dollars&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">price&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="index-numbers">Index Numbers
&lt;/h3>&lt;p>You can use index numbers (a number inside the curly brackets &lt;code>{0}&lt;/code>) to be sure the values are placed in the correct placeholders&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;I want &lt;/span>&lt;span class="si">{0}&lt;/span>&lt;span class="s2"> pieces of item number &lt;/span>&lt;span class="si">{1}&lt;/span>&lt;span class="s2"> for &lt;/span>&lt;span class="si">{2:.2f}&lt;/span>&lt;span class="s2"> dollars.&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">quantity&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">itemno&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">price&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>if you want to refer to the same value more than once, use the index number.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;His name is &lt;/span>&lt;span class="si">{1}&lt;/span>&lt;span class="s2">. &lt;/span>&lt;span class="si">{1}&lt;/span>&lt;span class="s2"> is &lt;/span>&lt;span class="si">{0}&lt;/span>&lt;span class="s2"> years old.&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="named-indexes">Named Indexes
&lt;/h3>&lt;p>You can also use named indexes by entering a name inside the curly brackets &lt;code>{carname}&lt;/code>, but then you must use names when you pass the parameter values &lt;code>txt.format(carname = &amp;quot;Ford&amp;quot;)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;I have a &lt;/span>&lt;span class="si">{carname}&lt;/span>&lt;span class="s2">, it is a &lt;/span>&lt;span class="si">{model}&lt;/span>&lt;span class="s2">.&amp;#34;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">carname&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;Ford&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">model&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;Mustang&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="file">File
&lt;/h2>&lt;h3 id="open">Open
&lt;/h3>&lt;p>The key function for working with files in Python is the &lt;code>open()&lt;/code> function.&lt;/p>
&lt;p>The &lt;code>open()&lt;/code> function takes two parameters; &lt;em>filename&lt;/em>, and &lt;em>mode&lt;/em>.&lt;/p>
&lt;p>There are four different methods (modes) for opening a file:&lt;/p>
&lt;p>&lt;code>&amp;quot;r&amp;quot;&lt;/code> - Read - Default value. Opens a file for reading, error if the file does not exist&lt;/p>
&lt;p>&lt;code>&amp;quot;a&amp;quot;&lt;/code> - Append - Opens a file for appending, creates the file if it does not exist&lt;/p>
&lt;p>&lt;code>&amp;quot;w&amp;quot;&lt;/code> - Write - Opens a file for writing, creates the file if it does not exist&lt;/p>
&lt;p>&lt;code>&amp;quot;x&amp;quot;&lt;/code> - Create - Creates the specified file, returns an error if the file exists&lt;/p>
&lt;p>In addition you can specify if the file should be handled as binary or text mode&lt;/p>
&lt;p>&lt;code>&amp;quot;t&amp;quot;&lt;/code> - Text - Default value. Text mode&lt;/p>
&lt;p>&lt;code>&amp;quot;b&amp;quot;&lt;/code> - Binary - Binary mode (e.g. images)&lt;/p>
&lt;h3 id="read">Read
&lt;/h3>&lt;p>The &lt;code>open()&lt;/code> function returns a file object, which has a &lt;code>read()&lt;/code> method for reading the content of the file.&lt;/p>
&lt;p>By default the &lt;code>read()&lt;/code> method returns the whole text, but you can also specify how many characters you want to return.&lt;/p>
&lt;p>You can return one line by using the &lt;code>readline()&lt;/code> method.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">f&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;demofile.txt&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;r&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">readline&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It is a good practice to always close the file when you are done with it.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">close&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="writecreate">Write/Create
&lt;/h3>&lt;p>To write to an existing file, you must add a parameter to the &lt;code>open()&lt;/code> function:&lt;/p>
&lt;p>&lt;code>&amp;quot;a&amp;quot;&lt;/code> - Append - will append to the end of the file&lt;/p>
&lt;p>&lt;code>&amp;quot;w&amp;quot;&lt;/code> - Write - will overwrite any existing content&lt;/p>
&lt;p>To create a new file in Python, use the &lt;code>open()&lt;/code> method, with one of the following parameters:&lt;/p>
&lt;p>&lt;code>&amp;quot;x&amp;quot;&lt;/code> - Create - will create a file, returns an error if the file exist&lt;/p>
&lt;p>&lt;code>&amp;quot;a&amp;quot;&lt;/code> - Append - will create a file if the specified file does not exist&lt;/p>
&lt;p>&lt;code>&amp;quot;w&amp;quot;&lt;/code> - Write - will create a file if the specified file does not exist&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">f&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;demofile3.txt&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;w&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">f&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Woops! I have deleted the content!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="delete">Delete
&lt;/h3>&lt;p>To delete a file, you must import the OS module, and run its &lt;code>os.remove()&lt;/code> function.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">os&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">path&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">exists&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;demofile.txt&amp;#34;&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">os&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">remove&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;demofile.txt&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">else&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;The file does not exist&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To delete an entire folder, use the &lt;code>os.rmdir()&lt;/code> method:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-pyt" data-lang="pyt">import os
os.rmdir(&amp;#34;myfolder&amp;#34;)
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> You can only remove &lt;em>empty&lt;/em> folders.&lt;/p>
&lt;/blockquote>
&lt;h2 id="module">Module
&lt;/h2>&lt;p>Consider a module to be the same as a code library.&lt;/p>
&lt;p>A file containing a set of functions you want to include in your application.&lt;/p>
&lt;p>we can use a module by using the &lt;code>import&lt;/code> statement&lt;/p>
&lt;p>You can name the module file whatever you like, but it must have the file extension &lt;code>.py&lt;/code>&lt;/p>
&lt;p>You can create an alias when you import a module, by using the &lt;code>as&lt;/code> keyword&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">mymodule&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nn">mx&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> When importing using the &lt;code>from&lt;/code> keyword, do not use the module name when referring to elements in the module. Example: &lt;code>person1[&amp;quot;age&amp;quot;]&lt;/code>, &lt;strong>not&lt;/strong> &lt;code>mymodule.person1[&amp;quot;age&amp;quot;]&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;h3 id="dir">&lt;code>dir()&lt;/code>
&lt;/h3>&lt;p>The &lt;code>dir()&lt;/code> function is a built-in function to list all the function names (or variable names) in a module.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> The dir() function can be used on &lt;em>all&lt;/em> modules, also the ones you create yourself.&lt;/p>
&lt;/blockquote></description></item><item><title>【C#】Basics</title><link>https://dyhes.github.io/p/c%23basics/</link><pubDate>Mon, 28 Dec 2020 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/c%23basics/</guid><description>&lt;h2 id="introduction">Introduction
&lt;/h2>&lt;p>It is an object-oriented programming language created by Microsoft that runs on the .NET Framework.&lt;/p>
&lt;p>C# has roots from the C family, and the language is close to other popular languages like &lt;a class="link" href="https://www.w3schools.com/cpp/default.asp" target="_blank" rel="noopener"
>C++&lt;/a> and &lt;a class="link" href="https://www.w3schools.com/java/default.asp" target="_blank" rel="noopener"
>Java&lt;/a>.&lt;/p>
&lt;h2 id="output">output
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c#" data-lang="c#">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">WriteLine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello World!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello World! &amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="variable">Variable
&lt;/h2>&lt;pre tabindex="0">&lt;code>type variableName = value;
int myNum = 15;
&lt;/code>&lt;/pre>&lt;p>you can add the &lt;code>const&lt;/code> keyword if you don&amp;rsquo;t want others (or yourself) to overwrite existing values&lt;/p>
&lt;blockquote>
&lt;p>A const field requires a value to be provided&lt;/p>
&lt;/blockquote>
&lt;h2 id="data-type">Data Type
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">Data Type&lt;/th>
&lt;th style="text-align: left">Size&lt;/th>
&lt;th style="text-align: left">Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">int&lt;/td>
&lt;td style="text-align: left">4 bytes&lt;/td>
&lt;td style="text-align: left">Stores whole numbers from -2,147,483,648 to 2,147,483,647&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">long&lt;/td>
&lt;td style="text-align: left">8 bytes&lt;/td>
&lt;td style="text-align: left">Stores whole numbers from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">float&lt;/td>
&lt;td style="text-align: left">4 bytes&lt;/td>
&lt;td style="text-align: left">Stores fractional numbers. Sufficient for storing 6 to 7 decimal digits&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">double&lt;/td>
&lt;td style="text-align: left">8 bytes&lt;/td>
&lt;td style="text-align: left">Stores fractional numbers. Sufficient for storing 15 decimal digits&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">bool&lt;/td>
&lt;td style="text-align: left">1 bit&lt;/td>
&lt;td style="text-align: left">Stores true or false values&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">char&lt;/td>
&lt;td style="text-align: left">2 bytes&lt;/td>
&lt;td style="text-align: left">Stores a single character/letter, surrounded by single quotes&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">string&lt;/td>
&lt;td style="text-align: left">2 bytes per character&lt;/td>
&lt;td style="text-align: left">Stores a sequence of characters, surrounded by double quotes&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="arrays">Arrays
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c#" data-lang="c#">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">string&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="n">cars&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;Volvo&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;BMW&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Ford&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Mazda&amp;#34;&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">WriteLine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cars&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Length&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//if you declare an array and initialize it later, you have to use the new keyword&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">string&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="n">cars&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Add values, using new&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cars&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;Volvo&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;BMW&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Ford&amp;#34;&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="type-casting">Type Casting
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-csharp" data-lang="csharp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//explicit&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">myInt&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">myDouble&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It is also possible to convert data types explicitly by using built-in methods, such as&lt;code>Convert.ToBoolean&lt;/code>, &lt;code>Convert.ToDouble&lt;/code>, &lt;code>Convert.ToString&lt;/code>, &lt;code>Convert.ToInt32&lt;/code> (&lt;code>int&lt;/code>) and &lt;code>Convert.ToInt64&lt;/code> (&lt;code>long&lt;/code>)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c#" data-lang="c#">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">myInt&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">double&lt;/span> &lt;span class="n">myDouble&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">5.25&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">bool&lt;/span> &lt;span class="n">myBool&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">WriteLine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Convert&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ToString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">myInt&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// convert int to string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">WriteLine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Convert&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ToDouble&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">myInt&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// convert int to double&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">WriteLine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Convert&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ToInt32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">myDouble&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// convert double to int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">WriteLine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Convert&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ToString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">myBool&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// convert bool to string&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="user-input">User Input
&lt;/h2>&lt;p>we use &lt;code>Console.ReadLine()&lt;/code> to get user input.&lt;/p>
&lt;p>The &lt;code>Console.ReadLine()&lt;/code> method returns a &lt;code>string&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c#" data-lang="c#">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">string&lt;/span> &lt;span class="n">userName&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ReadLine&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">age&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Convert&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ToInt32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ReadLine&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="foreach-loop">foreach Loop
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c#" data-lang="c#">&lt;span class="line">&lt;span class="cl">&lt;span class="k">foreach&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">type&lt;/span> &lt;span class="n">variableName&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">arrayName&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// code block to be executed&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="oop">OOP
&lt;/h2>&lt;h3 id="access-modifier">Access Modifier
&lt;/h3>&lt;p>C# has the following access modifiers:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">Modifier&lt;/th>
&lt;th style="text-align: left">Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">&lt;code>public&lt;/code>&lt;/td>
&lt;td style="text-align: left">The code is accessible for all classes&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;code>private&lt;/code>&lt;/td>
&lt;td style="text-align: left">The code is only accessible within the same class&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;code>protected&lt;/code>&lt;/td>
&lt;td style="text-align: left">The code is accessible within the same class, or in a class that is inherited from that class. You will learn more about &lt;a class="link" href="https://www.w3schools.com/cs/cs_inheritance.asp" target="_blank" rel="noopener"
>inheritance&lt;/a> in a later chapter&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;code>internal&lt;/code>&lt;/td>
&lt;td style="text-align: left">The code is only accessible within its own assembly, but not from another assembly. You will learn more about this in a later chapter&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>There&amp;rsquo;s also two combinations: &lt;code>protected internal&lt;/code> and &lt;code>private protected&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c#" data-lang="c#">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Person&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">private&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">Name&lt;/span> &lt;span class="c1">// property&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="k">get&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">set&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="sealed">Sealed
&lt;/h3>&lt;p>If you don&amp;rsquo;t want other classes to inherit from a class, use the &lt;code>sealed&lt;/code> keyword&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c#" data-lang="c#">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">sealed&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Vehicle&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="polymorphism">Polymorphism
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c#" data-lang="c#">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Animal&lt;/span> &lt;span class="c1">// Base class (parent) &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="k">virtual&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">animalSound&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">WriteLine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;The animal makes a sound&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Pig&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Animal&lt;/span> &lt;span class="c1">// Derived class (child) &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">override&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">animalSound&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">WriteLine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;The pig says: wee wee&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Dog&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Animal&lt;/span> &lt;span class="c1">// Derived class (child) &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">public&lt;/span> &lt;span class="kd">override&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">animalSound&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">WriteLine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;The dog says: bow wow&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Program&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">static&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="n">Main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Animal&lt;/span> &lt;span class="n">myAnimal&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Animal&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// Create a Animal object&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Animal&lt;/span> &lt;span class="n">myPig&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Pig&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// Create a Pig object&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Animal&lt;/span> &lt;span class="n">myDog&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Dog&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// Create a Dog object&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">myAnimal&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">animalSound&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">myPig&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">animalSound&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">myDog&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">animalSound&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="abstract">Abstract
&lt;/h2>&lt;p>The &lt;code>abstract&lt;/code> keyword is used for classes and methods:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Abstract class:&lt;/strong> is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class).&lt;/li>
&lt;li>&lt;strong>Abstract method:&lt;/strong> can only be used in an abstract class, and it does not have a body. The body is provided by the derived class (inherited from).&lt;/li>
&lt;/ul>
&lt;h2 id="interface">Interface
&lt;/h2>&lt;p>An &lt;code>interface&lt;/code> is a completely &amp;ldquo;&lt;strong>abstract class&lt;/strong>&amp;rdquo;, which can only contain abstract methods and properties (with empty bodies):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c#" data-lang="c#">&lt;span class="line">&lt;span class="cl">&lt;span class="k">interface&lt;/span> &lt;span class="nc">Animal&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">void&lt;/span> &lt;span class="n">animalSound&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// interface method (does not have a body)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">void&lt;/span> &lt;span class="n">run&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// interface method (does not have a body)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="enums">Enums
&lt;/h3>&lt;p>An &lt;code>enum&lt;/code> is a special &amp;ldquo;class&amp;rdquo; that represents a group of &lt;strong>constants&lt;/strong> (unchangeable/read-only variables).&lt;/p>
&lt;p>To create an &lt;code>enum&lt;/code>, use the &lt;code>enum&lt;/code> keyword (instead of class or interface), and separate the enum items with a comma&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c#" data-lang="c#">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">enum&lt;/span> &lt;span class="n">Level&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Low&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Medium&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">High&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Level&lt;/span> &lt;span class="n">myVar&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Level&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Medium&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">WriteLine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">myVar&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>【Java】Basics</title><link>https://dyhes.github.io/p/javabasics/</link><pubDate>Sun, 20 Dec 2020 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/javabasics/</guid><description>&lt;h2 id="introduction">Introduction
&lt;/h2>&lt;p>Every line of code that runs in Java must be inside a &lt;code>class&lt;/code>. A class should always start with an uppercase first letter.&lt;/p>
&lt;p>The name of the java file &lt;strong>must match&lt;/strong> the class name. When saving the file, save it using the class name and add &amp;ldquo;.java&amp;rdquo; to the end of the filename.&lt;/p>
&lt;p>Every program must contain the &lt;code>main()&lt;/code> method.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="variables">Variables
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">type&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">variablename&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">arrayname&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="data-types">Data Types
&lt;/h3>&lt;h4 id="primitive-types">primitive types
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">Data Type&lt;/th>
&lt;th style="text-align: left">Size&lt;/th>
&lt;th style="text-align: left">Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">byte&lt;/td>
&lt;td style="text-align: left">1 byte&lt;/td>
&lt;td style="text-align: left">Stores whole numbers from -128 to 127&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">short&lt;/td>
&lt;td style="text-align: left">2 bytes&lt;/td>
&lt;td style="text-align: left">Stores whole numbers from -32,768 to 32,767&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">int&lt;/td>
&lt;td style="text-align: left">4 bytes&lt;/td>
&lt;td style="text-align: left">Stores whole numbers from -2,147,483,648 to 2,147,483,647&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">long&lt;/td>
&lt;td style="text-align: left">8 bytes&lt;/td>
&lt;td style="text-align: left">Stores whole numbers from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">float&lt;/td>
&lt;td style="text-align: left">4 bytes&lt;/td>
&lt;td style="text-align: left">Stores fractional numbers. Sufficient for storing 6 to 7 decimal digits&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">double&lt;/td>
&lt;td style="text-align: left">8 bytes&lt;/td>
&lt;td style="text-align: left">Stores fractional numbers. Sufficient for storing 15 decimal digits&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">boolean&lt;/td>
&lt;td style="text-align: left">1 bit&lt;/td>
&lt;td style="text-align: left">Stores true or false values&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">char&lt;/td>
&lt;td style="text-align: left">2 bytes&lt;/td>
&lt;td style="text-align: left">Stores a single character/letter or ASCII values&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="non-primitive">Non-primitive
&lt;/h4>&lt;p>Non-primitive data types are called &lt;strong>reference types&lt;/strong> because they refer to objects.&lt;/p>
&lt;ul>
&lt;li>String&lt;/li>
&lt;li>Arrays&lt;/li>
&lt;li>Classes&lt;/li>
&lt;li>Interfaces&lt;/li>
&lt;/ul>
&lt;h4 id="main-difference">main difference
&lt;/h4>&lt;ul>
&lt;li>Primitive types are &lt;strong>predefined&lt;/strong> in Java. Non-primitive types are created by the programmer and is not defined by Java (except for &lt;code>String&lt;/code>).&lt;/li>
&lt;li>A primitive type has always a value, while non-primitive types can be &lt;code>null&lt;/code>.&lt;/li>
&lt;li>A &lt;strong>primitive type&lt;/strong> starts with a &lt;strong>lowercase letter&lt;/strong>, while &lt;strong>non-primitive types&lt;/strong> starts with an &lt;strong>uppercase letter&lt;/strong>.&lt;/li>
&lt;li>The size of a primitive type depends on the data type, while &lt;strong>non-primitive types have all the same size&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;h3 id="final">final
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">myNum&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">15&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">//you couldn&amp;#39;t change it anymore&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">//just like const in js&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="name-rules">name rules
&lt;/h3>&lt;p>The general rules for naming variables are:&lt;/p>
&lt;ul>
&lt;li>Names can contain &lt;strong>letters, digits, underscores, and dollar signs&lt;/strong>&lt;/li>
&lt;li>Names must &lt;strong>begin with a letter&lt;/strong>&lt;/li>
&lt;li>Names should start with a &lt;strong>lowercase&lt;/strong> letter and it &lt;strong>cannot contain whitespace&lt;/strong>&lt;/li>
&lt;li>Names can also begin with &lt;strong>$ and _&lt;/strong> (but we will not use it in this tutorial)&lt;/li>
&lt;li>Names are &lt;strong>case sensitive&lt;/strong> (&amp;ldquo;myVar&amp;rdquo; and &amp;ldquo;myvar&amp;rdquo; are different variables)&lt;/li>
&lt;li>Reserved words (like Java keywords, such as &lt;code>int&lt;/code> or &lt;code>boolean&lt;/code>) cannot be used as names&lt;/li>
&lt;/ul>
&lt;h3 id="casting">Casting
&lt;/h3>&lt;h4 id="widening-casting">Widening Casting
&lt;/h4>&lt;p>Widening casting is done automatically when passing a smaller size type to a larger size type&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">myInt&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">9&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">myDouble&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">myInt&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="narrowing-casting">Narrowing Casting
&lt;/h4>&lt;p>Narrowing casting must be done manually by placing the type in parentheses in front of the value&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">double&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">myDouble&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">9&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">78d&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">myInt&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">myDouble&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="overload">Overload
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">myMethod&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">myMethod&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kt">float&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">myMethod&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">float&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">myMethod&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="classes">Classes
&lt;/h2>&lt;p>a class is a template for objects, and an object is an instance of a class.&lt;/p>
&lt;h3 id="constructor">Constructor
&lt;/h3>&lt;p>A constructor in Java is a &lt;strong>special method&lt;/strong> that is used to initialize objects. The constructor is called when an object of a class is created. It can be used to set initial values for object attributes&lt;/p>
&lt;p>Note that the constructor name must &lt;strong>match the class name&lt;/strong>, and it cannot have a &lt;strong>return type&lt;/strong> (like &lt;code>void&lt;/code>).&lt;/p>
&lt;h3 id="modifiers">Modifiers
&lt;/h3>&lt;h4 id="access-modifiers">Access Modifiers
&lt;/h4>&lt;ul>
&lt;li>**public: **accessible for all classes&lt;/li>
&lt;li>&lt;strong>protected:&lt;/strong> accessible in the same package and &lt;strong>subclasses&lt;/strong>&lt;/li>
&lt;li>**default: **accessible in the same package&lt;/li>
&lt;li>&lt;strong>private:&lt;/strong> only accessible within the declared class&lt;/li>
&lt;/ul>
&lt;h4 id="non-access-modifiers">Non-Access Modifiers
&lt;/h4>&lt;h5 id="for-classes">for classes
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>final&lt;/strong>: cannot be inherited&lt;/li>
&lt;li>&lt;strong>abstract&lt;/strong>: cannot be used to create objects&lt;/li>
&lt;/ul>
&lt;h5 id="for-attributes-and-methods">for attributes and methods
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>final&lt;/strong>: cannot be overridden/modified&lt;/li>
&lt;li>&lt;strong>static&lt;/strong> :belongs to the class, rather than an object&lt;/li>
&lt;li>&lt;strong>abstract&lt;/strong>: Can only be used in an abstract class, and can only be used on methods.&lt;/li>
&lt;/ul>
&lt;h3 id="main-concepts-of-oop">Main Concepts of OOP
&lt;/h3>&lt;h4 id="encapsulation">Encapsulation
&lt;/h4>&lt;ul>
&lt;li>
&lt;p>declare class variables/attributes as &lt;code>private&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>provide public &lt;strong>get&lt;/strong> and &lt;strong>set&lt;/strong> methods to access and update the value of a &lt;code>private&lt;/code> variable&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>To inherit from a class, use the &lt;code>extends&lt;/code> keyword.&lt;/p>
&lt;h4 id="inheritance">Inheritance
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>subclass&lt;/strong> (child) - the class that inherits from another class&lt;/li>
&lt;li>&lt;strong>superclass&lt;/strong> (parent) - the class being inherited from&lt;/li>
&lt;/ul>
&lt;h4 id="polymorphism">Polymorphism
&lt;/h4>&lt;p>subclasses can override methods inherited from superclasses&lt;/p>
&lt;h4 id="abstract">Abstract
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>Abstract class:&lt;/strong> is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class).&lt;/li>
&lt;li>&lt;strong>Abstract method:&lt;/strong> can only be used in an abstract class, and it does not have a body. The body is provided by the subclass (inherited from).&lt;/li>
&lt;/ul>
&lt;h3 id="interface">Interface
&lt;/h3>&lt;p>An &lt;code>interface&lt;/code> is a completely &amp;ldquo;&lt;strong>abstract class&lt;/strong>&amp;rdquo; that is used to group related methods with empty bodies&lt;/p>
&lt;p>To access the interface methods, the interface must be &amp;ldquo;implemented&amp;rdquo; (kinda like inherited) by another class with the &lt;code>implements&lt;/code> keyword (instead of &lt;code>extends&lt;/code>). The body of the interface method is provided by the &amp;ldquo;implement&amp;rdquo; class.&lt;/p>
&lt;ul>
&lt;li>On implementation of an interface, you must override all of its methods&lt;/li>
&lt;li>Interface &lt;strong>methods&lt;/strong> are by default &lt;code>abstract&lt;/code> and &lt;code>public&lt;/code>&lt;/li>
&lt;li>Interface &lt;strong>attributes&lt;/strong> are by default &lt;code>public&lt;/code>, &lt;code>static&lt;/code> and &lt;code>final&lt;/code>&lt;/li>
&lt;li>An interface cannot contain a constructor (as it cannot be used to create objects)&lt;/li>
&lt;/ul>
&lt;h4 id="why">why
&lt;/h4>&lt;ol>
&lt;li>
&lt;p>To achieve &lt;strong>security&lt;/strong> - hide certain details and only show the important details of an object (interface).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Java does not support &amp;ldquo;multiple inheritance&amp;rdquo; (a class can only inherit from one superclass). However, it can be achieved with interfaces, because the class can &lt;strong>implement&lt;/strong> multiple interfaces. &lt;strong>Note:&lt;/strong> To implement multiple interfaces, separate them with a comma (see example below).&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="inner-classes">Inner Classes
&lt;/h3>&lt;p>In Java, it is also possible to nest classes (a class within a class). The purpose of nested classes is to group classes that belong together, which makes your code more &lt;strong>readable and maintainable&lt;/strong>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">OuterClass&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">10&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">InnerClass&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">5&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">Main&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">OuterClass&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">myOuter&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">OuterClass&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">OuterClass&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">InnerClass&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">myInner&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">myOuter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">InnerClass&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">myInner&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">y&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">myOuter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">x&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="wrapper-classes">Wrapper Classes
&lt;/h3>&lt;p>Wrapper classes provide a way to use primitive data types (&lt;code>int&lt;/code>, &lt;code>boolean&lt;/code>, etc..) as objects.&lt;/p>
&lt;p>The table below shows the primitive type and the equivalent wrapper class:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">Primitive Data Type&lt;/th>
&lt;th style="text-align: left">Wrapper Class&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">byte&lt;/td>
&lt;td style="text-align: left">Byte&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">short&lt;/td>
&lt;td style="text-align: left">Short&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">int&lt;/td>
&lt;td style="text-align: left">Integer&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">long&lt;/td>
&lt;td style="text-align: left">Long&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">float&lt;/td>
&lt;td style="text-align: left">Float&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">double&lt;/td>
&lt;td style="text-align: left">Double&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">boolean&lt;/td>
&lt;td style="text-align: left">Boolean&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">char&lt;/td>
&lt;td style="text-align: left">Character&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="enums">Enums
&lt;/h2>&lt;p>An &lt;code>enum&lt;/code> is a special &amp;ldquo;class&amp;rdquo; that represents a group of &lt;strong>constants&lt;/strong> (unchangeable variables, like &lt;code>final&lt;/code> variables).&lt;/p>
&lt;p>To create an &lt;code>enum&lt;/code>, use the &lt;code>enum&lt;/code> keyword (instead of class or interface), and separate the constants with a comma. Note that they should be in uppercase letters&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">enum&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Level&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">LOW&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">MEDIUM&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">HIGH&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">//looping&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Level&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">myVar&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Level&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">values&lt;/span>&lt;span class="p">())&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">myVar&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>An &lt;code>enum&lt;/code> can, just like a &lt;code>class&lt;/code>, have attributes and methods. The only difference is that enum constants are &lt;code>public&lt;/code>, &lt;code>static&lt;/code> and &lt;code>final&lt;/code> (unchangeable - cannot be overridden).&lt;/p>
&lt;p>An &lt;code>enum&lt;/code> cannot be used to create objects, and it cannot extend other classes (but it can implement interfaces).&lt;/p>
&lt;h2 id="user-input">User Input
&lt;/h2>&lt;p>The &lt;code>Scanner&lt;/code> class is used to get user input, and it is found in the &lt;code>java.util&lt;/code> package.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nn">java.util.Scanner&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// Import the Scanner class&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">Main&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Scanner&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">myObj&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Scanner&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">in&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// Create a Scanner object&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Enter username&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">userName&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">myObj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">nextLine&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// Read user input&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Username is: &amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">userName&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// Output user input&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">Method&lt;/th>
&lt;th style="text-align: left">Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">&lt;code>nextBoolean()&lt;/code>&lt;/td>
&lt;td style="text-align: left">Reads a &lt;code>boolean&lt;/code> value from the user&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;code>nextByte()&lt;/code>&lt;/td>
&lt;td style="text-align: left">Reads a &lt;code>byte&lt;/code> value from the user&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;code>nextDouble()&lt;/code>&lt;/td>
&lt;td style="text-align: left">Reads a &lt;code>double&lt;/code> value from the user&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;code>nextFloat()&lt;/code>&lt;/td>
&lt;td style="text-align: left">Reads a &lt;code>float&lt;/code> value from the user&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;code>nextInt()&lt;/code>&lt;/td>
&lt;td style="text-align: left">Reads a &lt;code>int&lt;/code> value from the user&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;code>nextLine()&lt;/code>&lt;/td>
&lt;td style="text-align: left">Reads a &lt;code>String&lt;/code> value from the user&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;code>nextLong()&lt;/code>&lt;/td>
&lt;td style="text-align: left">Reads a &lt;code>long&lt;/code> value from the user&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;code>nextShort()&lt;/code>&lt;/td>
&lt;td style="text-align: left">Reads a &lt;code>short&lt;/code> value from the user&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="collections">Collections
&lt;/h2>&lt;h4 id="arraylist">ArrayList
&lt;/h4>&lt;p>The &lt;code>ArrayList&lt;/code> class is a resizable array&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">cars&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="linkedlist">LinkedList
&lt;/h4>&lt;p>The &lt;code>LinkedList&lt;/code> class has all of the same methods as the &lt;code>ArrayList&lt;/code> class because they both implement the &lt;code>List&lt;/code> interface. But they work in different way.&lt;/p>
&lt;h4 id="hashmap">HashMap
&lt;/h4>&lt;p>A &lt;code>HashMap&lt;/code> however, store items in &amp;ldquo;&lt;strong>key&lt;/strong>/&lt;strong>value&lt;/strong>&amp;rdquo; pairs, and you can access them by an index of another type.(e.g. a &lt;code>String&lt;/code>)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">HashMap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">capitalCities&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">HashMap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="hashset">HashSet
&lt;/h4>&lt;p>A HashSet is a collection of items where every item is unique.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">HashSet&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">cars&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">HashSet&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="iterator">Iterator
&lt;/h4>&lt;p>An &lt;code>Iterator&lt;/code> is an object that can be used to loop through collections.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Import the ArrayList class and the Iterator class&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kn">import&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nn">java.util.ArrayList&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kn">import&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nn">java.util.Iterator&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">Main&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Make a collection&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">cars&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">cars&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Volvo&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">cars&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;BMW&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">cars&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Ford&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">cars&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Mazda&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Get the iterator&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Iterator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">it&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">cars&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">iterator&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Print the first item&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">it&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To loop through a collection, use the &lt;code>hasNext()&lt;/code> and &lt;code>next()&lt;/code> methods of the &lt;code>Iterator&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">it&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">hasNext&lt;/span>&lt;span class="p">())&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">it&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="removing-items">Removing items
&lt;/h5>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">it&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">hasNext&lt;/span>&lt;span class="p">())&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">it&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">10&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">it&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">remove&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Note:&lt;/strong> Trying to remove items using a &lt;strong>for loop&lt;/strong> or a &lt;strong>for-each loop&lt;/strong> would not work correctly because the collection is changing size at the same time that the code is trying to loop.&lt;/p>
&lt;h2 id="lambda">Lambda
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">parameter&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">expression&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">parameter1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">parameter2&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">expression&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">parameter1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">parameter2&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">code&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">block&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="thread">Thread
&lt;/h2>&lt;p>Threads allows a program to operate more efficiently by doing multiple things at the same time.&lt;/p>
&lt;p>Threads can be used to perform complicated tasks in the background without interrupting the main program.&lt;/p>
&lt;h3 id="creating">Creating
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">Main&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">extends&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">run&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;This code is running in a thread&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">//2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">Main&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">implements&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Runnable&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">run&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;This code is running in a thread&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="running">Running
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">Main&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">extends&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Main&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Main&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;This code is outside of the thread&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">run&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;This code is running in a thread&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">//2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">Main&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">implements&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Runnable&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Main&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Main&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">obj&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;This code is outside of the thread&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">run&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;This code is running in a thread&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="exceptions">Exceptions
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="k">try&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">throw&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="k">catch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Exception&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">){&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="k">finally&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>【CPP】C++程序设计-崔毅东</title><link>https://dyhes.github.io/p/cppc-%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E5%B4%94%E6%AF%85%E4%B8%9C/</link><pubDate>Sun, 06 Dec 2020 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/cppc-%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E5%B4%94%E6%AF%85%E4%B8%9C/</guid><description>&lt;h2 id="history">History
&lt;/h2>&lt;p>符合C++11及之后标准的C++称之为“Modern C++”，即“现代C++”。之前的C++称为“Classic C++”，即“经典C++”&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Year&lt;/th>
&lt;th>C++ Standard&lt;/th>
&lt;th>Informal name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>2020&lt;/td>
&lt;td>ISO/IEC 14882:2020&lt;/td>
&lt;td>C++20&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2017&lt;/td>
&lt;td>ISO/IEC 14882:2017&lt;/td>
&lt;td>C++17, C++1z&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2014&lt;/td>
&lt;td>ISO/IEC 14882:2014&lt;/td>
&lt;td>C++14, C++1y&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2011&lt;/td>
&lt;td>ISO/IEC 14882:2011&lt;/td>
&lt;td>C++11, C++0x&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2003&lt;/td>
&lt;td>ISO/IEC 14882:2003&lt;/td>
&lt;td>C++03&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1998&lt;/td>
&lt;td>ISO/IEC 14882:1998&lt;/td>
&lt;td>C++98&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="glossary">Glossary
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>编辑器（Editor）&lt;/p>
&lt;p>程序开发中的“编辑器”一般是指“代码编辑器”。代码编辑器主要用于用来编写和查看程序源代码。通常这种编辑器有语法加亮（Syntax-Highlighting）功能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>编译器（Compiler）&lt;/p>
&lt;p>编译器（compiler），是一种计算机程序，它会将用某种编程语言写成的源代码（原始语言），转换成另一种编程语言（目标语言）。&lt;/p>
&lt;p>A compiler is a computer program that transforms computer code written in one programming language (the source language) into another programming language (the target language). Compilers are a type of translator that support digital devices, primarily computers. The name compiler is primarily used for programs that translate source code &lt;strong>from a high-level programming language to a lower level language&lt;/strong> (e.g., assembly language, object code, or machine code) to create an &lt;strong>executable&lt;/strong> program.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>链接器（Linker）&lt;/p>
&lt;p>是一个程序，将一个或多个由编译器或汇编器生成的目标文件外加库链接为一个&lt;strong>可执行文件&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调试器（Debugger）&lt;/p>
&lt;p>调试器是指一种用于调试其它程序的计算机程序及工具。能够让代码在指令组模拟器（ISS）中可以检查运行状况以及选择性地运行，以便排错、调试。当开发的进度遇到瓶颈或找不出哪里有问题时，这技术将是非常有用的。但是将程序运行在调试器之下，这将比直接在运作的平台以及处理器上运行还要来得慢。&lt;/p>
&lt;p>典型的调试器通常能够在程序运行时拥有以下这些功能，例如单步运行（single-stepping）、利用中断点（breakpoint）使程序遇到各种种类的事件（event）时停止（breaking）（一般用于使程序停止在想要检查的状态）、以及追踪某些变量的变化。有些调试器也有能力在想要调试的程序在运行状态时，去改变它的状态，而不仅仅只是用来观察而己。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>解释器（interpreter）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>解释器是一种计算机程序，能够把高级编程语言一行一行解释运行。解释器像是一位“中间人”，每次运行程序时都要先转成另一种语言再作运行，因此解释器的程序运行速度比较缓慢。它不会一次把整个程序翻译出来，而是每翻译一行程序就立刻运行，然后再翻译下一行，再运行，如此不停地进行下去。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>集成开发环境（Integrated Development Environment，简称IDE）&lt;/p>
&lt;p>集成开发环境是一种辅助程序开发人员开发软件的应用软件，在开发工具内部就可以辅助编写源代码文本、并编译打包成为可用的程序，有些甚至可以设计图形接口。&lt;/p>
&lt;p>IDE通常包括编程语言编辑器、自动构建工具、通常还包括调试器。有些IDE包含编译器／解释器，如微软的Microsoft Visual Studio，有些则不包含，如Eclipse、SharpDevelop等，这些IDE是通过调用第三方编译器来实现代码的编译工作的。有时IDE还会包含版本控制系统和一些可以设计图形用户界面的工具。许多支持面向对象的现代化IDE还包括了类别浏览器、对象查看器、对象结构图。虽然当前有一些IDE支持多种编程语言（例如Eclipse、NetBeans、Microsoft Visual Studio），但是一般而言，IDE主要还是针对特定的编程语言而量身打造（例如Visual Basic）。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Visual Studio中包含的C++集成开发环境叫做 Visual C++。&lt;/p>
&lt;h2 id="visial-studio">Visial Studio
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>工程/项目与解决方案&lt;/p>
&lt;p>Visual C++中，将一个C++项目所需的所有源代码文件、资源文件等组织在一起，形成一个“Project”，我们俗称“C++工程”或者“C++项目”。有时简称“项目”。&lt;/p>
&lt;p>Visual C++ 将一个或者多个C++项目组织在一起，形成一个“Solution”，也就是“解决方案”。&lt;/p>
&lt;p>解决方案中的项目可能有互相的依赖关系。解决方案中的项目可以一键全部编译。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>解决方案文件夹&lt;/p>
&lt;p>C++解决方案中，可以建立虚拟的“解决方案文件夹”，将多个项目分类管理。&lt;/p>
&lt;p>C++解决方案中的项目，可能在硬盘的不同目录下，甚至在不同的硬盘上。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="命名空间">命名空间
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//not recomended
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">using&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34;ha&amp;#34;&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34;ha&amp;#34;&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//recomended
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="编译">编译
&lt;/h2>&lt;p>&lt;img src="https://edu-image.nosdn.127.net/9B0617ED4BF4641BC9997B166B655E9E.jpg?imageView&amp;amp;thumbnail=890x0&amp;amp;quality=100"
loading="lazy"
alt="img"
>&lt;/p>
&lt;h2 id="输入输出流">输入输出流
&lt;/h2>&lt;p>&lt;img src="C:%5cUsers%5cdyhes%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20220425141514427.png"
loading="lazy"
alt="image-20220425141514427"
>&lt;/p>
&lt;h2 id="引用reference">引用（Reference）
&lt;/h2>&lt;p>大部分时候可视为指针的语法糖&lt;/p>
&lt;p>C++的引用主要是为了支持运算符重载；指针的存在主要是为了兼容C语言。&lt;/p>
&lt;p>用户自定义类型最好用引用传参，这样可以避免不必要的构造函数和析构函数调用；对于内置(C-like)类型，按值传参会比按引用传参更高效。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">rx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">rx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>Any changes made through the reference variable are actually performed on the original variable (通过引用所做的读写操作实际上是作用于原变量上).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A reference must be initialized in declaration 引用必须在声明的时候初始化。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Once initialized, the name of the reference cannot be assigned to other variables (引用一旦初始化，引用名字就不能再指定给其它变量)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You can use a reference variable as a parameter in a function and pass a regular variable to invoke the function. (引用可做函数参数，但调用时只需传普通变量即可)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>When you change the value through the reference variable, the original value is actually changed. (在被调函数中改变引用变量的值，则改变的是实参的值)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="动态内存管理">动态内存管理
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">new&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">initialValue&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//申请一个变量的空间
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">literalExpression&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="c1">//申请数组
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">delete&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">pointerName&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//删除一个变量/对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">delete&lt;/span> &lt;span class="p">[]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">pointerName&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//删除数组空间
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://img.gejiba.com/images/aefd454d5d165b890c300704b3c34817.png"
loading="lazy"
alt="aefd454d5d165b890c300704b3c34817.png"
>&lt;/p>
&lt;h2 id="数据类型">数据类型
&lt;/h2>&lt;h3 id="bool">bool
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>整数0和布尔false互相转化&lt;/p>
&lt;/li>
&lt;li>
&lt;p>布尔true转化为整数1&lt;/p>
&lt;/li>
&lt;li>
&lt;p>任意非0整数转化为布尔true&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="列表初始化c11">列表初始化（C++11）
&lt;/h2>&lt;p>&lt;img src="https://img.gejiba.com/images/705cbabcbd800e2a6ab273005950b425.png"
loading="lazy"
alt="705cbabcbd800e2a6ab273005950b425.png"
>&lt;/p>
&lt;p>List initialization is a new feature for C++11 (列表初始化是C++11的一个新特性)&lt;/p>
&lt;p>List: braced-init-list (“列表”是用花括号括起来的一(些)值)&lt;/p>
&lt;p>列表初始化的两个分类&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Direct list initialization (直接列表初始化)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/* Variable initialization */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">{};&lt;/span> &lt;span class="c1">// x is 0;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// y is 1;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/* Array initialization */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">array1&lt;/span>&lt;span class="p">[]{&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">char&lt;/span> &lt;span class="n">s1&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="sc">&amp;#39;o&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;k&amp;#39;&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">char&lt;/span> &lt;span class="n">s3&lt;/span>&lt;span class="p">[]{&lt;/span> &lt;span class="s">&amp;#34;Hello&amp;#34;&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Copy list initialization (拷贝列表初始化)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/* Variable initialization */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">z&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/* Array initialization */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">array2&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">6&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">char&lt;/span> &lt;span class="n">s2&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="sc">&amp;#39;y&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="sc">&amp;#39;e&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="sc">&amp;#39;s&amp;#39;&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">char&lt;/span> &lt;span class="n">s4&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="s">&amp;#34;World&amp;#34;&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">char&lt;/span> &lt;span class="n">s5&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Aloha&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// Omit curly braces (省略花括号)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>List initialization is also called &amp;ldquo;unified initialization&amp;rdquo; (列表初始化也被称为“&lt;strong>统一初始化方法&lt;/strong>”)
Variables and arrays are initialized in the same form (变量和数组用同样的形式初始化)&lt;/p>
&lt;h3 id="when-to-use">when to use
&lt;/h3>&lt;p>Prefer {} initialization over alternatives unless you have a strong reason not to（尽量使用列表初始化，除非你有个很好的不用它的理由）&lt;/p>
&lt;p>Why: List initialization does not allow narrowing（原因：列表初始化不允许“窄化”，即不允许丢失数据精度的隐式类型转换）&lt;/p>
&lt;h2 id="类型转换">类型转换
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>隐式类型转换
由编译器按照数据类型的转换规则自动转换，无需程序员干预。
可能导致数据精度损失，或者转换失败。应&lt;strong>尽量避免&lt;/strong>使用隐式类型转换&lt;/p>
&lt;/li>
&lt;li>
&lt;p>显式类型转换（即：强制类型转换）
由程序员用明确的类型转换语法写出类型转换代码。好处是，程序员知道自己要做什么并且把这个想法明确表达出来&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//c style
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="mf">2.5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//cpp style
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">static_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="k">static_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="auto-c11">auto (C++11)
&lt;/h2>&lt;p>C++03及之前的标准种，auto放在变量声明之前，声明变量的存储策略。但是这个关键字常省略不写。
C++11中，auto关键字放在变量之前，作用是在声明变量的时候根据变量初始值的类型自动为此变量选择匹配的类型&lt;/p>
&lt;ul>
&lt;li>
&lt;p>auto 变量必须在定义时初始化，这类似于const关键字&lt;/p>
&lt;/li>
&lt;li>
&lt;p>定义在一个auto序列的变量必须始终推导成同一类型&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果初始化表达式是引用或const，则去除引用或const语义。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">};&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">auto&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//c的类型为int而非int&amp;amp;（去除引用）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">a1&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">auto&lt;/span> &lt;span class="n">b1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//b1的类型为int而非const int（去除const）
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>如果auto关键字带上&amp;amp;号，则不去除引用或const语意&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">auto&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//此时d的类型才为int&amp;amp;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">a2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">auto&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">b2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a2&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//因为auto带上&amp;amp;，故不去除const，b2类型为const in
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>初始化表达式为数组时，auto关键字推导类型为指针。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">a3&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">b3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="k">typeid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b3&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//输出int * （输出与编译器有关）
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>若表达式为数组且auto带上&amp;amp;，则推导类型为数组类型。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">a7&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">auto&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">b7&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a7&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="k">typeid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b7&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//输出int [3] （输出与编译器有关）
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>C++14中，auto可以作为函数的返回值类型和参数类型&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="why-almost-always-auto">Why Almost Always Auto
&lt;/h3>&lt;p>Using auto are for correctness, performance, maintainability, robustness—and convenience (使用auto是为了代码的正确性、性能、可维护性、健壮性，以及方便)&lt;/p>
&lt;h2 id="decltype">decltype
&lt;/h2>&lt;p>decltype利用已知类型声明新变量。&lt;/p>
&lt;p>decltype是在编译期推导一个表达式的类型，它只做静态分析，因此它不会导致已知类型表达式执行。
decltype 主要用于泛型编程（模板）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&amp;lt;iostream&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">fun1&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="c1">//修改fun1()时不必改动其他
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="nf">fun2&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="sc">&amp;#39;g&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="c1">// C++14
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Data type of x is same as return type of fun1()
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// and type of y is same as return type of fun2()
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">decltype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fun1&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 不会执行fun1()函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">decltype&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fun2&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fun2&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="k">typeid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="k">typeid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="内存模型">内存模型
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>Stack&lt;/p>
&lt;p>编译器自动分配&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Heap&lt;/p>
&lt;p>由程序员分配&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Global/Static&lt;/p>
&lt;p>存储全局变量和静态变量&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Constant&lt;/p>
&lt;p>内容不可修改&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://img.gejiba.com/images/cd4f439f2e8ce127e9faa68307263fc5.png"
loading="lazy"
alt="cd4f439f2e8ce127e9faa68307263fc5.png"
>&lt;/p>
&lt;p>&lt;img src="https://img.gejiba.com/images/026ffeeb969e36bbacbd4febcec14441.png"
loading="lazy"
alt="026ffeeb969e36bbacbd4febcec14441.png"
>&lt;/p>
&lt;h2 id="常量与指针">常量与指针
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>Pointer to Constant(常量指针、常指针)&lt;/p>
&lt;p>指针所指向的内容不可以通过指针的间接引用(*p)来改变。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">p1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//指针 p1的类型是 (const int*)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">*&lt;/span>&lt;span class="n">p1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// Error!
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">s1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// Error!
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">s2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// Correct!
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Pointer Constant(指针常量)&lt;/p>
&lt;p>指针本身为常量，不可改变&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">p2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//常量 p2的类型是 (int*)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">*&lt;/span>&lt;span class="n">p2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// Okay! à x=10
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// Error! p2 is a constant
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://img.gejiba.com/images/9ac2198c912b3e54745e4267064f25dc.md.png"
loading="lazy"
alt="9ac2198c912b3e54745e4267064f25dc.png"
>&lt;/p>
&lt;h2 id="using-typedef-and-define">using, typedef, and #define
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>typedef&lt;/p>
&lt;p>定义类型别名&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">MyPointer&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>using (C11)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-CPP" data-lang="CPP">&lt;span class="line">&lt;span class="cl">&lt;span class="k">using&lt;/span> &lt;span class="n">ConstPointer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">using&lt;/span> &lt;span class="n">identifier&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">const&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>using的写法比typedef的写法更加直观，所以，我们应尽量使用using声明新类型名。而且当涉及到模版类型名时，只能使用using。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>#define&lt;/p>
&lt;p>定义宏，编译器对宏进行替换&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="作用域">作用域
&lt;/h2>&lt;ul>
&lt;li>全局作用域&lt;/li>
&lt;li>局部作用域
&lt;ul>
&lt;li>文件作用域&lt;/li>
&lt;li>函数作用域&lt;/li>
&lt;li>函数中的块级作用域&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="一元作用域解析运算符unary-scope-resolution">一元作用域解析运算符（Unary Scope Resolution）
&lt;/h4>&lt;p>If a local variable name is the same as a global variable name, you can access the global variable using ::globalVariable. (局部变量名与全局变量名相同时，可使用 :: 访问全局变量)&lt;/p>
&lt;p>The :: operator is known as the unary scope resolution.（:: 这个运算符被称为一元作用域解析运算符）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">v1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">v1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;local variable v1 is &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">v1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;global variable v1 is &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">::&lt;/span>&lt;span class="n">v1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="特殊函数">特殊函数
&lt;/h2>&lt;h4 id="重载函数">重载函数
&lt;/h4>&lt;p>根据参数（个数，类型）判断，应避免二义性&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">1.1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mf">2.1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//出现二义性
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="默认参数">默认参数
&lt;/h4>&lt;p>默认值参数应后置&lt;/p>
&lt;h4 id="内联函数inline-function">内联函数（Inline Function）
&lt;/h4>&lt;p>普通函数性能有额外开销&lt;/p>
&lt;p>内联函数可减小函数调用开销，将代码插入到调用处，会导致程序变大&lt;/p>
&lt;p>是一种请求而非命令&lt;/p>
&lt;h2 id="面向对象">面向对象
&lt;/h2>&lt;h4 id="构造函数">构造函数
&lt;/h4>&lt;p>A class may be declared without ctors (类可不声明构造函数)&lt;/p>
&lt;p>(1) A no-arg constructor with an empty body is implicitly declared in the class.
(编译器会提供一个带有空函数体的无参构造函数)&lt;/p>
&lt;p>(2) This constructor, called a default constructor is provided automatically only if no constructors are explicitly declared in the class.
(只有当未明确声明构造函数时，编译器才会提供这个构造函数，并称之为“默认构造函数”)&lt;/p>
&lt;h4 id="拷贝构造函数">拷贝构造函数
&lt;/h4>&lt;p>Copy Constructor&lt;/p>
&lt;p>拷贝构造：用一个对象初始化另一个同类对象&lt;/p>
&lt;p>拷贝构造函数可以简写为 copy ctor，或者 cp ctor&lt;/p>
&lt;p>如何声明拷贝构造函数(copy ctor)&lt;/p>
&lt;p>Circle (Circle&amp;amp;);&lt;/p>
&lt;p>Circle (const Circle&amp;amp;);&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">X&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">//来自C++11标准: 12.8节
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">X&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">X&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">X&lt;/span> &lt;span class="nf">b&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// calls X(const X&amp;amp;, int);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">X&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// calls X(const X&amp;amp;, int);
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In general, if the programmer does not provide a copy ctor, the compiler will generate one.(一般情况下，如果程序员不编写拷贝构造函数，那么编译器会自动生成一个)&lt;/p>
&lt;p>The generated copy ctor is called &amp;quot; implicitly-declared/defined copy ctor &amp;quot; (自动生成的拷贝构造函数叫做“隐式声明/定义的拷贝构造函数”&lt;/p>
&lt;p>In general, the implicitly-declared/defined copy ctor simply copies each data field in one object to its counterpart in the other object. (一般情况下，隐式声明的copy ctor简单地将作为参数的对象中的每个数据域复制到新对象中)&lt;/p>
&lt;h4 id="析构函数">析构函数
&lt;/h4>&lt;p>Destructors are the opposite of constructors. (dtor vs ctor) 析构函数与构造函数正好相反&lt;/p>
&lt;p>下表中展示了ctor和dtor的对比&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;strong>Destructor&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Constructor&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>When to invoke(何时调用)&lt;/td>
&lt;td>when the object is destroyed(对象销毁时)&lt;/td>
&lt;td>when an object is created(对象创建时)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Prototype(原型)&lt;/td>
&lt;td>C::~C( )&lt;/td>
&lt;td>C::C(arguments)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Default prototype(默认函数的原型)&lt;/td>
&lt;td>C::~C( )&lt;/td>
&lt;td>C::C( ) 或参数带有默认值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>What if no explicit decl? (没有显式声明怎么办)&lt;/td>
&lt;td>Compiler will create a default one (编译器会生成默认函数)&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Overloadable(可否重载)&lt;/td>
&lt;td>No, only 1&lt;/td>
&lt;td>Yes&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="友元函数">友元函数
&lt;/h4>&lt;p>Private members: cannot be accessed from outside of the class. (私有成员无法从类外访问)&lt;/p>
&lt;p>Occasionally, it is convenient to allow some trusted functions and classes to access a class’s private members. (但有时又需要授权某些可信的函数和类访问这些私有成员)&lt;/p>
&lt;p>C++ enables you to use the friend keyword to declare friend functions and friend classes for a class (用friend关键字声明友元函数或者友元类)&lt;/p>
&lt;p>Disadvantage of &amp;ldquo;friend&amp;rdquo;: break the encapsulation (友元的缺点：打破了封装性)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Date&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">year&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="mi">2019&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="n">month&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">day&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">friend&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Kid&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">friend&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Date&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Date&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">year&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;/&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">month&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;/&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">day&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Kid&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Date&lt;/span> &lt;span class="n">birthday&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Kid&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;I was born in &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">birthday&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">year&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Date&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Kid&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cin&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="创建对象">创建对象
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Circle&lt;/span> &lt;span class="n">circle1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 正确，但不推荐这样写
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Circle&lt;/span> &lt;span class="nf">circle2&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 错误！C++编译器认为这是一个函数声明
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Circle&lt;/span> &lt;span class="n">circle3&lt;/span>&lt;span class="p">{};&lt;/span> &lt;span class="c1">// 正确，推荐写法。这里面明确显示用空初始化列表初始化circle3对象（调用Circle默认构造函数）
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="对象拷贝">对象拷贝
&lt;/h4>&lt;p>How to copy the contents from one object to the other?(如何将一个对象的内容拷贝给另外一个对象)&lt;/p>
&lt;p>(1) use the assignment operator( 使用赋值运算符) ： =&lt;/p>
&lt;p>(2) By default, &lt;strong>each data field&lt;/strong> of one object is copied to its counterpart in the other object. ( 默认情况下，对象中的每个数据域都被拷贝到另一对象的对应部分)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">circle2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">circle1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="err">将&lt;/span>&lt;span class="n">circle1&lt;/span> &lt;span class="err">的&lt;/span>&lt;span class="n">radius&lt;/span> &lt;span class="err">拷贝到&lt;/span>&lt;span class="n">circle2&lt;/span> &lt;span class="err">中&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="err">拷贝后：&lt;/span>&lt;span class="n">circle1&lt;/span> &lt;span class="err">和&lt;/span> &lt;span class="n">circle2&lt;/span> &lt;span class="err">是两个不同的对象，但是半径的值是相同的。&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="err">但是各自有一个&lt;/span>&lt;span class="n">radius&lt;/span> &lt;span class="err">成员变量&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="浅拷贝与深拷贝">浅拷贝与深拷贝
&lt;/h4>&lt;p>&lt;strong>前提条件&lt;/strong>是，类A中有个指针p，指向一个外挂对象b（b是B类型的对象）；如果类A里面没有指针成员p，那也就不要谈深浅拷贝了。&lt;/p>
&lt;p>现在有一个类A的对象a1（a1的指针p指向外挂对象b1）。以拷贝构造的方式，创建a1的一个拷贝a2。&lt;/p>
&lt;p>(1) 如果仅仅将a1.p的值（这个值是个地址）拷贝给 a2.p，这就是浅拷贝。浅拷贝之后，a1.p和a2.p都指向外挂对象 b1&lt;/p>
&lt;p>(2) 如果创建一个外挂对象b2，将 a2.p指向b2；并且将b1的值拷贝给b2，这就是深拷贝&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Shallow copy: if the field is a pointer to some object, the address of the pointer is copied rather than its contents. (浅拷贝：数据域是一个指针，只拷指针的地址，而非指针指向的内容)&lt;/p>
&lt;p>在两种情况下会出现浅拷贝&lt;/p>
&lt;p>(1) Implicit/default copy ctor (创建新对象时，调用类的&lt;strong>隐式/默认构造函数&lt;/strong>)&lt;/p>
&lt;p>(2) default assignment operator for copying = (为已有对象赋值时，使用&lt;strong>默认赋值运算符&lt;/strong>)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Employee&lt;/span> &lt;span class="n">e1&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;Jack&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1999&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">Gender&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">male&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Employee&lt;/span> &lt;span class="n">e2&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;Anna&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2000&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">11&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="nl">Gender&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">female&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Employee&lt;/span> &lt;span class="n">e3&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="n">e1&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">//cp ctor，执行一对一成员拷贝
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的代码执行之后，e3.birthday指针指向了 e1.birthday所指向的那个Date对象&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Deep copy: Copy the contents that pointed by the pointer (深拷贝：拷贝指针指向的内容)&lt;/p>
&lt;p>如何深拷贝&lt;/p>
&lt;p>(1) &lt;strong>自行编写拷贝构造函数&lt;/strong>，不使用编译器隐式生成的（默认）拷贝构造函数&lt;/p>
&lt;p>(2) &lt;strong>重载赋值运算符&lt;/strong>，不使用编译器隐式生成的（默认）赋值运算符函数&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Employee&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Employee(const Employee &amp;amp;e) = default; //浅拷贝ctor
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Employee&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Employee&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">){&lt;/span> &lt;span class="c1">//深拷贝ctor
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">birthdate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Date&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">birthdate&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Employee&lt;/span> &lt;span class="n">e1&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;Jack&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1999&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">Gender&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">male&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Employee&lt;/span> &lt;span class="n">e2&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;Anna&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2000&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">11&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">),,&lt;/span> &lt;span class="nl">Gender&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">female&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Employee&lt;/span> &lt;span class="n">e3&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="n">e1&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">//cp ctor 深拷贝
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h4 id="anonymous-object">Anonymous Object
&lt;/h4>&lt;p>匿名对象&lt;/p>
&lt;p>Occasionally, you may create an object and use it only once. (有时需要创建一个只用一次的对象)&lt;/p>
&lt;p>An object without name is called anonymous objects. (这种不命名的对象叫做匿名对象)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Circle&lt;/span> &lt;span class="n">c1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Circle&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mf">1.1&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">c2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Circle&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mf">2.2&lt;/span>&lt;span class="p">};&lt;/span> &lt;span class="c1">// 用匿名对象做拷贝列表初始化
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Circle&lt;/span> &lt;span class="n">c3&lt;/span>&lt;span class="p">{};&lt;/span> &lt;span class="c1">// 直接列表初始化,调默认Ctor
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">c3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Circle&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mf">3.3&lt;/span>&lt;span class="p">};&lt;/span> &lt;span class="c1">// 用匿名对象赋值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Area is &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">Circle&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mf">4.2&lt;/span>&lt;span class="p">}.&lt;/span>&lt;span class="n">getArea&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Area is &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">Circle&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">getArea&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 不推荐
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Area is &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">Circle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">getArea&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 不推荐
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="local-class--nested-class">Local class &amp;amp; Nested class
&lt;/h4>&lt;p>局部类和嵌套类&lt;/p>
&lt;p>Local class : a class declared inside a function (局部类是在一个函数中声明的类)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">f&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">class&lt;/span> &lt;span class="nc">C&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// C及其对象只在f()中可用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">g&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// 成员函数必须在C中实现
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* 访问f()的成员受限 ……. */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">C&lt;/span> &lt;span class="n">c1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Nested class: a class declared in another enclosing class (嵌套类是在另一个类中声明的类)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">E&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">class&lt;/span> &lt;span class="nc">N&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// N及其对象可访问E的成员
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* 声明N的成员 ……. */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">C&lt;/span> &lt;span class="n">c1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="object-pointerdynamic-object">Object Pointer&amp;amp;Dynamic Object
&lt;/h4>&lt;p>对象指针与动态对象&lt;/p>
&lt;p>Object pointers can be assigned new object names(对象指针可以指向新的对象名)&lt;/p>
&lt;p>&lt;strong>Arrow operator&lt;/strong> -&amp;gt; : Using pointer to access object members (箭头运算符 -&amp;gt; ：用指针访问对象成员)&lt;/p>
&lt;p>Object declared in a function is created in the stack.(在函数中声明的对象都在&lt;strong>栈&lt;/strong>上创建)； When the function returns, the object is destroyed (&lt;strong>函数返回，则对象被销毁&lt;/strong>).&lt;/p>
&lt;p>To retain the object, you may create it dynamically on the heap using the new operator. (为&lt;strong>保留对象&lt;/strong>，你可以用new运算符在堆上创建它)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Circle&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">pCircle1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Circle&lt;/span>&lt;span class="p">{};&lt;/span> &lt;span class="c1">//用无参构造函数创建对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ClassName&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">variable&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">ClassName&lt;/span>&lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Circle&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">pCircle2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Circle&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mf">5.9&lt;/span>&lt;span class="p">};&lt;/span> &lt;span class="c1">//用有参构造函数创建对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//程序结束时，动态对象会被销毁，或者
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">delete&lt;/span> &lt;span class="n">pObject&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//用delete显式销毁
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="array-of-objects">Array of objects
&lt;/h4>&lt;p>对象数组&lt;/p>
&lt;p>(1) 声明方式1&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Circle&lt;/span> &lt;span class="n">ca1&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>(2) 声明方式2&lt;/p>
&lt;p>用匿名对象构成的列表初始化数组&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Circle&lt;/span> &lt;span class="n">ca2&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// 注意：不可以写成： auto ca2[3]= 因为声明数组时不能用auto
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Circle&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Circle&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Circle&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>(3) 声明方式3&lt;/p>
&lt;p>用C++11列表初始化，列表成员为隐式构造的匿名对象&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Circle&lt;/span> &lt;span class="n">ca3&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mf">3.1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{},&lt;/span> &lt;span class="mi">5&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Circle&lt;/span> &lt;span class="n">ca4&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mf">3.1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{},&lt;/span> &lt;span class="mi">5&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>(4) 声明方式4&lt;/p>
&lt;p>用new在&lt;strong>堆区&lt;/strong>生成对象数组&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">auto&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">p1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Circle&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">auto&lt;/span> &lt;span class="n">p2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Circle&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]{&lt;/span> &lt;span class="mf">3.1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{},&lt;/span> &lt;span class="mi">5&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">delete&lt;/span> &lt;span class="p">[]&lt;/span> &lt;span class="n">p1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">delete&lt;/span> &lt;span class="p">[]&lt;/span> &lt;span class="n">p2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">p1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">nullptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="objects--function">Objects &amp;amp; Function
&lt;/h4>&lt;h6 id="objects-as-function-arguments">Objects as Function Arguments
&lt;/h6>&lt;ul>
&lt;li>值传递：无法改变成员值&lt;/li>
&lt;li>引用传递&lt;/li>
&lt;li>指针传递&lt;/li>
&lt;/ul>
&lt;p>一般来说，&lt;strong>能用引用尽量不用指针&lt;/strong>。引用更加直观，更少出现意外的疏忽导致的错误。&lt;/p>
&lt;p>指针可以有二重、三重之分，比引用更加灵活。有些情况下，例如使用 new 运算符，只能用指针。&lt;/p>
&lt;h6 id="objects-as-function-return-value">Objects as Function Return Value
&lt;/h6>&lt;ul>
&lt;li>
&lt;p>指针作为返回类型&lt;/p>
&lt;ul>
&lt;li>
&lt;p>evil way&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// class Object { ... };
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Object&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">f&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="cm">/*函数形参*/&lt;/span> &lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Object&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">o&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 这是“邪恶”的用法，不要这样做
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Do something
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">o&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// main() {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Object&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">o&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">f&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="cm">/*实参*/&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="cm">/*实参*/&lt;/span> &lt;span class="p">)&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">memberFunction&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 记得要delete o
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>可行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// class Object { ... };
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Object&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">f&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/*其它形参*/&lt;/span> &lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Do something
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// main() {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Object&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">o&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">f&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="cm">/*实参*/&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 不应该delete o
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>引用作为返回类型（提高效率）&lt;/p>
&lt;ul>
&lt;li>
&lt;p>evil way&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// class Object { ... };
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">f&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="cm">/*函数形参*/&lt;/span> &lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Object&lt;/span> &lt;span class="n">o&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Do something
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">o&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//这是邪恶的用法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>可行1&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// class Object { ... };
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">X&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Object&lt;/span> &lt;span class="n">o&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Object&lt;/span> &lt;span class="nf">f&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="cm">/*实参*/&lt;/span> &lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Do something
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">o&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>可行2&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// class Object { ... };
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">f&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="cm">/*其它形参*/&lt;/span> &lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Do something
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// main() {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">auto&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">o&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">f&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="cm">/*实参*/&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="cm">/*实参*/&lt;/span> &lt;span class="p">).&lt;/span>&lt;span class="n">memberFunction&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="成员作用域和this指针">成员作用域和this指针
&lt;/h4>&lt;p>The data members are accessible to all constructors and functions in the class. (数据成员可被类内所有函数访问)&lt;/p>
&lt;p>Data fields and functions can be declared in any order in a class. (数据域与函数可按任意顺序声明)&lt;/p>
&lt;p>If a local variable has the same name as a data field: (若成员函数中的局部变量与某数据域同名)&lt;/p>
&lt;p>(1) the local variable takes precedence ( 局部变量优先级高：就近原则)&lt;/p>
&lt;p>(2) the data field with the same name is hidden. ( 同名数据域在函数中被屏蔽)&lt;/p>
&lt;p>How do you reference a class’s hidden data field in a function? (如何在函数内访问类中被屏蔽的数据域)？ 可以使用 this 关键字&lt;/p>
&lt;p>This 关键字的特性&lt;/p>
&lt;p>(1) a special built-in pointer ( 特殊的内建指针)&lt;/p>
&lt;p>(2) references to the calling object. ( &lt;strong>引用当前函数的调用对象&lt;/strong>)&lt;/p>
&lt;h4 id="default-member-initializers">Default Member Initializers
&lt;/h4>&lt;p>就地初始化&lt;/p>
&lt;p>In C++03, only static const members of integral types could be initialized in-class (在C++03标准中，只有静态常量整型成员才能在类中就地初始化)&lt;/p>
&lt;p>C++11 was to allow a non-static data member to be initialized where it is declared in its class (C++11标准中，非静态成员可以在它声明的时候初始化)&lt;/p>
&lt;p>数组必须声明长度&lt;/p>
&lt;h4 id="constructor-initializer-lists">Constructor Initializer Lists
&lt;/h4>&lt;p>构造函数初始化列表&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="err">在构造函数中用初始化列表初始化数据域&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">ClassName&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">parameterList&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">:&lt;/span> &lt;span class="n">dataField1&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">value1&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="n">dataField2&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">value2&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Something to do
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A data field is an object type (Object in Object / Embedded Object) (类的数据域是一个对象类型，被称为对象中的对象，或者内嵌对象)&lt;/p>
&lt;p>The embedded object must be constructed before the body of ctor is executed (内嵌对象必须在被嵌对象的构造函数体执行前就构造完成)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Time&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="cm">/* Code omitted */&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Action&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Action&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">hour&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">minute&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">second&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Time&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hour&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">minute&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">second&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//time对象应该在构造函数体之前构造完成
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Time&lt;/span> &lt;span class="n">time&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Action&lt;/span> &lt;span class="nf">a&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">11&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">59&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">30&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If object type members/embedded objects are not initialized explicitly (若对象类型成员/内嵌对象成员没有被显式初始化)&lt;/p>
&lt;p>(1) the default constructor of the embedded object is automatically invoked. ( 该内嵌对象的无参构造函数会被自动调用)&lt;/p>
&lt;p>(2) If a default constructor of the embedded object does not exist, a compilation error will be reported. ( 若内嵌对象没有无参构造函数，则编译器报错)&lt;/p>
&lt;h4 id="order-of-member-initialization">Order of Member Initialization
&lt;/h4>&lt;p>Default Member Initialization (就地初始化)&lt;/p>
&lt;p>Constructor Initialization List (构造函数初始化列表)&lt;/p>
&lt;p>Assign Values to the members in Ctor Body (在构造函数体中为成员赋值)。注意，这个不是初始化，而是赋值。&lt;/p>
&lt;p>执行次序： 就地初始化 &amp;gt; Ctor 初始化列表 &amp;gt; 在Ctor 函数体中为成员赋值&lt;/p>
&lt;p>哪个起作用（初始化/赋值优先级）： 在Ctor 函数体中为成员赋值 &amp;gt; Ctor 初始化列表 &amp;gt; 就地初始化&lt;/p>
&lt;h4 id="delegation-constructor">Delegation Constructor
&lt;/h4>&lt;p>代理构造：One ctor can call another ctor (一个构造函数可以调用另外的构造函数)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">A&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">){}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">A&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">){}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">A&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">num1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">num2&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">average&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num1&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">num2&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">num1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">num2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">average&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面例子中，构造函数的调用次序:&lt;/p>
&lt;p>A() &amp;gt; A(int) &amp;gt; A(int, int)&lt;/p>
&lt;h4 id="static-members">Static Members
&lt;/h4>&lt;ul>
&lt;li>
&lt;p>&lt;strong>声明&lt;/strong>：Inside a class definition, &amp;ldquo;static&amp;rdquo; declares members that are not bound to class instances
在类定义中，关键字 static 声明不绑定到类实例的成员( 该成员无需创建对象即可访问)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>定义&lt;/strong>：&lt;/p>
&lt;p>(1) 声明为“constexpr”类型的静态数据成员必须 在类中声明 并初始化。自C++17 起，可不在类外定义&lt;/p>
&lt;p>(2) 声明为“inline”(C++17 起) 或者 “const int” 类型的静态数据成员可以 在类中声明 并初始化；&lt;/p>
&lt;p>(3) 其它须在类外定义并初始化，且不带static 关键字&lt;/p>
&lt;p>静态数据成员的定义规则复杂，在类外定义，大部分情况下不会出错&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>静态数据成员具有静态存储期(static storage duration)或者C++11线程存储期特性&lt;/p>
&lt;p>(1) Only one instance of the object exists ( 只存在对象的一个实例)&lt;/p>
&lt;p>(2) 静态存储器对象未明确初始化时会被自动“零初始化(Zero-Initialization)”&lt;/p>
&lt;h4 id="accessibility">Accessibility
&lt;/h4>&lt;ul>
&lt;li>
&lt;p>private&lt;/p>
&lt;p>Private members can only be accessed from the inside of the class (私有成员只能在类内的函数访问)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>protected: A protected data field or a protected function in a base class can be accessed by name in its derived classes (保护属性的数据或函数可被派生类成员访问)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>public: Public members can be accessed from any other classes. (公有成员可被任何其他类访问)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h6 id="与继承结合">与继承结合
&lt;/h6>&lt;ul>
&lt;li>
&lt;p>公有继承&lt;/p>
&lt;p>(1) 基类成员 在派生类中的访问属性不变。&lt;/p>
&lt;p>(2) 派生类的成员函数 可以访问基类的&lt;strong>公有&lt;/strong>成员和&lt;strong>保护&lt;/strong>成员，不能访问基类的私有成员;&lt;/p>
&lt;p>(3) 派生类以外的其它函数 可以通过派生类的对象，访问从基类继承的&lt;strong>公有&lt;/strong>成员, 但不能访问从基类继承的保护成员和私有成员。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>保护继承&lt;/p>
&lt;p>) 基类成员 公有成员和保护成员变成protected，私有成员不变。&lt;/p>
&lt;p>(2) 派生类的成员函数 可以访问基类的&lt;strong>公有&lt;/strong>成员和&lt;strong>保护&lt;/strong>成员，不能访问基类的私有成员;&lt;/p>
&lt;p>(3) 派生类以外的其它函数 不能通过派生类的对象，访问从基类继承的任何成员。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>私有继承&lt;/p>
&lt;p>(1) 基类成员 在派生类中都变成 private。&lt;/p>
&lt;p>(2) 派生类的成员函数 可以访问基类的&lt;strong>公有&lt;/strong>成员和&lt;strong>保护&lt;/strong>成员，不能访问基类的私有成员;&lt;/p>
&lt;p>(3) 派生类以外的其它函数 不能通过派生类的对象，访问从基类继承的任何成员。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="abstract-class">Abstract Class
&lt;/h4>&lt;p>Sometimes a base class is so abstract that it cannot have any specific instances. Such a class is referred to as an abstract class (类太抽象以至于无法实例化就叫做抽象类)&lt;/p>
&lt;p>the class which contains abstract functions (包含抽象函数的类被称为抽象类)&lt;/p>
&lt;p>&lt;strong>Abstract Functions / Pure Virtual Function (抽象函数/纯虚函数)&lt;/strong>&lt;/p>
&lt;p>抽象函数(abstract functions)要求子类实现它&lt;/p>
&lt;p>virtual double getArea() = 0;&lt;/p>
&lt;h4 id="dynamic-cast">Dynamic Cast
&lt;/h4>&lt;p>动态类型转换&lt;/p>
&lt;p>dynamic_cast 运算符&lt;/p>
&lt;p>(1) 沿继承层级向上、向下及侧向转换到类的指针和引用&lt;/p>
&lt;p>(2) 转指针：失败返回nullptr&lt;/p>
&lt;p>(3) 转引用：失败抛异常&lt;/p>
&lt;h4 id="typeid">typeid
&lt;/h4>&lt;p>typeid operator (typeid运算符)&lt;/p>
&lt;p>typeid is used to obtain the information about the class of the object (typeid用于获取对象所属的类的信息)&lt;/p>
&lt;p>(1) typeid returns a reference to an object of class type_info. (typeid运算符返回一个type_info对象的引用)&lt;/p>
&lt;p>(2) typeid(AType).name() 返回实现定义的，含有类型名称的C风格字符串(char *)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;typeinfo&amp;gt;&lt;/span>&lt;span class="cp"> &lt;/span>&lt;span class="c1">//使用typeid，需要包含此头文件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">A&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ……
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">t1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">typeid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">typeid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">t1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;a has type &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">t1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="继承">继承
&lt;/h2>&lt;p>C++11引入&lt;em>final&lt;/em>特殊标识符，可以使得类不能被继承&lt;/p>
&lt;p>C++11:派生类&lt;strong>不继承&lt;/strong>的特殊函数&lt;/p>
&lt;p>(1) 析构函数&lt;/p>
&lt;p>(2) 友元函数&lt;/p>
&lt;p>继承基类构造函数&lt;/p>
&lt;p>(1) using A::A; 继承所有基类ctor&lt;/p>
&lt;p>(2) 不能仅继承指定的某个基类ctor&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">A&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// 等价于 class A { public:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">A&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">B&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">A&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// C++11
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">using&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 继承基类所有构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">};&lt;/span> &lt;span class="c1">// 就地初始化
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">B&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 调A(int i)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="constructor-chaining-构造函数链">constructor chaining (构造函数链)
&lt;/h4>&lt;p>Constructing an instance of a class invokes all the base class along the inheritance chain. (构造类实例会沿着继承链调用所有的基类ctor)&lt;/p>
&lt;p>调用次序: base first, derive next (父先子后)&lt;/p>
&lt;h4 id="destructor-chaining-析构函数链">destructor chaining (析构函数链)
&lt;/h4>&lt;p>Conversely, the destructors are automatically invoked in reverse order(dtor与ctor正好相反)&lt;/p>
&lt;p>调用次序: derive first, base next (子先父后)&lt;/p>
&lt;h4 id="name-hiding-in-inheritance">Name Hiding in Inheritance
&lt;/h4>&lt;p>继承中的名字隐藏&lt;/p>
&lt;p>Names in inner scopes hide names in outer scopes. (内部作用域的名字隐藏外部作用域的(同名)名字)&lt;/p>
&lt;p>(1) The derived class acts as an inner scope (派生类视作内部作用域)&lt;/p>
&lt;p>(2) The base class as an outer scope(基类视作外部作用域)&lt;/p>
&lt;p>why?&lt;/p>
&lt;p>(1) To avoid certain potentially dangerous behavior (避免某些潜在的危险行为)&lt;/p>
&lt;p>(2) Each class starts with a &amp;ldquo;clean sheet&amp;rdquo; with respect to each method name it declares (每个类在创建时，它的函数名都是写在一张干净的白纸上面，不会被基类函数名干扰)&lt;/p>
&lt;p>&lt;strong>using-declaration&lt;/strong> : introduce base class members into derived class definitions (using 声明语句可以将基类成员引入到派生类定义中)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">P&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">C&lt;/span> &lt;span class="o">:&lt;/span>&lt;span class="k">public&lt;/span> &lt;span class="n">P&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">using&lt;/span> &lt;span class="n">P&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//此处不带小括号
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">C&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">c&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="多态">多态
&lt;/h2>&lt;p>截止目前：多态性有两种表现的方式&lt;/p>
&lt;ul>
&lt;li>重载多态&lt;/li>
&lt;li>子类型多态：不同的对象调用同名重定义函数，表现出不同的行为&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>联编(Binding):&lt;/strong> 确定具有多态性的语句调用哪个函数的过程&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Static Binding (静态联编)&lt;/p>
&lt;p>在程序编译时(Compile-time)确定调用哪个函数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Dynamic Binding (动态联编)&lt;/p>
&lt;p>在程序运行时(Run-time)，才能够确定调用哪个函数&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="run-time-polymorphism">Run-time Polymorphism
&lt;/h4>&lt;p>用动态联编实现的多态，也称为运行时多态(Run-time Polymorphism)。&lt;/p>
&lt;p>实现运行时多态有两个要素：&lt;/p>
&lt;p>(1) virtual function (虚函数)&lt;/p>
&lt;p>(2) Override (覆写) : redefining a virtual function in a derived class. (在派生类中重定义一个虚函数)&lt;/p>
&lt;p>&lt;strong>同名虚函数的调用&lt;/strong>&lt;/p>
&lt;p>(1) 不由指针类型决定；&lt;/p>
&lt;p>(2) 而由指针所指的【实际对象】的类型决定&lt;/p>
&lt;p>(3) 运行时，检查指针所指对象类型&lt;/p>
&lt;p>&lt;strong>用途&lt;/strong>：可以用父类指针访问子类对象成员&lt;/p>
&lt;p>If a function is defined virtual in a base class, it is automatically virtual in all its derived classes. (基类定义了虚同名函数，那么派生类中的同名函数自动变为虚函数)&lt;/p>
&lt;p>类中保存着一个Virtual function table (虚函数表)&lt;/p>
&lt;p>Run-time binding (运行时联编/动态联编)&lt;/p>
&lt;p>More overhead in run-time than non-virtual function (比非虚函数开销大)&lt;/p>
&lt;p>基类与派生类中有同名函数&lt;/p>
&lt;p>(1) 通过派生类对象访问同名函数，是静态联编&lt;/p>
&lt;p>(2) 通过基类对象的指针访问同名函数，是静态联编&lt;/p>
&lt;p>(3) 通过基类对象的指针或引用访问同名虚函数，是动态联编&lt;/p>
&lt;h4 id="override-and-final">override and final
&lt;/h4>&lt;p>C++11引入override标识符，指定一个虚函数覆写另一个虚函数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">foo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">bar&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">B&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">A&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">foo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// 错误： B::foo 不覆写 A::foo
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="c1">// （签名不匹配）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// OK ： B::foo 覆写 A::foo
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">bar&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{}&lt;/span> &lt;span class="c1">// 错误： A::bar 非虚
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">B&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="c1">// 错误： override只能放到类内使用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>C++11引入final特殊标识符，指定派生类不能覆写虚函数&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">A&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">Base&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">final&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// A::foo 被覆写且是最终覆写
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">bar&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">final&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 错误：非虚函数不能被覆写或是 final
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">B&lt;/span> &lt;span class="k">final&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">A&lt;/span> &lt;span class="c1">// struct B 为 final，不能被继承
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">override&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 错误： foo 不能被覆写，因为它在 A 中是 final
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>struct可与class互换；差别在于struct的默认访问属性是public&lt;/p>
&lt;h2 id="structured-binding-declarationc17">Structured Binding Declaration（c++17）
&lt;/h2>&lt;p>结构化绑定声明&lt;/p>
&lt;h4 id="for-array">for Array
&lt;/h4>&lt;ol>
&lt;li>
&lt;p>cv-auto &amp;amp;/&amp;amp;&amp;amp;(可选) [标识符列表] = 表达式;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>cv-auto &amp;amp;/&amp;amp;&amp;amp;(可选) [标识符列表] { 表达式 };&lt;/p>
&lt;/li>
&lt;li>
&lt;p>cv-auto &amp;amp;/&amp;amp;&amp;amp;(可选) [标识符列表] ( 表达式 );&lt;/p>
&lt;p>cv-auto: 可能由const/volatile修饰的auto关键字&lt;/p>
&lt;p>&amp;amp;/&amp;amp;&amp;amp; 左值引用或者右值引用&lt;/p>
&lt;p>标识符列表：逗号分隔的标识符&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">priArr&lt;/span> &lt;span class="p">[]&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">42&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">21&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ai/bi/ci 的基本类型都是int，只是cv标识或引用标识不同
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">a1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">priArr&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// a1 是 priArr[0] 的拷贝，a2, a3类推
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">b1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">priArr&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// b1 是 priArr[0] 的只读拷贝，b2, b3类推
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">c1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">priArr&lt;/span>&lt;span class="p">};&lt;/span> &lt;span class="c1">// c1 是 priArr[0] 的引用，c2, c3类推
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">c3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">14&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// priArr[2]的值变为14
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">array&lt;/span> &lt;span class="n">stdArr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="sc">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="sc">&amp;#39;b&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="sc">&amp;#39;c&amp;#39;&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">d1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">d2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">d3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">stdArr&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="for-object-member">for Object member
&lt;/h4>&lt;p>若初始化表达式为类/结构体类型，则标识符列表中的名字绑定到类/结构体的非静态数据成员上&lt;/p>
&lt;ol>
&lt;li>
&lt;pre>&lt;code> 数据成员必须为公有成员
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;pre>&lt;code> 标识符数量必须等于数据成员的数量
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;pre>&lt;code> 标识符类型与数据成员类型一致
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ol>
&lt;h2 id="string-literals">String Literals
&lt;/h2>&lt;h4 id="c11-raw-string-literals">C++11 Raw String Literals
&lt;/h4>&lt;p>R &amp;ldquo;&lt;em>delimiter( raw_characters )delimiter&lt;/em>&amp;rdquo;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">s3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">R&lt;/span>&lt;span class="s">&amp;#34;NoUse(Hello &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">World&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">NoUse&lt;/span>&lt;span class="s">&amp;#34;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">s1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">R&lt;/span>&lt;span class="s">&amp;#34;(Hello&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">World&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="s">&amp;#34;;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="c14-string-literals">C++14: String Literals
&lt;/h4>&lt;p>C++14将运算符 &amp;ldquo;&amp;ldquo;s 进行了重载，赋予了它新的含义，使得用这种运算符括起来的字符串字面量，自动变成了一个 std::string 类型的对象。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">auto&lt;/span> &lt;span class="n">hello&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Hello!&amp;#34;&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// hello is of std::string type
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">auto&lt;/span> &lt;span class="n">hello&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;Hello!&amp;#34;&lt;/span>&lt;span class="p">};&lt;/span> &lt;span class="c1">// equals to the above
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">auto&lt;/span> &lt;span class="n">hello&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Hello!&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// hello is of const char* type
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="array类">array类
&lt;/h2>&lt;h4 id="c-style-array-c-raw-array也叫做c原生数组">C Style Array (C++ raw array，也叫做C++原生数组)
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>arr 可能会退化为指针：void f(int a[]) { std::cout &amp;laquo; sizeof(a)/sizeof(a[0]); }&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>
&lt;p>arr 不知道自己的大小： sizeof(arr)/sizeof(arr[0])&lt;/p>
&lt;/li>
&lt;li>
&lt;p>两个数组之间无法直接赋值: array1 = array2;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不能自动推导类型：auto a1[] = {1,2,3};&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="c-style-array">C++ Style Array
&lt;/h4>&lt;ul>
&lt;li>
&lt;p>是一个容器类，所以有迭代器（可以认为是一种用于访问成员的高级指针）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可直接赋值&lt;/p>
&lt;/li>
&lt;li>
&lt;p>知道自己大小：size()&lt;/p>
&lt;/li>
&lt;li>
&lt;p>能和另一个数组交换内容：swap()&lt;/p>
&lt;/li>
&lt;li>
&lt;p>能以指定值填充自己: fill()&lt;/p>
&lt;/li>
&lt;li>
&lt;p>取某个位置的元素( 做越界检查) ：at()&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>C++数组类是一个模板类，可以容纳任何类型的数据&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;array&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span> &lt;span class="err">数组&lt;/span> &lt;span class="err">类型&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">数组大小&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="err">数组名字&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span> &lt;span class="err">数组&lt;/span> &lt;span class="err">类型&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">数组大小&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="err">数组&lt;/span> &lt;span class="err">名字&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="err">值&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">值&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">…&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>限制与C风格数组相同&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="sc">&amp;#39;H&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="sc">&amp;#39;e&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="sc">&amp;#39;l&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="sc">&amp;#39;l&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="sc">&amp;#39;o&amp;#39;&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>C++17 Type Deduction for std::array (std::array的类型推导)&lt;/p>
&lt;p>C++17引入了一种新特性，对类模板的参数进行推导&lt;/p>
&lt;p>示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">array&lt;/span> &lt;span class="n">a1&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">};&lt;/span> &lt;span class="c1">// 推导出 std::array&amp;lt;int, 3&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">array&lt;/span> &lt;span class="n">a2&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="sc">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;b&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;c&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;d&amp;#39;&lt;/span>&lt;span class="p">};&lt;/span> &lt;span class="c1">// 推导出 std::array&amp;lt;char, 4&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="constant-expressions">Constant Expressions
&lt;/h2>&lt;p>Constant expression is an expression that can be evaluated at compile time. (常量表达式是编译期可以计算值的一个表达式)&lt;/p>
&lt;p>// 例如：C++ 数组的大小要求是编译期的一个常量（原生数组以及std::array）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">n&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">a1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// error: n is not a constant expression
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">cn&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cn&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">a2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// OK: cn is a constant expression
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>const 修饰的对象未必是编译期常量&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">rcn&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// rcn is runtime constant, compiler does
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// NOT know its value at compile-time
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">rcn&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// error: rcn is read-only
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="n">rcn&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">a3&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// error: rcn is NOT known at compile-time
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>C++11 constexpr: 编译期常量表达式说明符&lt;/strong>&lt;/p>
&lt;p>constexpr specifier declares that it is possible to evaluate the value of the function or variable at compile time. (constexpr说明符声明可在编译时计算函数或变量的值)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">constexpr&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// c++11 引入 constexpr
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// c++14才允许constexpr函数中有分支循环等
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">rcm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// rcm是运行期常量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">cm&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 编译期常量，等价于: constexpr int cm = 4;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">a1&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="n">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="n">rcm&lt;/span>&lt;span class="p">)];&lt;/span> &lt;span class="c1">// 错误：m &amp;amp; rcm 不是编译期常量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="n">max&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cm&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">a2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// OK: cm 和 5 是编译期常量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>const vs constexpr&lt;/strong>&lt;/p>
&lt;p>&lt;strong>const&lt;/strong> ： 告知程序员，const 修饰的内容是不会被修改的。主要目的是帮程序员避免bug 。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">s1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// C语言允许，但C++编译出错
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">*&lt;/span>&lt;span class="n">s1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="err">’&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// C语言中，语法正确，但运行时会出错
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">s2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;World&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// C++ 要求加const
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">*&lt;/span>&lt;span class="n">s2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sc">&amp;#39;w&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// C++编译器报错
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>constexpr&lt;/strong> ：用在所有被要求使用“constant expression”的地方（就是constexpr 修饰的东西可以在编译期计算得到值），主要目的是让编译器能够&lt;strong>优化代码提升性能&lt;/strong> 。&lt;/p>
&lt;h2 id="assert">assert
&lt;/h2>&lt;p>assert:为c语言的宏（Macro）&lt;/p>
&lt;p>用法：&lt;/p>
&lt;p>包含头文件 &lt;cassert> 以调试模式编译程序&lt;/p>
&lt;p>assert( bool_expr ); // bool_expr 为假则中断程序&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">array&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">//C++17 类型参数推导
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//断言：i必须小于3，否则失败
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="assert依赖于ndebug-宏">assert()依赖于NDEBUG 宏
&lt;/h4>&lt;p>NDEBUG这个宏是C/C++标准规定的，所有编译器都有对它的支持。&lt;/p>
&lt;p>(1) 调试(Debug)模式编译时，编译器不会定义NDEBUG，所以assert()宏起作用。&lt;/p>
&lt;p>(2) 发行(Release)模式编译时，编译器自动定义宏NDEBUG，使assert不起作用&lt;/p>
&lt;p>如果要强制使得assert()生效或者使得assert()不生效，只要手动 #define NDEBUG 或者 #undef NDEBUG即可。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#undef NDEBUG &lt;/span>&lt;span class="c1">// 强制以debug模式使用&amp;lt;cassert&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Enter an int: &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cin&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">assert&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="s">&amp;#34;i must be positive&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="static_assertc11静态断言">static_assert(C++11静态断言)
&lt;/h4>&lt;p>static_assert ( bool_constexpr, message)&lt;/p>
&lt;p>(1) bool_constexpr: &lt;strong>编译期常量表达式&lt;/strong>，可转换为bool 类型，不可出现变量表达式&lt;/p>
&lt;p>(2) message: 字符串字面量 ，是断言失败时显示的警告信息。自C++17起，message是可选的&lt;/p>
&lt;h2 id="声明与定义">声明与定义
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>A declaration introduces an identifier and describes its type, be it a type, object, or function. A declaration is what the &lt;strong>compiler&lt;/strong> needs to accept references to that identifier. (“声明”是引入标识符并描述其类型，无论是类型，对象还是函数。&lt;strong>编译器&lt;/strong>需要该“声明”，以便识别在它处使用该标识符。)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">extern&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">bar&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">extern&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">g&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">double&lt;/span> &lt;span class="nf">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// extern can be omitted for function declarations
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">foo&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// no extern allowed for type declarations
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>A definition actually instantiates/implements this identifier. It&amp;rsquo;s what the &lt;strong>linker&lt;/strong> needs in order to link references to those entities (“定义”实例化/实现这个标识符。&lt;strong>链接器&lt;/strong>需要“定义”，以便将对标识符的引用链接到标识符所表示的实体)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">bar&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">g&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">lhs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">rhs&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="n">lhs&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">rhs&lt;/span>&lt;span class="p">;}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">double&lt;/span> &lt;span class="nf">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">d&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="p">;}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">foo&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>区别&lt;/strong>&lt;/p>
&lt;p>（1） A definition can be used in the place of a declaration ( 定义有时可取代声明，反之则不行)&lt;/p>
&lt;p>（2） An identifier can be declared more than once, but can be defined only once ( 标识符可被声明多次，但只能定义一次&lt;/p>
&lt;p>（3） 定义通常伴随着编译器为标识符分配内存&lt;/p>
&lt;p>&lt;strong>总结&lt;/strong>&lt;/p>
&lt;p>(1) Declaration: &amp;ldquo;Somewhere, there exists a foo.&amp;rdquo; ( 声明：某个地方有个foo)&lt;/p>
&lt;p>(2) Definition: &amp;ldquo;&amp;hellip;and here it is!&amp;rdquo; ( 定义：它在这儿，长成这样)&lt;/p>
&lt;h2 id="实现与声明分离seperating-declaration-from-implementation">实现与声明分离（Seperating Declaration from Implementation）
&lt;/h2>&lt;p>C++ allows you to separate class declaration from implementation. (C++中，类声明与实现可以分离)&lt;/p>
&lt;p>(1) .h: 类声明，描述类的结构&lt;/p>
&lt;p>(2) .cpp: 类实现，描述类方法的实现&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">FunctionType&lt;/span> &lt;span class="n">ClassName&lt;/span> &lt;span class="o">::&lt;/span> &lt;span class="n">FunctionName&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Arguments&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">//… }
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中，:: 这个运算符被称为binary scope resolution operator（二元作用域解析运算符），简称“域分隔符”&lt;/p>
&lt;p>When a function is implemented inside a class declaration, it automatically becomes an inline function. (当函数在类声明中实现，它自动成为内联函数)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">A&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">default&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//C++11
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="nf">f1&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// f1自动称为内联函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// do something
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="nf">f2&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">double&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">f2&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// f2不是内联函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//do something
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">A&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">default&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//C++11
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="nf">f1&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="nf">f2&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">double&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">f2&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//do something
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">inline&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">f1&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// f1是内联函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//do something
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="避免头文件被多次包含">避免头文件被多次包含
&lt;/h2>&lt;ul>
&lt;li>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#ifndef MY_HEADER_FILE_H
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define MY_HEADER_FILE_H
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="c1">//CONTENT
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#pragma once &lt;/span>&lt;span class="c1">//c++03,c90
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">_Pragma&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;once&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="c1">//c++11,c99
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>实际上为运算符&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="文件系统">文件系统
&lt;/h2>&lt;p>About std::filesystem(std::filesystem简介)&lt;/p>
&lt;p>C++17 std::filesystem provides facilities for performing operations on file systems and their components, such as paths, regular files, and directories。（标准库的filesystem提供在文件系统与其组件，例如路径、常规文件与目录上进行操作的方法）&lt;/p>
&lt;ul>
&lt;li>
&lt;p>File(文件)：持有数据的文件系统对象，能被写入或读取。文件有名称和属性，属性之一是文件类型&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Path(路径)：标识文件所处位置的一系列元素，可能包含文件名&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">namespace&lt;/span> &lt;span class="n">fs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">filesystem&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">fs&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">path&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="s">&amp;#34;CheckPath.cpp&amp;#34;&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>Absolute Path (platform dependent) (绝对路径)：An absolute path contains a file name with its complete path and drive letter.(包含完整的路径和驱动器符号)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Relative Path (相对路径)&lt;/p>
&lt;p>Contains NO drive letter or leading &amp;ldquo;/&amp;rdquo; (不包含驱动器及开头的/符号)&lt;/p>
&lt;p>The file stores in the path Relative to &amp;ldquo;Current Path&amp;rdquo; (文件存在相对于“当前路径”的位置)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>OS Type&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Absolute path&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Directory path&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Windows(case insensitive)&lt;/td>
&lt;td>&lt;strong>c:\example\scores.txt&lt;/strong>&lt;/td>
&lt;td>c:\example&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unix/Linux(case sensitive)&lt;/td>
&lt;td>&lt;strong>/home/cyd/scores.txt&lt;/strong>&lt;/td>
&lt;td>/home/cyd&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ol start="3">
&lt;li>Differences between Windows and Linux(两种操作系统的不同)&lt;/li>
&lt;/ol>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;strong>Windows&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Linux&lt;/strong>&lt;/th>
&lt;th>&lt;strong>C++&lt;/strong>&lt;/th>
&lt;th>&lt;strong>java&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>行结束字符&lt;/td>
&lt;td>\r\n&lt;/td>
&lt;td>\n&lt;/td>
&lt;td>-&lt;/td>
&lt;td>System.getProperty(&amp;ldquo;line.separator&amp;rdquo;);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>路径名分隔符&lt;/td>
&lt;td>&amp;lsquo;\&amp;rsquo;&lt;/td>
&lt;td>&amp;lsquo;/&amp;rsquo;&lt;/td>
&lt;td>std::filesystem::path::preferred_separator&lt;/td>
&lt;td>java.io.File.separator&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>路径名&lt;/td>
&lt;td>a:\b\c 或\host\b\c&lt;/td>
&lt;td>/a/b/c&lt;/td>
&lt;td>std::filesystem::path&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// The directory separator for Windows is a backslash (\), which needs special treat
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">namespace&lt;/span> &lt;span class="n">fs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">filesystem&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">fs&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">path&lt;/span> &lt;span class="n">p1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;d:&lt;/span>&lt;span class="se">\\&lt;/span>&lt;span class="s">cpp&lt;/span>&lt;span class="se">\\&lt;/span>&lt;span class="s">hi.txt&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 字符串中的反斜杠要被转义
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">fs&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">path&lt;/span> &lt;span class="n">p2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;d:/cpp/hi.txt&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// Windows也支持正斜杠
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">fs&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">path&lt;/span> &lt;span class="n">p3&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">R&lt;/span>&lt;span class="s">&amp;#34;(d:\cpp\hi.txt)&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="c1">// 使用原始字符串字面量
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="path类">Path类
&lt;/h4>&lt;ul>
&lt;li>
&lt;p>Members functions of path class(path类的成员函数)&lt;/p>
&lt;p>&lt;strong>构造&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>path(string)&lt;/p>
&lt;p>构造函数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>assign(string): path&amp;amp;&lt;/p>
&lt;p>为路径对象赋值&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>连接&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>append(type p): path&amp;amp;&lt;/p>
&lt;p>将p追加到路径后。type是string、path或const char*。等价于 /= 运算符；自动添加目录分隔符&lt;/p>
&lt;/li>
&lt;li>
&lt;p>concat(type p): path&amp;amp;&lt;/p>
&lt;p>将p追加到路径后。type是string、path或const char*。等价于+=运算符；不自动添加目录分隔符&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>修改器&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>clear(): void&lt;/p>
&lt;p>清空存储的路径名&lt;/p>
&lt;/li>
&lt;li>
&lt;p>remove_filename(): path&amp;amp;&lt;/p>
&lt;p>从给定的路径中移除文件名&lt;/p>
&lt;/li>
&lt;li>
&lt;p>replace_filename(const path&amp;amp; replacement): path&amp;amp;&lt;/p>
&lt;p>以 replacement 替换文件名&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>分解&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>root_name(): path&lt;/p>
&lt;p>返回通用格式路径的根名&lt;/p>
&lt;/li>
&lt;li>
&lt;p>root_directory(): path&lt;/p>
&lt;p>返回通用格式路径的根目录&lt;/p>
&lt;/li>
&lt;li>
&lt;p>root_path(): path&lt;/p>
&lt;p>返回路径的根路径，等价于 root_name() / root_directory()，即“路径的根名 / 路径的根目录”&lt;/p>
&lt;/li>
&lt;li>
&lt;p>relative_path(): path&lt;/p>
&lt;p>返回相对于 root-path 的路径&lt;/p>
&lt;/li>
&lt;li>
&lt;p>parent_path(): path&lt;/p>
&lt;p>返回到父目录的路径&lt;/p>
&lt;/li>
&lt;li>
&lt;p>filename(): path&lt;/p>
&lt;p>返回路径中包含的文件名&lt;/p>
&lt;/li>
&lt;li>
&lt;p>stem(): path&lt;/p>
&lt;p>返回路径中包含的文件名，不包括文件的扩展名&lt;/p>
&lt;/li>
&lt;li>
&lt;p>extension(): path&lt;/p>
&lt;p>返回路径中包含的文件名的扩展名&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>查询&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>empty(): bool&lt;/p>
&lt;p>检查路径是否为空&lt;/p>
&lt;/li>
&lt;li>
&lt;p>has_xxx(): bool&lt;/p>
&lt;p>其中“xxx”是上面“分解”类别中的函数名。这些函数检查路径是否含有相应路径元素&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Non-member functions (非成员函数)&lt;/p>
&lt;ul>
&lt;li>
&lt;p>operator/( const path&amp;amp; lhs, const path&amp;amp; rhs )&lt;/p>
&lt;p>以偏好目录分隔符连接二个路径成分 lhs 和 rhs。比如 path p{&amp;ldquo;C:&amp;rdquo;}; p = p / &amp;ldquo;Users&amp;rdquo; / &amp;ldquo;batman&amp;rdquo;;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>operator &amp;laquo;, &amp;raquo; (path p)&lt;/p>
&lt;p>进行路径 p 上的流输入或输出&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>文件类型&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>s_regular_file( const path&amp;amp; p ): bool&lt;/p>
&lt;p>检查路径是否是常规文件&lt;/p>
&lt;/li>
&lt;li>
&lt;p>is_directory( const path&amp;amp; p ): bool&lt;/p>
&lt;p>检查路径是否是目录&lt;/p>
&lt;/li>
&lt;li>
&lt;p>is_empty( const path&amp;amp; p ): bool&lt;/p>
&lt;p>检查给定路径是否指代一个空文件或目录&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>查询&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>current_path(): path&lt;/p>
&lt;p>返回当前工作目录的绝对路径（类似linux指令 pwd）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>current_path( const path&amp;amp; p ): void&lt;/p>
&lt;p>更改当前路径为p （类似linux指令 cd）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>file_size( const path&amp;amp; p ): uintmax_t&lt;/p>
&lt;p>对于常规文件 p ，返回其大小；尝试确定目录(以及其他非常规文件)的大小的结果是由编译器决定的&lt;/p>
&lt;/li>
&lt;li>
&lt;p>space(const path&amp;amp; p): space_info&lt;/p>
&lt;p>返回路径名 p 定位于其上的文件系统信息。space_info中有三个成员：capacity ——文件系统的总大小(字节)，free ——文件系统的空闲空间(字节)，available ——普通进程可用的空闲空间（小于或等于 free ）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>status(const path&amp;amp; p): file_status&lt;/p>
&lt;p>返回 p 所标识的文件系统对象的类型与属性。返回的file_status是一个类，其中包含文件的类型(type)和权限(permissions)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>修改&lt;/p>
&lt;ul>
&lt;li>
&lt;p>remove(const path&amp;amp; p): bool&lt;/p>
&lt;p>删除路径 p 所标识的文件或空目录&lt;/p>
&lt;/li>
&lt;li>
&lt;p>remove_all(const path&amp;amp; p): uintmax_t&lt;/p>
&lt;p>递归删除 p 的内容（若它是目录）及其子目录的内容，然后删除 p 自身，返回被删文件及目录数量&lt;/p>
&lt;/li>
&lt;li>
&lt;p>rename(const path&amp;amp; old_p,const path&amp;amp; new_p): void&lt;/p>
&lt;p>移动或重命名 old_p 所标识的文件系统对象到 new_p(类似linux指令mv)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>copy( const path&amp;amp; from, const path&amp;amp; to ): void&lt;/p>
&lt;p>复制文件与目录。另外一个函数 bool copy_file(from, to) 拷贝单个文件&lt;/p>
&lt;/li>
&lt;li>
&lt;p>create_directory( const path&amp;amp; p ): bool&lt;/p>
&lt;p>创建目录 p （父目录必须已经存在）,若 p 已经存在，则函数无操作&lt;/p>
&lt;/li>
&lt;li>
&lt;p>create_directories( const path&amp;amp; p ): bool&lt;/p>
&lt;p>创建目录 p （父目录不一定存在）,若 p 已经存在，则函数无操作&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="comparision-of-file-manipulation-between-c-and-c-文件操作对比">Comparision of File Manipulation between C and C++ (文件操作对比)
&lt;/h4>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;th>C++&lt;/th>
&lt;th>C&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;strong>file input&lt;/strong>&lt;/td>
&lt;td>ifstream &lt;em>(i: input; f:file)&lt;/em>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Header File (头文件)&lt;/strong>&lt;/td>
&lt;td>&lt;strong>file output&lt;/strong>&lt;/td>
&lt;td>ofstream &lt;em>(o: ouput; f:file)&lt;/em>&lt;/td>
&lt;td>stdio.h&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;strong>file input &amp;amp; output&lt;/strong>&lt;/td>
&lt;td>fstream&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;strong>read from file (读文件)&lt;/strong>&lt;/td>
&lt;td>&amp;raquo;;get(); get(char); get(char*);getline();read(char*,streamsize);&lt;/td>
&lt;td>fscanf();fgets(char*, size_t , FILE*);fread(void *&lt;em>ptr&lt;/em>, &lt;em>size&lt;/em>, &lt;em>nitems&lt;/em>, FILE *&lt;em>stream&lt;/em>);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Read/Write (读写操作)&lt;/strong>&lt;/td>
&lt;td>&lt;strong>write to file (写文件)&lt;/strong>&lt;/td>
&lt;td>&amp;laquo;;put(char), put(int);write (const char*, streamsize);flush()&lt;/td>
&lt;td>fprintf();fwrite(const void *&lt;em>ptr&lt;/em>, &lt;em>size&lt;/em>, &lt;em>nitems&lt;/em>, FILE &lt;em>&lt;em>stream&lt;/em>);fputs(const char&lt;/em>, FILE *);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;strong>Status test (状态测试)&lt;/strong>&lt;/td>
&lt;td>eof(); bad(); good(); fail()&lt;/td>
&lt;td>feof(); ferror();&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="hierarchy-of-c-io-stream-classesc-io流类层次">Hierarchy of C++ I/O Stream Classes(C++ I/O流类层次)
&lt;/h4>&lt;p>&lt;img src="https://edu-image.nosdn.127.net/8C0A3ED498876420B3B389880C16AB06.jpg?imageView&amp;amp;thumbnail=890x0&amp;amp;quality=100"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>C++的流类主要有五类：&lt;/p>
&lt;ol>
&lt;li>
&lt;pre>&lt;code> 流基类（ios_base和ios）
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;pre>&lt;code> 标准输入输出流类（istream/ostream/iostream）
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;pre>&lt;code> 字符串流类（istringstream/ostringstream）
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;pre>&lt;code> 文件流类（ifstream/ofstream/fstream）
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;pre>&lt;code> 缓冲区类（streambuf/stringbuf/filebuf）
&lt;/code>&lt;/pre>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>标准输入输出流对象 cin 和 cout 分别是类 istream 和 ostream 的实例&lt;/strong>&lt;/p>
&lt;h4 id="输出至文件">&lt;strong>输出至文件&lt;/strong>
&lt;/h4>&lt;p>&lt;img src="https://edu-image.nosdn.127.net/25E9455E1328577B96EF36ED9E09C3E7.jpg?imageView&amp;amp;thumbnail=890x0&amp;amp;quality=100"
loading="lazy"
alt="img"
>&lt;/p>
&lt;h4 id="自文件读入">自文件读入
&lt;/h4>&lt;p>&lt;img src="https://edu-image.nosdn.127.net/A08D7DA2B4D44442E89724B4256254CB.jpg?imageView&amp;amp;thumbnail=890x0&amp;amp;quality=100"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>To read data correctly, you need to know exactly how data is stored.(若想正确读出数据，必须确切了解数据的存储格式)&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Testing if a file is successfully opened (检测文件是否成功打开)&lt;/p>
&lt;ul>
&lt;li>Errors may occur (可能出现错误):
&lt;ul>
&lt;li>the file does not exist when reading a file (读文件时文件不存在)&lt;/li>
&lt;li>the media is ReadOnly when writing a file (e.g. write to a CD) (写文件时介质只读)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>To detect if a file is successfully opened: (检测文件是否正确打开的方法)&lt;/li>
&lt;/ul>
&lt;p>invoke fail() immediately after open(). (open()之后马上调用fail()函数), if fail() returns true, the file is not opened (does not exist). (fail()返回true, 文件未打开)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">ofstream&lt;/span> &lt;span class="nf">output&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;scores.txt&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">output&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">fail&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">R&lt;/span>&lt;span class="s">&amp;#34;(Can&amp;#39;t open file &amp;#34;&lt;/span>&lt;span class="n">scores&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">txt&lt;/span>&lt;span class="s">&amp;#34;!)&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>Testing End of File (检测是否已到文件末尾)&lt;/p>
&lt;p>Use eof() function to detect the end of file (用eof()函数检查是否是文件末尾)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">ifstream&lt;/span> &lt;span class="nf">in&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;scores.txt&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">in&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">eof&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">false&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="k">static_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">in&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="functions-for-io-stream">Functions for I/O stream
&lt;/h4>&lt;ul>
&lt;li>
&lt;p>getline()&lt;/p>
&lt;p>member function getline(char* buf, int size, char delimiter)&lt;/p>
&lt;p>non-member function std::getline(istream&amp;amp; is, string&amp;amp; str, char delimiter)&lt;/p>
&lt;p>When using (&amp;raquo;), data are delimited by whitespace. (&amp;raquo;运算符用空格分隔数据)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">constexpr&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">SIZE&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="mi">40&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="n">SIZE&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">eof&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="c1">// not end of file
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="n">SIZE&lt;/span> &lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;#&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">[&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">name2&lt;/span>&lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">eof&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">getline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">name2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;#&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>get() and put()&lt;/p>
&lt;p>Two other useful functions are get and put.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>get: read a character&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">istream&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">istream&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">get&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">is&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>put:write a character.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">ostream&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">put&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>flush()&lt;/p>
&lt;p>Flush output stream buffer (将输出流缓存中的数据写入目标文件)&lt;/p>
&lt;p>ostream&amp;amp; flush();&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">flush&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 其它输出流对象也可以调用 flush()
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Hello&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">flush&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 与endl类似作为manipulator的调用方式
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h4 id="格式化输出">格式化输出
&lt;/h4>&lt;ul>
&lt;li>
&lt;p>setw manipulator(“设置域宽”控制符)&lt;/p>
&lt;p>要包含头文件 &lt;iomanip>&lt;/p>
&lt;p>setw(n) 设置域宽，即数据所占的总字符数&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">setw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="sc">&amp;#39;a&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//_ _a
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>setw()控制符只对其后输出的第一个数据有效，其他控制符则对其后的所有输入输出产生影响。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">setw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="sc">&amp;#39;a&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="sc">&amp;#39;b&amp;#39;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//_ _ _ _ab
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>setw()的默认为setw(0)，按实际输出&lt;/p>
&lt;p>如果输出的数值占用的宽度超过setw(int n)设置的宽度，则按实际宽度输出。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>setprecision manipulator(“设置浮点精度”控制符)&lt;/p>
&lt;p>setprecision(int n)&lt;/p>
&lt;p>(1) 控制显示浮点数的有效位&lt;/p>
&lt;p>(2) n代表数字总位数&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iomanip&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">f&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">17&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mf">7.0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">f&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">setprecision&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">f&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">setprecision&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">f&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">setprecision&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">f&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">setprecision&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">f&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">setprecision&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">f&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">setprecision&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">f&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>setfill manipulator(“设置填充字符”控制符)&lt;/p>
&lt;p>setfill(c)&lt;/p>
&lt;p>设置填充字符，即“&amp;laquo;&amp;ldquo;符号后面的数据长度小于域宽时，使用什么字符进行填充&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">setfill&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sc">&amp;#39;*&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">setw&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="sc">&amp;#39;a&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//****a
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>控制符&lt;/strong>&lt;/th>
&lt;th>&lt;strong>用途&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>setw(width)&lt;/td>
&lt;td>设置输出字段的宽度(仅对其后第一个输出有效)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>setprecision(n)&lt;/td>
&lt;td>设置浮点数的输/入出精度(总有效数字个数等于n)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>fixed&lt;/td>
&lt;td>将浮点数以定点数形式输入/出(小数点后有效数字个数等于setprecision指定的n)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>showpoint&lt;/td>
&lt;td>将浮点数以带小数点和结尾0的形式输入/出，即便该浮点数没有小数部分&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>left&lt;/td>
&lt;td>输出内容左对齐&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>right&lt;/td>
&lt;td>输出内容右对齐&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>hexfloat/defaultfloat&lt;/td>
&lt;td>C++11新增；前者以定点科学记数法的形式输出十六进制浮点数，后者还原默认浮点格式&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>get_money(money)put_money(money)&lt;/td>
&lt;td>C++11新增；从流中读取货币值，或者将货币值输出到流。支持不同语言和地区的货币格式https://en.cppreference.com/w/cpp/io/manip/get_moneyhttps://en.cppreference.com/w/cpp/io/manip/put_money&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>get_time(tm, format)put_time(tm,format)&lt;/td>
&lt;td>C++11新增；从流中读取日期时间值，或者将日期时间值输出到流。https://en.cppreference.com/w/cpp/io/manip/get_timehttps://en.cppreference.com/w/cpp/io/manip/put_time&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>The stream manipulator also works to format output to a file(流控制符同样可以用于文件输入/输出)&lt;/p>
&lt;h4 id="file-open-mode">File Open Mode
&lt;/h4>&lt;p>When opening an &lt;em>fstream&lt;/em> object, a &amp;ldquo;file open mode&amp;rdquo; should be specified(创建fstream对象时，应指定文件打开模式)。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>Mode(模式)&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Description(描述)&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>ios::in&lt;/td>
&lt;td>打开文件读数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ios::out&lt;/td>
&lt;td>打开文件写数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ios::app&lt;/td>
&lt;td>把输出追加到文件末尾。app = append&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ios::ate&lt;/td>
&lt;td>打开文件，把文件光标移到末尾。ate = at end&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ios::trunc&lt;/td>
&lt;td>若文件存在则舍弃其内容。这是ios::out的默认行为。trunc = truncate&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ios::binary&lt;/td>
&lt;td>打开文件以二进制模式读写&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">fstream&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">ios&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">app&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">ios&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">binary&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h6 id="open-mode">Open Mode
&lt;/h6>&lt;p>Combine several modes (几种模式可以组合在一起)&lt;/p>
&lt;p>using the | operator (bitwise inclusive OR) (用“位或”运算符)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// std::ios_base::openmode 被ios继承
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="cm">/*implementation defined*/&lt;/span> &lt;span class="n">openmode&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="k">constexpr&lt;/span> &lt;span class="n">openmode&lt;/span> &lt;span class="n">app&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="cm">/*implementation defined*/&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="binary-io">Binary IO
&lt;/h4>&lt;p>TEXT file vs BINARY file (not technically precise) (文本文件与二进制文件)&lt;/p>
&lt;p>(1) Both stores as a sequence of bits (in binary format) (都按二进制格式存储比特序列)&lt;/p>
&lt;p>(2) text file : interpreted as a sequence of characters (解释为一系列字符)&lt;/p>
&lt;p>(3) binary file : interpreted as a sequence of bits. (解释为一系列比特)&lt;/p>
&lt;p>Text I/O is built upon binary I/O to provide a level of abstraction for character encoding and decoding. (文本模式的读写是建立在二进制模式读写的基础上的，只不过是将二进制信息进行了字符编解码)&lt;/p>
&lt;p>By default, a file is opened in text mode.(文件默认以文本模式打开)&lt;/p>
&lt;p>open a file using the binary mode ios::binary.(用ios::binary以二进制模式打开文件)&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;strong>Text I/O (文本模式)&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Binary I/O function:(二进制模式)&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>读&lt;/td>
&lt;td>operator &amp;raquo;; get(); getline();&lt;/td>
&lt;td>read();&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>写&lt;/td>
&lt;td>operator &amp;laquo;; put();&lt;/td>
&lt;td>write();&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h5 id="the-write-function-write函数">The write Function (write函数)
&lt;/h5>&lt;p>ostream&amp;amp; write( const char* s, std::streamsize count )&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">fstream&lt;/span> &lt;span class="nf">fs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;GreatWall.dat&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ios&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">binary&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">ios&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">trunc&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">char&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;ShanHaiGuan&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">JuYongGuan&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>将非字符数据写入文件&lt;/p>
&lt;p>(1) Convert any data into a sequence of bytes (byte stream) (先将数据转换为字节序列，即字节流)&lt;/p>
&lt;p>(2) Write the sequence of bytes to file with write() (再用write函数将字节序列写入文件)&lt;/p>
&lt;p>&lt;strong>How to convert any data into byte stream? (如何将信息转换为字节流)&lt;/strong>&lt;/p>
&lt;p>2.1. reinterpret_cast&lt;/p>
&lt;p>该运算符有两种用途：&lt;/p>
&lt;p>(1) cast the address of a type to another type (将一种类型的地址转为另一种类型的地址)&lt;/p>
&lt;p>(2) cast the address to a number, i.e. integer (将地址转换为数值，比如转换为整数)&lt;/p>
&lt;p>&lt;strong>语法&lt;/strong>：&lt;/p>
&lt;p>&lt;strong>reinterpret_cast&lt;dataType>(address)&lt;/strong>&lt;/p>
&lt;p>address is the starting address of the data (address是待转换的数据的起始地址)&lt;/p>
&lt;p>dataType is the data type you are converting to. (dataType是要转至的目标类型)&lt;/p>
&lt;p>&lt;strong>For binary I/O, dataType is char &lt;em>. (对于二进制I/O来说，dataType是 char&lt;/em>)&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">long&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">21&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">42&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">63&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">str&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">p1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// variable address
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">p2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// array address
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">p3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// object address
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="the-read-function-read成员函数">The read Function (read成员函数)
&lt;/h5>&lt;p>istream&amp;amp; read ( char* s, std::streamsize count );&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 读字符串
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">fstream&lt;/span> &lt;span class="nf">bio&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;GreatWall.dat&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ios&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">in&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">ios&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">binary&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">char&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">bio&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">s&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sc">&amp;#39;\0&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">bio&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">close&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 读其它类型数据（整数），需要使用 reinterpret_cast
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">fstream&lt;/span> &lt;span class="nf">bio&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;temp.dat&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ios&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">in&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">ios&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">binary&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">bio&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">reinterpret_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="file-positioner">File Positioner
&lt;/h4>&lt;p>文件位置指示器&lt;/p>
&lt;p>A file consists of a sequence of bytes.(文件由字节序列构成)&lt;/p>
&lt;p>File positioner is a special marker that is positioned at one of these bytes. (一个特殊标记指向其中一个字节)&lt;/p>
&lt;p>A read or write operation takes place at the location of the file positioner. (读写操作都是从文件位置指示器所标记的位置开始)&lt;/p>
&lt;p>When a file is opened, the fp is set at the beginning. (打开文件，fp指向文件头)&lt;/p>
&lt;p>When you read or write data to the file, the file pointer moves forward to the next data item. (读写文件时，文件位置指示器会向后移动到下一个数据项)&lt;/p>
&lt;h4 id="random-acess">Random Acess
&lt;/h4>&lt;p>Random Access means one can read/write anywhere inside a file(随机访问意味着可以读写文件的任意位置)&lt;/p>
&lt;p>How?&lt;/p>
&lt;p>We are able to know where the file positioner is. (我们能知道文件定位器在什么位置)&lt;/p>
&lt;p>We are able to move the file positioner inside the file (我们能在文件中移动文件定位器)&lt;/p>
&lt;p>Maybe we need two file positioners : one for reading, another for writing&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>·&lt;/strong>&lt;/th>
&lt;th>&lt;strong>For reading (读文件时用)&lt;/strong>&lt;/th>
&lt;th>&lt;strong>For writing(写文件时用)&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>获知文件定位器指到哪里&lt;/td>
&lt;td>&lt;em>tellg();&lt;/em> tell是获知，g是get表示读文件&lt;/td>
&lt;td>&lt;em>tellp();&lt;/em> tell是获知，p是put表示写文件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>移动文件定位器到指定位置&lt;/td>
&lt;td>&lt;em>seekg();&lt;/em> seek是寻找，g是get表示读文件&lt;/td>
&lt;td>&lt;em>seekp();&lt;/em> seek是寻找，p是put表示写文件&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>xxx_stream&amp;amp; seekg/seekp( pos_type pos );&lt;/p>
&lt;p>xxx_stream&amp;amp; seekg/seekp( off_type off, std::ios_base::seekdir dir);&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>seekdir&lt;/strong> &lt;strong>文件定位方向类型&lt;/strong>&lt;/th>
&lt;th>&lt;strong>解释&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>std::ios_base::beg&lt;/td>
&lt;td>流的开始；beg = begin&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>std::ios_base::end&lt;/td>
&lt;td>流的结尾&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>std::ios_base::cur&lt;/td>
&lt;td>流位置指示器的当前位置；cur = current&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>例子&lt;/strong>&lt;/th>
&lt;th>&lt;strong>解释&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>seekg(42L);&lt;/td>
&lt;td>将文件位置指示器移动到文件的第42字节处&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>seekg(10L, std::ios::beg);&lt;/td>
&lt;td>将文件位置指示器移动到从文件开头算起的第10字节处&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>seekp(-20L, std::ios::end);&lt;/td>
&lt;td>将文件位置指示器移动到从文件末尾开始，倒数第20字节处&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>seekp(-36L, std::ios::cur);&lt;/td>
&lt;td>将文件位置指示器移动到从当前位置开始，倒数第36字节处&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="left-value-pure-right-value-and-expiring-value">Left Value, Pure Right Value and eXpiring Value
&lt;/h2>&lt;h4 id="c03-lvalue-and-rvalue-c03的左值和右值">C++03 lvalue and rvalue (C++03的左值和右值)
&lt;/h4>&lt;p>通俗理解&lt;/p>
&lt;p>(1) 能放在等号左边的是lvalue&lt;/p>
&lt;p>(2) 只能放在等号右边的是rvalue&lt;/p>
&lt;p>(3) lvalue可以作为rvalue使用&lt;/p>
&lt;h4 id="c11-left-value">C++11: Left Value
&lt;/h4>&lt;p>An lvalue designates a function or an object, which is an expression whose address can be taken (左值指定了一个&lt;strong>函数或者对象&lt;/strong>，它是一个可以取地址的表达式)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">lv1&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="mi">42&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// Object
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">lv2&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="n">lv1&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// Lvalue reference to Object
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">lv3&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">lv1&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// Pointer to Object
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">lv4&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">lv1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="c1">// Function returning Lvalue Reference
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="c11-pure-right-value">C++11: Pure Right Value
&lt;/h4>&lt;p>prvalue(Pure Right Value，纯右值)：是不和对象相关联的值(字面量)或者其求值结果是&lt;strong>字面量&lt;/strong>或者一个匿名的&lt;strong>临时对象&lt;/strong>&lt;/p>
&lt;p>(1) 除字符串字面量以外的字面量，比如 32, &amp;lsquo;a&amp;rsquo;&lt;/p>
&lt;p>(2) 返回非引用类型的函数调用 int f() { return 1;}&lt;/p>
&lt;p>(3) 后置自增/自减表达式i++/i&amp;ndash;&lt;/p>
&lt;p>(4) 算术/逻辑/关系表达式（a+b、a&amp;amp;b、a&amp;laquo;b）（a&amp;amp;&amp;amp;b、a||b、~a）（a==b、a&amp;gt;=b、a&amp;lt;b）&lt;/p>
&lt;p>(5) 取地址（&amp;amp;x）&lt;/p>
&lt;p>&lt;strong>左值可以当成右值使用&lt;/strong>&lt;/p>
&lt;h4 id="c11-expiring-value">C++11: eXpiring Value
&lt;/h4>&lt;p>xvalue(eXpiring Value，将亡值)：将亡值也指定了一个对象，是一个将&lt;strong>纯右值转换为右值引用&lt;/strong>的表达式&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">prv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">6&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="c1">// pure rvalue
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">lvr5&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="mi">21&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// 常量左值引用可引用纯右值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">lvr6&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="mi">22&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// 错！非常量左值引用不可引用纯右值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">rvr1&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="mi">22&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// 右值引用可以引用纯右值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">lvr7&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="n">prv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// 错！非常量左值引用不可引用纯右值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">rvr2&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="n">prv&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// 右值引用普通函数返回值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">rvr1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">rvr2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 右值引用做左值使用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="运算符重载">运算符重载
&lt;/h2>&lt;p>不可重载的运算符&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Operator&lt;/th>
&lt;th>Name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>.&lt;/td>
&lt;td>&lt;strong>类属关系运算符&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>.*&lt;/td>
&lt;td>&lt;strong>成员指针运算符&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>::&lt;/td>
&lt;td>&lt;strong>作用域运算符&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>? :&lt;/td>
&lt;td>&lt;strong>条件运算符&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>##&lt;/td>
&lt;td>&lt;strong>编译预处理符号&lt;/strong>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>Restrictions for operator overloading (运算符重载的限制)&lt;/strong>&lt;/p>
&lt;p>(1) Precedence and Associativity are unchangeable (优先级和结合性不变)&lt;/p>
&lt;p>(2) NOT allowing to create new operator (不可创造新的运算符)&lt;/p>
&lt;p>重载的运算符必须和用户定义的class类型一起使用&lt;/p>
&lt;p>重载的运算符的参数至少应有一个是类对象(或类对象的引用)&lt;/p>
&lt;p>&lt;img src="https://edu-image.nosdn.127.net/26D6D0D7CCEA9856BC70B29511F82886.jpg?imageView&amp;amp;thumbnail=890x0&amp;amp;quality=100"
loading="lazy"
alt="img"
>&lt;/p>
&lt;h3 id="运算符函数的调用形式">运算符函数的调用形式
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>表达式&lt;/th>
&lt;th>作为成员函数&lt;/th>
&lt;th>作为非成员函数&lt;/th>
&lt;th>示例&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>@a&lt;/td>
&lt;td>(a).operator@ ( )&lt;/td>
&lt;td>operator@ (a)&lt;/td>
&lt;td>调用 &lt;a class="link" href="https://zh.cppreference.com/w/cpp/io/cin" target="_blank" rel="noopener"
>std::cin&lt;/a>.operator!()&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>a@b&lt;/td>
&lt;td>(a).operator@ (b)&lt;/td>
&lt;td>operator@ (a, b)&lt;/td>
&lt;td>&lt;a class="link" href="https://zh.cppreference.com/w/cpp/io/cout" target="_blank" rel="noopener"
>std::cout&lt;/a> &amp;laquo; 42 调用 &lt;a class="link" href="https://zh.cppreference.com/w/cpp/io/cout" target="_blank" rel="noopener"
>std::cout&lt;/a>.operator&amp;laquo;(42)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>a=b&lt;/td>
&lt;td>(a).operator= (b)&lt;/td>
&lt;td>不能是非成员&lt;/td>
&lt;td>&lt;a class="link" href="https://zh.cppreference.com/w/cpp/string/basic_string" target="_blank" rel="noopener"
>std::string&lt;/a> s; s = &amp;ldquo;abc&amp;rdquo;; 调用 s.operator=(&amp;ldquo;abc&amp;rdquo;)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>a(b&amp;hellip;)&lt;/td>
&lt;td>(a).operator()(b&amp;hellip;)&lt;/td>
&lt;td>不能是非成员&lt;/td>
&lt;td>&lt;a class="link" href="https://zh.cppreference.com/w/cpp/numeric/random/random_device" target="_blank" rel="noopener"
>std::random_device&lt;/a> r; auto n = r(); 调用 r.operator()()&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>a[b]&lt;/td>
&lt;td>(a).operator&lt;a class="link" href="b" >&lt;/a>&lt;/td>
&lt;td>不能是非成员&lt;/td>
&lt;td>&lt;a class="link" href="https://zh.cppreference.com/w/cpp/container/map" target="_blank" rel="noopener"
>std::map&lt;/a>&amp;lt;int, int&amp;gt; m; m[1] = 2; 调用 m.operator&lt;a class="link" href="1" >&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>a-&amp;gt;&lt;/td>
&lt;td>(a).operator-&amp;gt; ( )&lt;/td>
&lt;td>不能是非成员&lt;/td>
&lt;td>auto p = &lt;a class="link" href="https://zh.cppreference.com/w/cpp/memory/unique_ptr/make_unique" target="_blank" rel="noopener"
>std::make_unique&lt;/a>&lt;S>(); p-&amp;gt;bar() 调用 p.operator-&amp;gt;()&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>a@&lt;/td>
&lt;td>(a).operator@ (0)&lt;/td>
&lt;td>operator@ (a, 0)&lt;/td>
&lt;td>&lt;a class="link" href="https://zh.cppreference.com/w/cpp/container/vector" target="_blank" rel="noopener"
>std::vector&lt;/a>&lt;int>::iterator i = v.begin(); i++ 调用 i.operator++(0)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>此表中，&lt;strong>@&lt;/strong> 是表示所有匹配运算符的占位符：@a 为所有前缀运算符，a@ 为除 -&amp;gt; 以外的所有后缀运算符，a@b 为除 = 以外的所有其他运算符&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="二元">二元
&lt;/h3>&lt;p>复合二元运算符&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Vec2D&lt;/span> &lt;span class="n">Vec2D&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="k">operator&lt;/span> &lt;span class="o">+&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Vec2D&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">secondVec2D&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">*&lt;/span>&lt;span class="k">this&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">secondVec2D&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Vec2D&lt;/span> &lt;span class="n">Vec2D&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Vec2D&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">secondVec2D&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">//prvalue
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="n">m&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x_&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">secondVec2D&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">getX&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">y_&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">secondVec2D&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nf">Vec2D&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//临时的匿名对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>How to make v2[] an Lvalue? (如何使r2[]成为左值)&lt;/p>
&lt;p>declare the [] operator to return a reference (使[]返回一个引用)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">double&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">Vec2D&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="k">operator&lt;/span>&lt;span class="p">[](&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">//lvalue
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">index&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">x_&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//x_ can be modified
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//...... Now, the Vec2D class is mutable.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="一元">一元
&lt;/h3>&lt;p>当编译器遇到 @obj; 时，&lt;/p>
&lt;p>若operator @是在obj的类中的成员，则调用&lt;/p>
&lt;p>obj.operator @()&lt;/p>
&lt;p>若operator @是obj的类的 friend 函数，则调用&lt;/p>
&lt;p>operator @(obj)&lt;/p>
&lt;h4 id="-">-
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Vec2D&lt;/span> &lt;span class="n">Vec2D&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="k">operator&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="p">(){&lt;/span>&lt;span class="c1">//无参数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nf">Vec2D&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">x_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">y_&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 返回匿名临时对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="自增自减">自增自减
&lt;/h4>&lt;p>前置++/&amp;ndash;重载无参数，返回引用类型&lt;/p>
&lt;p>后置++/&amp;ndash;重载带参数&amp;ndash;&amp;ldquo;dummy&amp;quot;参数 仅作占位&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>运算符名&lt;/strong>&lt;/th>
&lt;th>&lt;strong>语法&lt;/strong>&lt;/th>
&lt;th>&lt;strong>可重载&lt;/strong>&lt;/th>
&lt;th>&lt;strong>原型示例（对于类&lt;/strong> &lt;strong>class T&lt;/strong>**）**&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>类内定义&lt;/td>
&lt;td>类外定义&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>前自增&lt;/strong>&lt;/td>
&lt;td>++a&lt;/td>
&lt;td>是&lt;/td>
&lt;td>T&amp;amp; T::operator++();&lt;/td>
&lt;td>T&amp;amp; operator++(T&amp;amp; a);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>前自减&lt;/strong>&lt;/td>
&lt;td>&amp;ndash;a&lt;/td>
&lt;td>是&lt;/td>
&lt;td>T&amp;amp; T::operator&amp;ndash;();&lt;/td>
&lt;td>T&amp;amp; operator&amp;ndash;(T&amp;amp; a);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>后自增&lt;/strong>&lt;/td>
&lt;td>a++&lt;/td>
&lt;td>是&lt;/td>
&lt;td>T T::operator++(int &lt;em>dummy&lt;/em>);&lt;/td>
&lt;td>T operator++(T&amp;amp; a, int &lt;em>dummy&lt;/em>);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>后自减&lt;/strong>&lt;/td>
&lt;td>a&amp;ndash;&lt;/td>
&lt;td>是&lt;/td>
&lt;td>T T::operator&amp;ndash;(int &lt;em>dummy&lt;/em>);&lt;/td>
&lt;td>T operator&amp;ndash;(T&amp;amp; a, int &lt;em>dummy&lt;/em>);&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="流运算符">流运算符
&lt;/h3>&lt;p>运算符重载为类成员函数后,当调用该运算符时,左操作数必须是该类的实例。若&amp;laquo;和&amp;raquo;重载为成员函数，则只能用 v1&amp;laquo;cout;&lt;/p>
&lt;p>因此 &amp;laquo; (&amp;raquo;) should be overloaded as &amp;ldquo;friend function&amp;rdquo; (只能重载为友元函数)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Vec2D&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">//重载为成员函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ostream&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">operator&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ostream&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">stream&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">istream&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">operator&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">istream&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">stream&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Vec2D&lt;/span> &lt;span class="n">v1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">v1&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">cout&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//Vec2D对象只能作为第一个操作数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">Vec2D&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">//重载为友元函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">friend&lt;/span> &lt;span class="n">ostream&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">operator&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ostream&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">stream&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Vec2D&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">friend&lt;/span> &lt;span class="n">istream&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">operator&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">istream&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">stream&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Vec2D&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">v&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Vec2D&lt;/span> &lt;span class="n">v1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">v1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="对象转换运算符">对象转换运算符
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Vec2D&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="k">operator&lt;/span> &lt;span class="kt">double&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="c1">//无返回值类型
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nf">magnitude&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Vec2D&lt;/span> &lt;span class="nf">v1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">double&lt;/span> &lt;span class="n">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">v1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mf">5.1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// d: 10.1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">double&lt;/span> &lt;span class="n">e&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">static_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">v1&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// e: 5.0
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="赋值运算符">赋值运算符
&lt;/h3>&lt;p>By default, the = operator performs a memberwise copy from one object to the other. (默认情况下，赋值运算符执行对象成员的一对一拷贝)&lt;/p>
&lt;p>To change the way the default assignment operator = works, you need to overload the = operator. (重载赋值运算符，会改变其默认工作方式)&lt;/p>
&lt;p>一般情况下，如果拷贝构造函数需要执行深拷贝，那么赋值运算符需要重载&lt;/p>
&lt;h2 id="异常处理">异常处理
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Code&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="k">try&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="n">an&lt;/span> &lt;span class="nf">exception&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">with&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="k">throw&lt;/span> &lt;span class="n">statement&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">or&lt;/span> &lt;span class="n">from&lt;/span> &lt;span class="n">function&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">More&lt;/span> &lt;span class="n">code&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="k">try&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">type&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Code&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">process&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">exception&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">quotient&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">number1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">number2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">number2&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="n">number1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">number1&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">number2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">quotient&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;除数为0！&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="异常匹配与异常类">异常匹配与异常类
&lt;/h4>&lt;p>catch ( ExceptionType&amp;amp; parameter ) { /* 处理异常 */ }&lt;/p>
&lt;p>若try{}中所抛异常类型与catch()的参数类型(ExceptionType)匹配，则进入catch块&lt;/p>
&lt;p>若对异常对象的内容不感兴趣，可省略catch参数，只保留类型&lt;/p>
&lt;p>&lt;strong>Base Class of Exception in Standard Library(标准库中的异常基类)&lt;/strong>&lt;/p>
&lt;p>#include &lt;exception>&lt;/p>
&lt;p>Class exception&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">exception&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// 构造函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">virtual&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">what&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">//返回解释性字符串
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>what()返回的指针指向拥有解释信息的空终止字符串的指针。该指针保证在获取它的异常对象被销毁前，或在调用该异常对象的非静态成员函数前合法&lt;/p>
&lt;p>&lt;img src="https://edu-image.nosdn.127.net/FC0524938D6AAFD2AA605AA2137C8880.jpg?imageView&amp;amp;thumbnail=890x0&amp;amp;quality=100"
loading="lazy"
alt="img"
>&lt;/p>
&lt;h4 id="c11-noexcept">c++11 noexcept
&lt;/h4>&lt;p>C++03将throw(ExceptionType)放到函数后面，说明函数会抛出什么类型的异常，也被称为“异常规约”&lt;/p>
&lt;p>java用 throws关键字做同样的事情&lt;/p>
&lt;p>C++11后基本没人用“异常规约”&lt;/p>
&lt;p>C++11使用noexcept指明函数是否抛出异常&lt;/p>
&lt;ul>
&lt;li>
&lt;p>若函数不抛异常，则可做编译优化&lt;/p>
&lt;/li>
&lt;li>
&lt;p>即便函数抛异常，也不再说明所抛异常类型(简化)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>noexcept不能用于区分重载函数 (对比：函数名后面的const可区分重载)&lt;/p>
&lt;h4 id="重抛异常">重抛异常
&lt;/h4>&lt;h4 id="when-to-rethrow-an-exception">When to &lt;strong>rethrow&lt;/strong> an exception?
&lt;/h4>&lt;p>(1) if the handler cannot process the exception (当它无法处理该异常)&lt;/p>
&lt;p>(2) the handler simply wants to let its caller be notified (或想通知它的调用者发生了一个异常)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// statements;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">TheException&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">ex&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Do something;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">throw&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="模板">模板
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>Programming(编程): Writing a program that creates, transforms, filters, aggregates and otherwise manipulates data. (写一个程序去处理数据)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Metaprogramming(元编程): Writing a program that creates, transforms, filters, aggregates and otherwise manipulates programs.(写个程序去处理程序)&lt;/p>
&lt;p>C++ implements MetaProgramming with &amp;ldquo;template&amp;rdquo; to produce template instance, i.e. programs, in compiling time. (C++用&lt;strong>模板&lt;/strong>实现元编程，由编译器在编译期根据模板生成模板实例，也就是程序)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Generic Programming(泛型编程): Writing a program that creates, transforms, filters, aggregates and otherwise manipulates data, but makes only the minimum assumptions about the structure of the data, thus maximizing reuse across a wide range of datatypes.(写个程序去处理数据，但是只对数据的结构做最小假设以使该程序能重用于处理广泛的数据类型)&lt;/p>
&lt;p>Generic programming in C++ (i.e. &lt;strong>compile-time polymorphism&lt;/strong>) is accomplished by metaprogramming (i.e. code generation from templated code).(C++的泛型编程，即&lt;strong>编译时多态&lt;/strong>，是藉由元编程实现的，也就是由代码模板生成代码)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="template">Template
&lt;/h3>&lt;p>模板&lt;/p>
&lt;p>&lt;img src="https://edu-image.nosdn.127.net/6624DA8B3BC36817154DD38DF7F70F44.jpg?imageView&amp;amp;thumbnail=890x0&amp;amp;quality=100"
loading="lazy"
alt="img"
>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">typename&lt;/span> &lt;span class="n">S&lt;/span> &lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">auto&lt;/span> &lt;span class="n">add&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span> &lt;span class="n">x1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">S&lt;/span> &lt;span class="n">x2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">//C++14
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">x2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A function template is just a blueprint, not a type, or a function. (函数模板只是蓝图，本身不是不是类型、函数)&lt;/p>
&lt;p>编译器扫描代码，遇到模版定义时，并不立即产生代码&lt;/p>
&lt;p>The template arguments must be determined so that the compiler can generate an actual function (确定模板实参后，编译器生成实际函数代码)&lt;/p>
&lt;p>两种实例化方法 (确定模板实参的方法)&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Explicit instantiation (显式实例化)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="sc">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 实例化，编译器生成代码
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// void f(double s) { // T: double
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// std::cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 实例化 f&amp;lt;char&amp;gt;(char) ，推导出模板实参
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 实例化 f&amp;lt;int&amp;gt;(int) ，推导出模板实参
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Implicit instantiation (隐式实例化)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="sc">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">f&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 实例化并调用 f&amp;lt;double&amp;gt;(double)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">f&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sc">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 实例化并调用 f&amp;lt;char&amp;gt;(char)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 实例化并调用 f&amp;lt;int&amp;gt;(int)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">ptr&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 实例化 f&amp;lt;string&amp;gt;(string)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>A function instantiated from a function template is called an instantiated function. A class instantiated from a class template is called an instantiated class.(由函数模板实例化得到的函数叫做“实例函数”，由类模板实例化得到的类叫做“实例类”)&lt;/p>
&lt;h3 id="default-type-parameter-默认类型参数">Default type parameter (默认类型参数)
&lt;/h3>&lt;p>You can assign a default type for a type parameter in a class template. (可以为类模板的类型参数指定一个默认类型)&lt;/p>
&lt;p>template&lt;typename T = int>&lt;/p>
&lt;p>You can only use default type in class templates, &lt;strong>NOT&lt;/strong> in function templates&lt;/p>
&lt;h3 id="non-type-parameters-非类型参数">Non-type Parameters (非类型参数)
&lt;/h3>&lt;p>Using nontype parameters in a template prefix. (在模板前缀中使用非类型参数)&lt;/p>
&lt;p>When instantiating a template, the nontype argument should be an object(实例化模板时，非类型实参应该是&lt;strong>对象&lt;/strong>)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">capacity&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Stack&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">T&lt;/span> &lt;span class="n">elements&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">capacity&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Stack&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">charStack&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//对象作为非类型参数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Color&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Label&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">……&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Color&lt;/span> &lt;span class="nf">color&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">255&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Label&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">color&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">label&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="templates-and-inheritance">Templates and inheritance
&lt;/h3>&lt;p>模板与继承&lt;/p>
&lt;p>A non-template class can be derived from a class template specialization(普通类可从类模板&lt;strong>实例&lt;/strong>继承).&lt;/p>
&lt;p>A class template can be derived from a nontemplate class.(模板可从普通类继承)&lt;/p>
&lt;p>A class template can be derived from a class template.(类模板可继承类模板)&lt;/p>
&lt;p>template&lt;typename T> class T1;&lt;/p>
&lt;p>template&lt;typename T> class T2;&lt;/p>
&lt;p>class C;&lt;/p>
&lt;h2 id="stlstandard-template-library">STL(Standard Template Library)
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>containers&lt;/p>
&lt;p>store a collection of data, often referred to as elements&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Sequence container(顺序容器)&lt;/p>
&lt;p>represents &lt;strong>linear&lt;/strong> data structures&lt;/p>
&lt;p>vector,list,deque&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Associative containers（关联容器）&lt;/p>
&lt;p>&lt;strong>non-linear&lt;/strong> containers that can locate elements stored in the container quickly&lt;/p>
&lt;p>set,multiset,map and multimap&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>关联容器和顺序容器统称为一级容器&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Container adapters(容器适配器)&lt;/p>
&lt;p>&lt;strong>constrained versions&lt;/strong> of sequence containers, aiming at handling special cases&lt;/p>
&lt;p>stack,queue, and priority_queue&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Iterators&lt;/p>
&lt;p>facilitate &lt;strong>traversing&lt;/strong> through the elements in a container&lt;/p>
&lt;p>a generalization of pointers&lt;/p>
&lt;p>used extensively in the first-class containers for accessing and manipulating the elements(用于访问和处理一级容器中的元素)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Algorithm&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Function Objects&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Memory Allocation&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="iterator">Iterator
&lt;/h3>&lt;p>&lt;img src="https://img.gejiba.com/images/449192c22ffba9b55343590c5b4513de.png"
loading="lazy"
alt="449192c22ffba9b55343590c5b4513de.png"
>
&lt;img src="https://img.gejiba.com/images/e3ed25cd470f85a4102057c2da9eb05c.png"
loading="lazy"
alt="e3ed25cd470f85a4102057c2da9eb05c.png"
>
&lt;img src="https://img.gejiba.com/images/403cc08a2b568f5d4a751ada9c918696.png"
loading="lazy"
alt="403cc08a2b568f5d4a751ada9c918696.png"
>&lt;/p>
&lt;h2 id="规范">规范
&lt;/h2>&lt;ul>
&lt;li>The prefix is should be used for boolean variables and methods.&lt;/li>
&lt;li>Type conversions must always be done explicitly. Never rely on implicit type conversion.&lt;/li>
&lt;li>Named constants (including enumeration values) must be all uppercase using underscore to separate words.&lt;/li>
&lt;li>Names representing types must be in mixed case starting with upper case.&lt;/li>
&lt;li>If the parameter of a member function has the same name as a private class variable, then the parameter should have underscore suffix.&lt;/li>
&lt;li>Class variables should never be declared public.&lt;/li>
&lt;/ul></description></item><item><title>【CPP】W3C C++</title><link>https://dyhes.github.io/p/cppw3c-c-/</link><pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/cppw3c-c-/</guid><description>&lt;h2 id="introduction">Introduction
&lt;/h2>&lt;p>C++ is a cross-platform language that can be used to create high-performance applications.&lt;/p>
&lt;p>C++ was developed by Bjarne Stroustrup, as an extension to the &lt;a class="link" href="https://www.w3schools.com/c/index.php" target="_blank" rel="noopener"
>C language&lt;/a>.&lt;/p>
&lt;p>C++ gives programmers a &lt;strong>high level of control&lt;/strong> over system resources and memory.&lt;/p>
&lt;p>The language was updated &lt;strong>4 major times&lt;/strong> in 2011, 2014, 2017, and 2020 to C++11, C++14, C++17, C++20.&lt;/p>
&lt;p>To start using C++, you need two things:&lt;/p>
&lt;ul>
&lt;li>A text editor, like Notepad, to write C++ code&lt;/li>
&lt;li>A compiler, like GCC, to translate the C++ code into a language that the computer will understand&lt;/li>
&lt;/ul>
&lt;h2 id="const">Const
&lt;/h2>&lt;p>the &lt;code>const&lt;/code> keyword will declare the variable as &amp;ldquo;constant&amp;rdquo;, which means &lt;strong>unchangeable and read-only&lt;/strong>)&lt;/p>
&lt;h2 id="basic-data-type">Basic Data Type
&lt;/h2>&lt;p>The data type specifies the size and type of information the variable will store:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">Data Type&lt;/th>
&lt;th style="text-align: left">Size&lt;/th>
&lt;th style="text-align: left">Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">&lt;code>boolean&lt;/code>&lt;/td>
&lt;td style="text-align: left">1 byte&lt;/td>
&lt;td style="text-align: left">Stores true or false values&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;code>char&lt;/code>&lt;/td>
&lt;td style="text-align: left">1 byte&lt;/td>
&lt;td style="text-align: left">Stores a single character/letter/number, or ASCII values&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;code>int&lt;/code>&lt;/td>
&lt;td style="text-align: left">2 or 4 bytes&lt;/td>
&lt;td style="text-align: left">Stores whole numbers, without decimals&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;code>float&lt;/code>&lt;/td>
&lt;td style="text-align: left">4 bytes&lt;/td>
&lt;td style="text-align: left">Stores fractional numbers, containing one or more decimals. Sufficient for storing 7 decimal digits&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">&lt;code>double&lt;/code>&lt;/td>
&lt;td style="text-align: left">8 bytes&lt;/td>
&lt;td style="text-align: left">Stores fractional numbers, containing one or more decimals. Sufficient for storing 15 decimal digits&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="strings">Strings
&lt;/h2>&lt;p>A &lt;code>string&lt;/code> variable contains a collection of characters surrounded by double quotes&lt;/p>
&lt;p>o use strings, you must include an additional header file in the source code, the &lt;code>&amp;lt;string&amp;gt;&lt;/code> library&lt;/p>
&lt;p>It is possible to use the extraction operator &lt;code>&amp;gt;&amp;gt;&lt;/code> on &lt;code>cin&lt;/code> to display a string entered by a user. However, &lt;code>cin&lt;/code> considers a space (whitespace, tabs, etc) as a terminating character, which means that it can only display a single word . That&amp;rsquo;s why, when working with strings, we often use the &lt;code>getline()&lt;/code> function to read a line of text. It takes &lt;code>cin&lt;/code> as the first parameter, and the string variable as second.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">getline&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">cin&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fullName&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>