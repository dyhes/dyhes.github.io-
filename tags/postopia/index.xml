<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Postopia on 飞鸿踏雪泥</title><link>https://dyhes.github.io/tags/postopia/</link><description>Recent content in Postopia on 飞鸿踏雪泥</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 11 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://dyhes.github.io/tags/postopia/index.xml" rel="self" type="application/rss+xml"/><item><title>【Postopia Dev Log】Week 6</title><link>https://dyhes.github.io/p/postopia-dev-logweek-6/</link><pubDate>Fri, 11 Oct 2024 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/postopia-dev-logweek-6/</guid><description>&lt;p>使用的对象存储使用的是 &lt;a class="link" href="https://cloudinary.com/" target="_blank" rel="noopener"
>Cloudinary&lt;/a> 上传图片时文档不完善,通过将图像转为data url解决&lt;/p>
&lt;p>感觉突然像是卡住了一样，进入了倦怠期，也许是因为某个问题遇到了两三次还是没记住，让我有些灰心了（10.21）&lt;/p>
&lt;p>进度：&lt;/p>
&lt;p>update avatar&lt;/p>
&lt;p>get user info&lt;/p>
&lt;p>show email&lt;/p>
&lt;p>get user&amp;rsquo;s posts and comments&lt;/p>
&lt;h2 id="dependency-injection">Dependency Injection
&lt;/h2>&lt;p>The recommended way of dependency injection in Spring Boot is constructor injection. Here&amp;rsquo;s why it&amp;rsquo;s preferred and how to implement it:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Constructor Injection:
This is the most recommended approach. Here&amp;rsquo;s how it works:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">UserService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">UserRepository&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">userRepository&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">EmailService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">emailService&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Autowired&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// Optional in newer Spring versions&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">UserService&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UserRepository&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">userRepository&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">EmailService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">emailService&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">userRepository&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">userRepository&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">emailService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">emailService&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Service methods...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Advantages:&lt;/p>
&lt;ul>
&lt;li>Promotes immutability (dependencies can be final)&lt;/li>
&lt;li>Makes dependencies explicit&lt;/li>
&lt;li>Ensures the bean is fully initialized after construction&lt;/li>
&lt;li>Easier to test (you can easily provide mock dependencies)&lt;/li>
&lt;li>Prevents circular dependencies at compile-time&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Setter Injection:
While not as favored as constructor injection, setter injection can be useful in certain scenarios, particularly when dealing with optional dependencies:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">UserService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">UserRepository&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">userRepository&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Autowired&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">setUserRepository&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">UserRepository&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">userRepository&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">userRepository&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">userRepository&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Service methods...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Setter injection is less common but can be useful for optional dependencies or when you need to change dependencies at runtime.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Field Injection (Not Recommended):
As discussed earlier, this method is generally discouraged:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">UserService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Autowired&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">UserRepository&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">userRepository&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Service methods...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>Best Practices:&lt;/p>
&lt;ol>
&lt;li>Use constructor injection for required dependencies.&lt;/li>
&lt;li>Consider setter injection for optional dependencies.&lt;/li>
&lt;li>Avoid field injection in most cases.&lt;/li>
&lt;li>Use the &lt;code>@Autowired&lt;/code> annotation on constructors (optional in newer Spring versions).&lt;/li>
&lt;li>Keep your classes focused and try to limit the number of dependencies.&lt;/li>
&lt;/ol>
&lt;p>Would you like me to elaborate on any specific aspect of dependency injection or provide a more complex example?&lt;/p>
&lt;h3 id="field-injection-not-recommended">Field Injection (not recommended)
&lt;/h3>&lt;p>Field injection in Spring Boot is generally not recommended for several reasons:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Immutability: Field injection makes it difficult to create immutable objects, as the fields need to be non-final to allow injection.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Testability: Classes using field injection are harder to unit test, as you can&amp;rsquo;t easily inject mock dependencies without using a Spring container or reflection.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Dependency hiding: Field injection can hide dependencies, making it less obvious what a class requires to function properly.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Circular dependencies: Field injection can more easily lead to circular dependency issues, which are harder to detect and resolve.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Inversion of Control (IoC) principle: Field injection violates the IoC principle to some extent, as the class is directly asking for its dependencies rather than having them provided.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Reflection use: Spring uses reflection to inject dependencies into private fields, which can have a minor performance impact and bypasses encapsulation.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Instead of field injection, constructor injection is typically recommended as it addresses these issues. It allows for immutable objects, makes dependencies explicit, and facilitates easier testing and better design.&lt;/p>
&lt;p>Would you like me to elaborate on any of these points or provide an example of constructor injection?&lt;/p>
&lt;h2 id="user-id-exposure">User Id Exposure
&lt;/h2>&lt;p>Exposing a backend user ID in frontend code or APIs is generally &lt;strong>not a good practice&lt;/strong> for several reasons, especially in public-facing applications. Here&amp;rsquo;s why:&lt;/p>
&lt;h3 id="security-risks">&lt;strong>Security Risks&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>Enumeration Attacks&lt;/strong>: If user IDs are predictable (like auto-incrementing integers), attackers can guess and try to access other users&amp;rsquo; data, leading to potential data breaches.&lt;/li>
&lt;li>&lt;strong>User Impersonation&lt;/strong>: Exposing a backend ID might allow an attacker to impersonate another user if your application doesn&amp;rsquo;t properly authenticate requests.&lt;/li>
&lt;/ul>
&lt;h3 id="privacy-concerns">&lt;strong>Privacy Concerns&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>Sensitive Information&lt;/strong>: In some cases, a user ID may be linked to personal data. Exposing these identifiers could lead to privacy violations, depending on the nature of the application.&lt;/li>
&lt;/ul>
&lt;h3 id="business-logic-exposure">&lt;strong>Business Logic Exposure&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>Insights into Structure&lt;/strong>: If your backend user IDs reveal too much about your data structure, an attacker could gain insights into how your system is designed, which may make it easier to exploit vulnerabilities.&lt;/li>
&lt;/ul>
&lt;h3 id="alternatives-and-best-practices">Alternatives and Best Practices
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>Use UUIDs or Random Identifiers&lt;/strong>: Instead of exposing sequential user IDs, consider using universally unique identifiers (UUIDs) or other random tokens that are harder to predict and manipulate.&lt;/li>
&lt;li>&lt;strong>Tokenization&lt;/strong>: Use session tokens or API tokens that map to a user ID on the backend but don&amp;rsquo;t directly expose the ID itself.&lt;/li>
&lt;li>&lt;strong>Limit Information&lt;/strong>: Only expose what is absolutely necessary for the frontend or API consumer. If there&amp;rsquo;s no need to show the user ID, don&amp;rsquo;t include it.&lt;/li>
&lt;li>&lt;strong>Access Control&lt;/strong>: Ensure proper access control and authentication mechanisms so that even if a user ID is exposed, unauthorized users cannot exploit it.&lt;/li>
&lt;/ul>
&lt;p>In summary, it’s a best practice to avoid exposing backend user IDs unless necessary and only if adequate security measures are in place to mitigate risks.&lt;/p></description></item><item><title>【Postopia Dev Log】Week 5</title><link>https://dyhes.github.io/p/postopia-dev-logweek-5/</link><pubDate>Mon, 30 Sep 2024 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/postopia-dev-logweek-5/</guid><description>&lt;p>如何处理以前没有遇到过的新需求（如给用户发送邮件），需要积累解决问题的能力（实习的时候可以边问边查，做自己的项目只能自己去查，那么如何高效检索并善用AI）,并形成方法论，以便提高能力&lt;/p>
&lt;p>发现 Claude 之前教的在Service Layer 中使用 @AuthenticatedPrincipal 的方法不正确，当时没有及时测试导致现在有若干地方需要修改！！！使用但不要盲目相信&lt;/p>
&lt;p>idea无法热加载， 根据&lt;/p>
&lt;p>Perperlexity&lt;/p>
&lt;blockquote>
&lt;p>In IntelliJ IDEA, ensure that the project is set to build automatically. Go to &lt;code>File&lt;/code> -&amp;gt; &lt;code>Settings&lt;/code> -&amp;gt; &lt;code>Build, Execution, Deployment&lt;/code> -&amp;gt; &lt;code>Compiler&lt;/code>, and check the option &lt;strong>Build project automatically&lt;/strong>. This setting allows the IDE to compile changes without needing to manually trigger a build each time&lt;/p>
&lt;/blockquote>
&lt;p>以及&lt;/p>
&lt;p>&lt;a class="link" href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/4404522882450-Spring-Boot-DevTools-Live-Reload-Not-Working" target="_blank" rel="noopener"
>Spring Boot DevTools Live Reload Not Working&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://intellij-support.jetbrains.com/hc/user_images/6k1gpJeEDLK9V5JSVaUOFQ.png"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>两者结合解决&lt;/p>
&lt;p>进度：&lt;/p>
&lt;p>change user nickname&lt;/p>
&lt;p>bind email&lt;/p>
&lt;p>本周写论文(实验室横向)，无其他进展&lt;/p>
&lt;p>to do:&lt;/p>
&lt;p>query comment (recursive query, complex)&lt;/p>
&lt;h2 id="space-in-applicationproperties-value">Space in application.properties value
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>Leading and trailing spaces: By default, leading and trailing spaces in property values are trimmed. If you need to preserve them, you can use quotation marks.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Spaces within the value: Spaces within the value are preserved normally.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Escaping: If you want to be explicit about including spaces, you can escape them with a backslash.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Here are some examples:&lt;/p>
&lt;pre tabindex="0">&lt;code># Space in the middle (works fine)
app.name=My Application
# Preserving leading/trailing spaces with quotes
app.description=&amp;#34; This is a description with spaces &amp;#34;
# Escaping spaces (not necessary, but valid)
app.path=C:\Program\ Files\My\ App
# Multiline values
app.multiline=This is a long \
property value that \
spans multiple lines
&lt;/code>&lt;/pre>&lt;p>If you&amp;rsquo;re having issues with spaces in your application.properties file, you might want to double-check how you&amp;rsquo;re reading the properties in your application. Some methods of reading properties may handle spaces differently.&lt;/p>
&lt;h2 id="store-credentials-in-spring-boot">Store Credentials in spring boot
&lt;/h2>&lt;ol>
&lt;li>Basic approach (not recommended for production):&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-properties" data-lang="properties">&lt;span class="line">&lt;span class="cl">&lt;span class="na">database.username&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">myuser&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">database.password&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">mypassword&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>Using environment variables:
Instead of hardcoding credentials, you can reference environment variables:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-properties" data-lang="properties">&lt;span class="line">&lt;span class="cl">&lt;span class="na">database.username&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">${DB_USERNAME}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">database.password&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">${DB_PASSWORD}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then set these environment variables on your system or in your deployment environment.&lt;/p>
&lt;ol start="3">
&lt;li>
&lt;p>Using Spring Boot&amp;rsquo;s config server:
For more secure credential management, especially in production, consider using Spring Cloud Config Server.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Encryption:
Spring Boot supports property encryption. You can use tools like Jasypt to encrypt sensitive properties:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-properties" data-lang="properties">&lt;span class="line">&lt;span class="cl">&lt;span class="na">database.username&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">ENC(encrypted_username)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">database.password&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">ENC(encrypted_password)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="5">
&lt;li>Externalized configuration:
Store sensitive data in external files and reference them:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-properties" data-lang="properties">&lt;span class="line">&lt;span class="cl">&lt;span class="na">spring.config.import&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">file:/path/to/secure/credentials.properties&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For production environments, I recommend using a secrets management system like HashiCorp Vault, AWS Secrets Manager, or Azure Key Vault. These provide more secure ways to manage and access sensitive information.&lt;/p>
&lt;p>Would you like me to elaborate on any of these approaches or provide a more detailed example of implementing one of them in a Spring Boot application?&lt;/p>
&lt;h2 id="env-in-spring-boot">.env in spring boot
&lt;/h2>&lt;p>Using environment variables in a Spring Boot application is a good practice for managing sensitive information like credentials. There are a few ways to work with environment variables, and creating a .env file is one approach, though it requires some additional setup. Let&amp;rsquo;s go through the process:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Using system environment variables:&lt;/p>
&lt;p>This is the most straightforward method. You set the variables in your operating system or deployment environment, and Spring Boot can access them directly.&lt;/p>
&lt;p>For example, you might set variables like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>export DB_USERNAME=myuser
export DB_PASSWORD=mypassword
&lt;/code>&lt;/pre>&lt;p>Then in your application.properties:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-properties" data-lang="properties">&lt;span class="line">&lt;span class="cl">&lt;span class="na">spring.datasource.username&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">${DB_USERNAME}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">spring.datasource.password&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">${DB_PASSWORD}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Using a .env file:&lt;/p>
&lt;p>While Spring Boot doesn&amp;rsquo;t natively support .env files, you can use a library like &lt;code>dotenv-java&lt;/code> to load variables from a .env file. Here&amp;rsquo;s how:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Add this dependency to your pom.xml&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">dependency&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">groupId&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">io&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">github&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">cdimascio&lt;/span>&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">groupId&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">artifactId&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">dotenv&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">java&lt;/span>&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">artifactId&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">version&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">3&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">1&lt;/span>&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">version&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">dependency&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// In your main application class&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kn">import&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nn">io.github.cdimascio.dotenv.Dotenv&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nd">@SpringBootApplication&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">MyApplication&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Dotenv&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">dotenv&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Dotenv&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">load&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">setProperty&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;DB_USERNAME&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">dotenv&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;DB_USERNAME&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">setProperty&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;DB_PASSWORD&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">dotenv&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;DB_PASSWORD&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">SpringApplication&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MyApplication&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// Create a .env file in your project root&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">DB_USERNAME&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">myuser&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">DB_PASSWORD&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">mypassword&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// In your application.properties&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">spring&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">datasource&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">username&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">$&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">DB_USERNAME&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">spring&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">datasource&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">password&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">$&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">DB_PASSWORD&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>​ Remember to add .env to your .gitignore file to prevent committing sensitive information to version control.&lt;/p>
&lt;ol start="3">
&lt;li>Command-line arguments:&lt;/li>
&lt;/ol>
&lt;p>You can also pass environment variables as command-line arguments when running your application:&lt;/p>
&lt;pre tabindex="0">&lt;code>java -jar myapp.jar --spring.datasource.username=myuser --spring.datasource.password=mypassword
&lt;/code>&lt;/pre>&lt;p>Remember, while using a .env file can be convenient for development, it&amp;rsquo;s &lt;strong>generally not recommended for production environments&lt;/strong>. In production, it&amp;rsquo;s better to use system environment variables, secret management systems, or cloud provider-specific solutions.&lt;/p>
&lt;h2 id="one-time-password">One Time Password
&lt;/h2>&lt;h2 id="pathvariable">@PathVariable
&lt;/h2>&lt;p>To use path parameters with a POST mapping in Spring Boot, you can use the &lt;code>@PathVariable&lt;/code> annotation along with &lt;code>@PostMapping&lt;/code>. Here&amp;rsquo;s a brief example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@RestController&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nd">@RequestMapping&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/api&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">MyController&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@PostMapping&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/users/{id}&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ResponseEntity&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">createUser&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nd">@PathVariable&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Long&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nd">@RequestBody&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">User&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Process the user creation with the given id&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ResponseEntity&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">ok&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;User created with ID: &amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this example:&lt;/p>
&lt;ol>
&lt;li>The &lt;code>@PostMapping&lt;/code> annotation defines the endpoint for POST requests.&lt;/li>
&lt;li>The &lt;code>{id}&lt;/code> in the path is a path variable.&lt;/li>
&lt;li>The &lt;code>@PathVariable Long id&lt;/code> parameter in the method signature captures the value of the &lt;code>{id}&lt;/code> path variable.&lt;/li>
&lt;li>You can also include a request body using &lt;code>@RequestBody&lt;/code> if needed.&lt;/li>
&lt;/ol>
&lt;p>To call this endpoint, you would send a POST request to a URL like &lt;code>/api/users/123&lt;/code>, where &lt;code>123&lt;/code> is the ID.&lt;/p>
&lt;p>Would you like me to explain any part of this in more detail or show you how to handle multiple path variables?&lt;/p>
&lt;h2 id="references">References
&lt;/h2>&lt;p>&lt;a class="link" href="https://www.baeldung.com/spring-email" target="_blank" rel="noopener"
>Guide to Spring Email&lt;/a>&lt;/p></description></item><item><title>【Postopia Dev Log】Week 4</title><link>https://dyhes.github.io/p/postopia-dev-logweek-4/</link><pubDate>Fri, 20 Sep 2024 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/postopia-dev-logweek-4/</guid><description>&lt;p>之前都是在mac上进行开发，现在换到Windows上，跑不起来&lt;/p>
&lt;p>原来是因为自定义query方法里的字段设置不对（应与entity中字段而非表字段保持一致 ）&lt;/p>
&lt;p>之前在mac上用code跑项目，运行时并没有查出这个错误，现在在win上用idea跑检查出来了&lt;/p>
&lt;p>经过接近一个月（生活琐事与开学前的休息）再重新打开项目，忘了该从哪里继续项目，以后要注意记录开发进度&lt;/p>
&lt;p>进度：&lt;/p>
&lt;p>like, dislike post, comment&lt;/p>
&lt;p>query like status in post&lt;/p>
&lt;p>update user nickname&lt;/p>
&lt;p>to do:&lt;/p>
&lt;p>query comment (recursive query, complex)&lt;/p>
&lt;h2 id="spring-boot-application-configure-port">spring boot application configure port
&lt;/h2>&lt;p>resource/application.properties&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">server&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">port&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">8081&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="authorizedprincipal-related">@AuthorizedPrincipal related
&lt;/h2>&lt;blockquote>
&lt;p>i defined &amp;ldquo;void likePost(Long id, @AuthenticationPrincipal User user);&amp;rdquo; in an interface, should its implementation method signature be &amp;ldquo;void likePost(Long id, @AuthenticationPrincipal User user)&amp;rdquo; or &amp;ldquo;void likePost(Long id, User user);&amp;rdquo; is enough?&lt;/p>
&lt;/blockquote>
&lt;p>The implementation method signature should match the interface declaration exactly, &lt;strong>including any annotations&lt;/strong>.&lt;/p>
&lt;p>The &lt;code>@AuthenticationPrincipal&lt;/code> annotation is significant and should be retained in the implementation for the following reasons:&lt;/p>
&lt;ol>
&lt;li>Consistency: The implementation should match the interface definition to maintain consistency and avoid confusion.&lt;/li>
&lt;li>Functionality: The &lt;code>@AuthenticationPrincipal&lt;/code> annotation is typically used in Spring Security to automatically resolve the currently authenticated user. Removing it might affect how the user object is populated or handled by the framework.&lt;/li>
&lt;li>Clarity: Keeping the annotation in the implementation makes it clear to other developers that this method expects the authenticated user to be injected.&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>idea auto implemenation doesn&amp;rsquo;t retain the @AuthenticationPrincipal annotation&lt;/p>
&lt;/blockquote>
&lt;p>You&amp;rsquo;re right to notice that discrepancy. IDEs like IntelliJ IDEA sometimes don&amp;rsquo;t automatically retain certain annotations when generating method implementations. This is a known limitation in some IDE auto-implementation features.&lt;/p>
&lt;p>Understand the issue: The IDE&amp;rsquo;s auto-implementation feature is dropping the &lt;code>@AuthenticationPrincipal&lt;/code> annotation, which is not the desired behavior.&lt;/p>
&lt;p>Correct approach: You should manually add the annotation back to the implementation method.&lt;/p>
&lt;h2 id="case-in-sql">CASE in sql
&lt;/h2>&lt;p>Case statements in SQL allow you to &lt;strong>add conditional logic&lt;/strong> to your queries. They&amp;rsquo;re useful for categorizing data or performing different calculations based on specific conditions.&lt;/p>
&lt;p>The general syntax is:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">CASE&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">WHEN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">condition1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">THEN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">result1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">WHEN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">condition2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">THEN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">result2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">ELSE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">default_result&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">END&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Key points:&lt;/p>
&lt;ol>
&lt;li>You can have multiple WHEN-THEN pairs.&lt;/li>
&lt;li>The ELSE clause is optional. If omitted and no conditions are met, it returns NULL.&lt;/li>
&lt;li>CASE statements can be used in SELECT, WHERE, and ORDER BY clauses.&lt;/li>
&lt;/ol>
&lt;p>Here&amp;rsquo;s a simple example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">SELECT&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">product_name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">price&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">CASE&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">WHEN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">price&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">THEN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;Low&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">WHEN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">price&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AND&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">price&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">50&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">THEN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;Medium&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">ELSE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;High&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">END&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">price_category&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">products&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This query categorizes products based on their price.&lt;/p>
&lt;h2 id="join-and-left-join">JOIN and LEFT JOIN
&lt;/h2>&lt;p>JOIN and LEFT JOIN are not the same. They are different types of SQL join operations that produce different results. Let me explain the key differences:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>JOIN (or INNER JOIN):&lt;/p>
&lt;ul>
&lt;li>Returns only the rows that have matching values in both tables.&lt;/li>
&lt;li>If a row doesn&amp;rsquo;t have a match in the other table, it&amp;rsquo;s &lt;strong>excluded&lt;/strong> from the result set.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>LEFT JOIN (or LEFT OUTER JOIN):&lt;/p>
&lt;ul>
&lt;li>Returns all rows from the left table, and the matched rows from the right table.&lt;/li>
&lt;li>If there&amp;rsquo;s no match in the right table, the result still contains the row from the left table, with &lt;strong>NULL values&lt;/strong> for the right table&amp;rsquo;s columns.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>Here&amp;rsquo;s an example to illustrate:&lt;/p>
&lt;p>Suppose we have two tables:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Employees&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Projects&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">ID&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ID&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ProjectName&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">EmployeeID&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">-- ---- -- ----------- ----------
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Alice&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Alpha&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Bob&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Beta&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Charlie&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Gamma&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Delta&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Using INNER JOIN:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ProjectName&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Employees&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">JOIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Projects&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ON&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ID&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">EmployeeID&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Result:&lt;/p>
&lt;pre tabindex="0">&lt;code>Name ProjectName
---- -----------
Alice Alpha
Alice Beta
Bob Gamma
&lt;/code>&lt;/pre>&lt;p>Using LEFT JOIN:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ProjectName&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Employees&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">LEFT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">JOIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Projects&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ON&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ID&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">EmployeeID&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Result:&lt;/p>
&lt;pre tabindex="0">&lt;code>Name ProjectName
---- -----------
Alice Alpha
Alice Beta
Bob Gamma
Charlie NULL
&lt;/code>&lt;/pre>&lt;p>Key differences in the results:&lt;/p>
&lt;ol>
&lt;li>INNER JOIN doesn&amp;rsquo;t include Charlie because he has no matching project.&lt;/li>
&lt;li>LEFT JOIN includes Charlie with a NULL project.&lt;/li>
&lt;li>Neither join includes the Delta project because it has no matching employee.&lt;/li>
&lt;/ol>
&lt;p>In summary, use JOIN when you only want results with matches in both tables, and use LEFT JOIN when you want all rows from the left table, regardless of whether there&amp;rsquo;s a match in the right table.&lt;/p>
&lt;p>Would you like me to elaborate on any part of this explanation or provide more examples?&lt;/p>
&lt;h2 id="extra-query-for-user-opinions">extra query for user opinions
&lt;/h2>&lt;blockquote>
&lt;p>will using an extra query to get user opinion information rather than querying it by above method be more efficient?&lt;/p>
&lt;/blockquote>
&lt;p>That&amp;rsquo;s an excellent question. The efficiency of using a single query versus multiple queries depends on several factors. Let&amp;rsquo;s analyze both approaches:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Single Query Approach (current method):&lt;/p>
&lt;ul>
&lt;li>Pros:
&lt;ul>
&lt;li>Reduces the number of database round trips&lt;/li>
&lt;li>Can be more efficient for &lt;strong>smaller result sets&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Cons:
&lt;ul>
&lt;li>More complex query&lt;/li>
&lt;li>Potential for larger result set due to the LEFT JOIN&lt;/li>
&lt;li>May be slower for large datasets &lt;strong>due to the join operation&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Separate Queries Approach:&lt;/p>
&lt;ul>
&lt;li>Pros:
&lt;ul>
&lt;li>Simpler, more focused queries&lt;/li>
&lt;li>Can be more efficient for large datasets&lt;/li>
&lt;li>Allows for more granular caching strategies&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Cons:
&lt;ul>
&lt;li>Multiple database round trips&lt;/li>
&lt;li>Potential for N+1 query problem if not implemented carefully&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>To determine which approach is more efficient, consider the following factors:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Dataset size:&lt;/strong> For smaller datasets, the single query approach might be faster. For larger datasets, separate queries could perform better.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Query complexity:&lt;/strong> If the join operation significantly complicates the query or slows down execution, separate queries might be preferable.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Caching strategies:&lt;/strong> Separate queries allow for more granular caching of post information and user opinions.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Network latency:&lt;/strong> If network latency between your application and database is high, fewer round trips (single query) might be beneficial.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Database indexes:&lt;/strong> Proper indexing can significantly impact the performance of both approaches.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Given these considerations, here&amp;rsquo;s a potential implementation using separate queries:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">PostService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">PostRepository&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">postRepository&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">OpinionRepository&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">opinionRepository&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Constructor injection...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Page&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">PostInfo&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">getPostsInSpace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Long&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">spaceId&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Long&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">userId&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">page&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Pageable&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pageable&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">PageRequest&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">of&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">page&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Page&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">PostInfo&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">posts&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">postRepository&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">findPostsInSpace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">spaceId&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pageable&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Long&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">postIds&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">posts&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getContent&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="na">stream&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">PostInfo&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">getId&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">collect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Collectors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">toList&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Long&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">UserOpinion&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">opinions&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">opinionRepository&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">findUserOpinionsByPostIds&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">userId&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">postIds&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">posts&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getContent&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="na">forEach&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">post&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">post&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">setUserOpinion&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">opinions&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getOrDefault&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">post&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getId&lt;/span>&lt;span class="p">(),&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">UserOpinion&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">NO_OPINION&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">posts&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nd">@Repository&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">interface&lt;/span> &lt;span class="nc">PostRepository&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">extends&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">JpaRepository&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Post&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Long&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;SELECT NEW com.heslin.postopia.dto.post.PostInfo(p.id, p.subject, p.content, p.positiveCount, p.negativeCount, p.commentCount, u.username, u.nickname, u.avatar) FROM Post p JOIN p.user u JOIN p.space s WHERE s.id = :spaceId ORDER BY p.createdAt DESC&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Page&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">PostInfo&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">findPostsInSpace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nd">@Param&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;spaceId&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Long&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">spaceId&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Pageable&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pageable&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nd">@Repository&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">interface&lt;/span> &lt;span class="nc">OpinionRepository&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">extends&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">JpaRepository&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Opinion&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Long&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;SELECT o.post.id as postId, CASE WHEN o.isPositive = true THEN &amp;#39;LIKE&amp;#39; WHEN o.isPositive = false THEN &amp;#39;DISLIKE&amp;#39; ELSE &amp;#39;NO_OPINION&amp;#39; END as opinion FROM Opinion o WHERE o.user.id = :userId AND o.post.id IN :postIds&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Object&lt;/span>&lt;span class="o">[]&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">findUserOpinionsByPostIds&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nd">@Param&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;userId&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Long&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">userId&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nd">@Param&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;postIds&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Long&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">postIds&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">default&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Long&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">UserOpinion&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">findUserOpinionsByPostIds&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Long&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">userId&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Long&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">postIds&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">findUserOpinionsByPostIds&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">userId&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">postIds&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="na">stream&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">collect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Collectors&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">toMap&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Long&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">]&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">UserOpinion&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">valueOf&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">]&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">));&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This approach allows you to:&lt;/p>
&lt;ol>
&lt;li>Fetch posts without the complexity of joining with the opinions table.&lt;/li>
&lt;li>Retrieve user opinions for only the fetched posts in a separate query.&lt;/li>
&lt;li>Combine the results in memory.&lt;/li>
&lt;/ol>
&lt;p>To determine which method is more efficient for your specific use case, I recommend:&lt;/p>
&lt;ol>
&lt;li>Implement both approaches.&lt;/li>
&lt;li>Create performance tests with various dataset sizes and query patterns.&lt;/li>
&lt;li>Profile the application to measure actual performance differences.&lt;/li>
&lt;li>Consider the maintainability and readability of each approach in your codebase.&lt;/li>
&lt;/ol>
&lt;p>Remember, premature optimization can lead to unnecessary complexity. Start with the approach that&amp;rsquo;s most straightforward for your team to implement and maintain, then optimize if and when performance becomes an issue based on real-world usage patterns.&lt;/p>
&lt;h2 id="common-table-expressions">Common Table Expressions
&lt;/h2>&lt;p>Common Table Expressions (CTEs) in SQL are temporary named result sets that you can reference within a SELECT, INSERT, UPDATE, DELETE, or MERGE statement. They are defined using a WITH clause at the beginning of a query. Here&amp;rsquo;s a brief explanation of CTEs:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Syntax:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">WITH&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">cte_name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">...&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">cte_name&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Key features:&lt;/p>
&lt;ul>
&lt;li>Improve readability by breaking complex queries into simpler, named parts&lt;/li>
&lt;li>Can be referenced multiple times within the main query&lt;/li>
&lt;li>Useful for recursive queries&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">WITH&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sales_summary&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">AS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">product_id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">SUM&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">quantity&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">total_quantity&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">SUM&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">price&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">quantity&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">as&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">total_revenue&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sales&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">GROUP&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">BY&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">product_id&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">product_name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">total_quantity&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">total_revenue&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">products&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">JOIN&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sales_summary&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ON&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">product_id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">product_id&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>CTEs are particularly useful for complex queries, hierarchical data, and when you need to reference the same subquery multiple times.&lt;/p>
&lt;p>Would you like me to elaborate on any specific aspect of Common Table Expressions?&lt;/p></description></item><item><title>【Postopia Dev Log】Week 3</title><link>https://dyhes.github.io/p/postopia-dev-logweek-3/</link><pubDate>Fri, 16 Aug 2024 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/postopia-dev-logweek-3/</guid><description>&lt;h1 id="week3">Week3
&lt;/h1>&lt;p>写评论查询的时候遇到了递归查询和递归结构构建的问题，这样的问题是表层学习而不真正深入使用知识、框架时难以遇到并学习如何解决的。&lt;/p>
&lt;h2 id="enum-in-query">enum in @Query
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Query&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;select new com.heslin.postopia.dto.post.PostSummary(p.subject, p.positive_count, p.negative_count, p.comment_count, u.username, u.nickname, u.avatar) from Post p JOIN p.user u where p.space_id = :id and p.status != com.heslin.postopia.enums.PostStatus.DRAFT&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="record">record
&lt;/h2>&lt;h3 id="generics">Generics
&lt;/h3>&lt;p>Records in Java can be combined with generics. Records, introduced in Java 14 as a preview feature and made stable in Java 16, provide a concise way to model immutable data. Generics allow types (classes and interfaces) to be parameters when defining classes, interfaces, and methods. Combining these two can lead to more flexible and reusable code.&lt;/p>
&lt;p>Here is an example of how you can define and use a generic record in Java:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Define a generic record&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">record&lt;/span> &lt;span class="nc">Pair&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">K&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// Usage example&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">Main&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Pair&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pair&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Pair&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;age&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">30&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Key: &amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pair&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">key&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Value: &amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">pair&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">value&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this example:&lt;/p>
&lt;ol>
&lt;li>&lt;code>Pair&amp;lt;K, V&amp;gt;&lt;/code> is a generic record with two type parameters, &lt;code>K&lt;/code> and &lt;code>V&lt;/code>.&lt;/li>
&lt;li>The &lt;code>Pair&lt;/code> record has two components, &lt;code>key&lt;/code> and &lt;code>value&lt;/code>, of types &lt;code>K&lt;/code> and &lt;code>V&lt;/code> respectively.&lt;/li>
&lt;li>When creating an instance of &lt;code>Pair&lt;/code>, you specify the actual types to use, such as &lt;code>String&lt;/code> and &lt;code>Integer&lt;/code> in this case.&lt;/li>
&lt;li>You can then use the &lt;code>key()&lt;/code> and &lt;code>value()&lt;/code> methods to access the components of the record.&lt;/li>
&lt;/ol>
&lt;p>This example illustrates how generics can be seamlessly integrated with records to create versatile and type-safe data structures.&lt;/p>
&lt;h3 id="extension">Extension
&lt;/h3>&lt;p>No, records in Java cannot be extended. Records are implicitly &lt;code>final&lt;/code>, meaning they cannot be subclassed. This design choice aligns with the primary purpose of records, which is to provide a simple and concise way to create immutable data carriers. Allowing inheritance would complicate this model and could undermine the immutability guarantees that records provide.&lt;/p>
&lt;p>Here&amp;rsquo;s a brief overview of some key characteristics of records:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Immutability&lt;/strong>: Records are designed to be immutable. All fields in a record are implicitly &lt;code>private&lt;/code> and &lt;code>final&lt;/code>.&lt;/li>
&lt;li>&lt;strong>Compact Syntax&lt;/strong>: Records provide a compact syntax for declaring classes that are primarily used to hold data.&lt;/li>
&lt;li>&lt;strong>Final and Non-Extendable&lt;/strong>: Records are implicitly &lt;code>final&lt;/code>, meaning you cannot extend a record class.&lt;/li>
&lt;/ol>
&lt;p>If you need to share common functionality or data among multiple types, consider using composition or interfaces instead of inheritance. Here is an example using composition:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Common functionality encapsulated in a class&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">CommonData&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">commonField&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">CommonData&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">commonField&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">commonField&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">commonField&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">getCommonField&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">commonField&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// Record using composition&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">record&lt;/span> &lt;span class="nc">SpecializedRecord&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">specificField&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">CommonData&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">commonData&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">Main&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">static&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">CommonData&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">commonData&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">CommonData&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Shared Data&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">SpecializedRecord&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">record&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">SpecializedRecord&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Specific Data&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">commonData&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Specific Field: &amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">record&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">specificField&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Common Field: &amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">record&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">commonData&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="na">getCommonField&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this example, the &lt;code>CommonData&lt;/code> class encapsulates the shared functionality, and the &lt;code>SpecializedRecord&lt;/code> record uses composition to include this common data. This approach maintains the benefits of immutability and concise syntax while avoiding the pitfalls of inheritance.&lt;/p>
&lt;h2 id="break-circular-dependencies">Break circular dependencies
&lt;/h2>&lt;p>In Spring Boot, it&amp;rsquo;s generally not advisable to have two services autowire each other as fields because it can create a circular dependency. Circular dependencies can make your application context fail to start and are generally considered a bad design practice.&lt;/p>
&lt;p>However, if you still need to achieve this, there are some workaround strategies. Here are a few approaches:&lt;/p>
&lt;h3 id="1-setter-injection">1. &lt;strong>Setter Injection&lt;/strong>
&lt;/h3>&lt;p>This method uses setter methods instead of field injection to avoid circular dependencies.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">ServiceA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ServiceB&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">serviceB&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Autowired&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">setServiceB&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ServiceB&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">serviceB&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">serviceB&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">serviceB&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">methodA&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">serviceB&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">methodB&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nd">@Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">ServiceB&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ServiceA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">serviceA&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Autowired&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">setServiceA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ServiceA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">serviceA&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">serviceA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">serviceA&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">methodB&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">serviceA&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">methodA&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-lazy-annotation">2. &lt;strong>&lt;code>@Lazy&lt;/code> Annotation&lt;/strong>
&lt;/h3>&lt;p>You can use the &lt;code>@Lazy&lt;/code> annotation to delay the initialization of one of the services, breaking the circular dependency.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">ServiceA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ServiceB&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">serviceB&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Autowired&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">ServiceA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nd">@Lazy&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ServiceB&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">serviceB&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">serviceB&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">serviceB&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">methodA&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">serviceB&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">methodB&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nd">@Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">ServiceB&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ServiceA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">serviceA&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Autowired&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">ServiceB&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nd">@Lazy&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ServiceA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">serviceA&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">serviceA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">serviceA&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">methodB&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">serviceA&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">methodA&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="3-redesign-your-services">3. &lt;strong>Redesign Your Services&lt;/strong>
&lt;/h3>&lt;p>Often, circular dependencies are a sign that your service design needs to be refactored. Consider whether you can split responsibilities differently to avoid the circular dependency. For example, you could introduce a third service or a common interface.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">ServiceA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">CommonService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">commonService&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Autowired&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">ServiceA&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CommonService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">commonService&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">commonService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">commonService&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">methodA&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">commonService&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">commonMethod&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nd">@Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">ServiceB&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">CommonService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">commonService&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Autowired&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">ServiceB&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CommonService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">commonService&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">commonService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">commonService&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">methodB&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">commonService&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">commonMethod&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nd">@Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">CommonService&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">commonMethod&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Common logic here&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="4-application-context">4. &lt;strong>Application Context&lt;/strong>
&lt;/h3>&lt;p>You can also manually fetch the beans from the application context, but this is generally not recommended and should be used as a last resort.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">ServiceA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">implements&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ApplicationContextAware&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ServiceB&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">serviceB&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ApplicationContext&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">applicationContext&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Override&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">setApplicationContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ApplicationContext&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">applicationContext&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">throws&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">BeansException&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">applicationContext&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">applicationContext&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@PostConstruct&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">init&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">serviceB&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">applicationContext&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">getBean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ServiceB&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">methodA&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">serviceB&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">methodB&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nd">@Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">ServiceB&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">final&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ServiceA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">serviceA&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Autowired&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">ServiceB&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ServiceA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">serviceA&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">serviceA&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">serviceA&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">methodB&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">serviceA&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">methodA&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="conclusion">Conclusion
&lt;/h3>&lt;p>While you can technically create circular dependencies using these methods, it&amp;rsquo;s usually better to refactor your code to avoid such designs. Circular dependencies can make your code harder to understand, test, and maintain. Consider whether there are better ways to structure your services to keep them decoupled.&lt;/p>
&lt;h2 id="recursive-model-query">Recursive Model Query
&lt;/h2>&lt;p>Check post with the same name for details&lt;/p></description></item><item><title>【Postopia Dev Log】Week 2</title><link>https://dyhes.github.io/p/postopia-dev-logweek-2/</link><pubDate>Fri, 19 Jul 2024 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/postopia-dev-logweek-2/</guid><description>&lt;p>按部就班进行开发，发现自己可能会在一些自己认知范围内的性能优化点特别在意，又会觉得优化需要对语言底层有深刻的认知，接近于一个无穷无尽的过程，然后对自己的语言功底感到焦虑。&lt;/p>
&lt;h2 id="delete-method">Delete method
&lt;/h2>&lt;p>Yes, derived delete methods in Spring Data JPA repositories can return a boolean value. When you define a derived delete method to return a boolean, it will indicate whether any records were actually deleted.&lt;/p>
&lt;h2 id="entitylistenersauditingentitylistenerclass">@EntityListeners(AuditingEntityListener.class)
&lt;/h2>&lt;p>除&lt;/p>
&lt;ul>
&lt;li>@EnableJpaAuditting&lt;/li>
&lt;li>@CreateDate
还需要加上：&lt;/li>
&lt;li>&lt;strong>@EntityListeners(AuditingEntityListener.class)&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h2 id="data-transfer-objects">Data Transfer Objects 
&lt;/h2>&lt;p>query only the needed fields in Spring Data JPA for several reasons:&lt;/p>
&lt;h3 id="performance-optimization">Performance optimization:
&lt;/h3>&lt;ul>
&lt;li>By querying only the required fields, you reduce the amount of data transferred between the database and your application, which can improve performance, especially for large datasets.&lt;/li>
&lt;/ul>
&lt;h3 id="reduced-network-traffic">Reduced network traffic:
&lt;/h3>&lt;ul>
&lt;li>Transferring only the necessary data minimizes network usage, which is particularly beneficial in distributed systems or when dealing with remote clients.&lt;/li>
&lt;/ul>
&lt;h3 id="separation-of-concerns">Separation of concerns:
&lt;/h3>&lt;ul>
&lt;li>DTOs help separate the data representation used in your application’s business logic from the underlying database entities, providing a clear boundary between layers.&lt;/li>
&lt;/ul>
&lt;h3 id="flexibility-and-maintainability">Flexibility and maintainability:
&lt;/h3>&lt;ul>
&lt;li>DTOs allow you to shape the data according to specific use cases, making it easier to evolve your API without affecting the underlying data model.&lt;/li>
&lt;/ul>
&lt;h3 id="security">Security:
&lt;/h3>&lt;ul>
&lt;li>By using DTOs, you can control which data is exposed to the client, reducing the risk of accidentally exposing sensitive information.&lt;/li>
&lt;/ul>
&lt;h3 id="avoid-lazy-loading-issues">Avoid lazy loading issues:
&lt;/h3>&lt;ul>
&lt;li>When working with JPA entities, lazy-loaded associations can cause performance problems or errors if accessed outside of a transaction. DTOs help avoid these issues by containing only the required data.&lt;/li>
&lt;/ul>
&lt;h2 id="var-keyword">&lt;code>Var&lt;/code> keyword
&lt;/h2>&lt;p>In Java, the var keyword was introduced in &lt;strong>Java 10&lt;/strong> as part of the &lt;strong>Local Variable Type Inference feature&lt;/strong>. It allows you to declare local variables without explicitly specifying their type. The compiler infers the type &lt;strong>based on the initialization expression&lt;/strong>.
Here are some key points about var in Java:&lt;/p>
&lt;ul>
&lt;li>usage&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">variableName&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">initialValue&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Scope: 
var can only be used for &lt;strong>local variables&lt;/strong> inside methods or loops. It cannot be used for fields, method parameters, or return types.&lt;/li>
&lt;li>Initialization:
Variables declared with var must be &lt;strong>initialized in the same statement&lt;/strong>.&lt;/li>
&lt;li>Type Inference:
The compiler infers the type based on the right-hand side of the assignment.&lt;/li>
&lt;li>Limitations:
&lt;ul>
&lt;li>Cannot be used with null literals&lt;/li>
&lt;li>Cannot be used with array initializers&lt;/li>
&lt;li>Cannot be used in a compound declaration (declaring multiple variables in one statement)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Examples&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Basic usage&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">var&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;John&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// inferred as String&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">var&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">30&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// inferred as int&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">var&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// inferred as ArrayList&amp;lt;String&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// In a for loop&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">var&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">10&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// With lambda expressions&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">var&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">comparator&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s2&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">compareTo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s2&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// With try-with-resources&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">try&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">var&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">reader&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">BufferedReader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">FileReader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;file.txt&amp;#34;&lt;/span>&lt;span class="p">)))&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Use reader&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Benefits of using var:
&lt;ul>
&lt;li>Reduces boilerplate code, especially with long type names.&lt;/li>
&lt;li>Improves &lt;strong>readability&lt;/strong> in some cases, particularly with generic types.&lt;/li>
&lt;li>Allows the type to change without changing the variable declaration.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Considerations:
&lt;ul>
&lt;li>Use var judiciously. Sometimes explicit type declarations can improve code clarity.&lt;/li>
&lt;li>var doesn’t make Java a dynamically-typed language. The type is still &lt;strong>determined at compile-time&lt;/strong>.&lt;/li>
&lt;li>IDEs can usually show you the inferred type, which helps with code understanding.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="other-local-variable-type-inference-feature">Other Local Variable Type Inference feature
&lt;/h2>&lt;ul>
&lt;li>Diamond Operator (&amp;lt;&amp;gt;):
Introduced in Java 7, it allows type inference for generic class instantiation.
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// Instead of new ArrayList&amp;lt;String&amp;gt;() &lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Method References:
Introduced in Java 8, method references work with type inference.
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">names&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Arrays&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">asList&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Alice&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;Bob&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;Charlie&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="n">names&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">forEach&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">println&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Try-with-resources
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="k">try&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">var&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">input&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">FileInputStream&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;file.txt&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Use input&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="repository-layer-referencing">Repository Layer Referencing
&lt;/h2>&lt;h3 id="one-repository-and-multiple-services">One @Repository and Multiple @Services
&lt;/h3>&lt;h4 id="pros">Pros
&lt;/h4>&lt;ul>
&lt;li>Promotes &lt;strong>separation of concerns&lt;/strong>&lt;/li>
&lt;li>Follows the &lt;strong>Single Responsibility Principle&lt;/strong>&lt;/li>
&lt;li>Can lead to better code organization and maintainability&lt;/li>
&lt;li>Easier to manage &lt;strong>transactions&lt;/strong> across multiple services&lt;/li>
&lt;/ul>
&lt;h4 id="cons">Cons
&lt;/h4>&lt;ul>
&lt;li>May require more classes and interfaces&lt;/li>
&lt;li>Can potentially lead to more complex dependency injection&lt;/li>
&lt;/ul>
&lt;h3 id="multiple-repositories">Multiple @Repositories
&lt;/h3>&lt;h4 id="pros-1">Pros
&lt;/h4>&lt;ul>
&lt;li>Can &lt;strong>simplify&lt;/strong> the service layer if operations frequently require data from multiple repositories&lt;/li>
&lt;li>Reduces the number of classes and interfaces&lt;/li>
&lt;li>May be more straightforward for simpler applications&lt;/li>
&lt;/ul>
&lt;h4 id="cons-1">⠀Cons
&lt;/h4>&lt;ul>
&lt;li>Can lead to a “fat” service class with too many responsibilities&lt;/li>
&lt;li>May make it &lt;strong>harder to maintain&lt;/strong> and test the service class&lt;/li>
&lt;li>Could potentially &lt;strong>violate&lt;/strong> the Single Responsibility Principle&lt;/li>
&lt;/ul>
&lt;h3 id="considerations">Considerations
&lt;/h3>&lt;p>Generally speaking, it’s often considered a good practice to follow &lt;strong>the first approach&lt;/strong> (one @Repository and multiple @Services) for the following reasons:&lt;/p>
&lt;ul>
&lt;li>Better separation of concerns: Each service class can focus on a specific domain or set of related operations.&lt;/li>
&lt;li>Improved maintainability: Smaller, more focused classes are usually easier to understand and maintain.&lt;/li>
&lt;li>Easier testing: With more granular services, it’s easier to write unit tests and mock dependencies.&lt;/li>
&lt;li>Flexibility: It’s easier to reuse and combine services in different ways.&lt;/li>
&lt;li>Scalability: As your application grows, it’s easier to add new features or modify existing ones without affecting other parts of the system.&lt;/li>
&lt;/ul>
&lt;p>However, the best approach &lt;strong>depends on your specific use case&lt;/strong>. If your application is small and simple, or if a particular service genuinely needs to work with multiple repositories directly, then referencing multiple repositories in a service class might be appropriate.&lt;/p>
&lt;p>In conclusion, while referencing one @Repository and multiple @Services in a @Service class is often a good practice, the most important thing is to choose an approach that makes sense for your application’s architecture and maintainability goals.&lt;/p>
&lt;h2 id="long-or-long"> Long or long
&lt;/h2>&lt;p>In Java, it’s &lt;strong>generally recommended&lt;/strong> to use the primitive type long instead of the wrapper class Long in method signatures, unless you have a &lt;strong>specific reason&lt;/strong> to use the object wrapper. Here’s why:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Performance&lt;/strong>: Primitive types are more efficient in terms of memory usage and performance. They don’t require object creation or autoboxing/unboxing.&lt;/li>
&lt;li>&lt;strong>Simplicity&lt;/strong>: Using primitives makes the code simpler and more straightforward.&lt;/li>
&lt;li>&lt;strong>Null safety&lt;/strong>: Primitive types can’t be null, which can prevent null pointer exceptions.&lt;/li>
&lt;/ul>
&lt;p>However, there are cases where using Long might be preferable:&lt;/p>
&lt;ul>
&lt;li>When &lt;strong>null values are meaningful&lt;/strong>: If you need to represent the absence of a value, Long can be null while long cannot.&lt;/li>
&lt;li>In &lt;strong>collections&lt;/strong>: Java collections (like ArrayList or HashMap) require object types, so you’d use Long in these cases.&lt;/li>
&lt;li>When working with &lt;strong>generics&lt;/strong>: Generics in Java don’t work with primitive types, so you’d need to use Long in these situations.&lt;/li>
&lt;li>In certain APIs or frameworks: Some APIs or frameworks might require the use of wrapper classes.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Preferred for most cases&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">methodWithLong&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">long&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// ...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// Use when null is a meaningful value&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">methodWithLongObject&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Long&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Handle null case&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Handle non-null case&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In summary, use long by default for better performance and simplicity, but don’t hesitate to use Long when the situation calls for it, such as when dealing with nullable values or working with Java collections and generics.&lt;/p>
&lt;h2 id="check-or-not">Check Or Not
&lt;/h2>&lt;h3 id="checking-existence-before-update">Checking existence before update
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">repository&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">existsById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">repository&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">save&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">entity&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">throw&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">EntityNotFoundException&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Entity not found&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="pros-2">Pros
&lt;/h4>&lt;ul>
&lt;li>Provides &lt;strong>more control&lt;/strong> over the flow of your application.&lt;/li>
&lt;li>Allows you to give &lt;strong>more specific feedback&lt;/strong> to the user (e.g., “User not found” instead of a generic error).&lt;/li>
&lt;li>Can be more efficient if you have &lt;strong>additional logic&lt;/strong> that depends on the entity’s existence.&lt;/li>
&lt;/ul>
&lt;h4 id="cons-2">⠀Cons
&lt;/h4>&lt;ul>
&lt;li>Requires an additional database query, which can &lt;strong>impact performance&lt;/strong>, especially in high-traffic scenarios.&lt;/li>
&lt;li>There’s a small chance of a &lt;strong>race condition&lt;/strong> between the check and the update (though this is rare in most applications).&lt;/li>
&lt;/ul>
&lt;h3 id="handling-the-update-exception-directly">Handling the update exception directly
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="k">try&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">repository&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">save&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">entity&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">catch&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">EntityNotFoundException&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Handle the case where the entity doesn&amp;#39;t exist&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="pros-3">Pros
&lt;/h4>&lt;ul>
&lt;li>More &lt;strong>straightforward&lt;/strong> code, following the “it’s easier to ask forgiveness than permission” principle.&lt;/li>
&lt;li>Potentially more &lt;strong>efficient&lt;/strong> as it avoids an extra database query.&lt;/li>
&lt;li>&lt;strong>Eliminates&lt;/strong> the possibility of race conditions between checking and updating.&lt;/li>
&lt;/ul>
&lt;h4 id="cons-3">⠀Cons
&lt;/h4>&lt;ul>
&lt;li>&lt;strong>Less control&lt;/strong> over the specific error message or handling.&lt;/li>
&lt;li>May &lt;strong>catch other unexpected exceptions&lt;/strong> that you didn’t intend to handle in the same way.&lt;/li>
&lt;/ul>
&lt;h3 id="recommendation">Recommendation
&lt;/h3>&lt;ul>
&lt;li>For most simple CRUD operations, handling the exception directly is often sufficient and more efficient.&lt;/li>
&lt;li>Consider checking existence first if:
&lt;ul>
&lt;li>You need to provide very specific feedback to the user.&lt;/li>
&lt;li>You have complex logic that depends on whether the entity exists or not.&lt;/li>
&lt;li>You’re in a scenario where the extra database query doesn’t significantly impact performance.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>In &lt;strong>high-performance&lt;/strong> systems with many updates, handling the exception might be preferable to avoid the extra query.&lt;/li>
&lt;li>If you’re using optimistic locking (e.g., with @Version), you might want to handle OptimisticLockingFailureException separately, as this indicates a concurrent modification rather than a non-existent entity.&lt;/li>
&lt;li>Consider your specific use case: if updates to non-existent entities are rare, handling the exception might be cleaner. If they’re common, checking first could provide a better user experience.&lt;/li>
&lt;/ul>
&lt;h2 id="transactional-on-repository-layer">Transactional on Repository Layer
&lt;/h2>&lt;p>By default, Spring Data JPA repository methods are transactional, but &lt;strong>only for read-only operations&lt;/strong>. For modifying operations (like updates), you need to explicitly mark the method or the surrounding service method with @Transactional.&lt;/p>
&lt;h2 id="derived-query-method">Derived Query Method
&lt;/h2>&lt;p>In Spring Data JPA, derived query methods &lt;strong>are primarily used for retrieving data&lt;/strong> rather than updating it. While derived query methods are very convenient for simple read operations, they do not support update operations directly.&lt;/p>
&lt;h2 id="malicious-use">Malicious Use
&lt;/h2>&lt;p>When developing and deploying a REST API, it’s essential to consider both valid scenarios and potential malicious use cases. &lt;/p>
&lt;ul>
&lt;li>&lt;strong>Security&lt;/strong>: Ignoring potential malicious use can leave your API vulnerable to attacks such as SQL injection, Cross-Site Scripting (XSS), Distributed Denial of Service (DDoS), and others.&lt;/li>
&lt;li>&lt;strong>Stability&lt;/strong>: Malicious uses can lead to unexpected behavior, crashes, or resource exhaustion, affecting the availability and reliability of your service.&lt;/li>
&lt;li>&lt;strong>Compliance&lt;/strong>: Many industries have regulations requiring secure handling of data, which includes protecting against malicious use.&lt;/li>
&lt;li>&lt;strong>User Trust&lt;/strong>: Users expect their data to be secure. Failing to protect against malicious use can damage your reputation and erode user trust.&lt;/li>
&lt;/ul>
&lt;h2 id="authenticatedprincipal-usage">@AuthenticatedPrincipal Usage
&lt;/h2>&lt;h3 id="passing-the-principal-from-the-controller">Passing the principal from the controller
&lt;/h3>&lt;h4 id="pros-4">Pros
&lt;/h4>&lt;ul>
&lt;li>Makes the flow of data more explicit.&lt;/li>
&lt;li>Easier to &lt;strong>unit test&lt;/strong> the service layer, as you can pass any principal object directly.&lt;/li>
&lt;li>Keeps the service layer completely &lt;strong>decoupled&lt;/strong> from Spring Security.&lt;/li>
&lt;/ul>
&lt;h4 id="cons-4">Cons
&lt;/h4>&lt;ul>
&lt;li>Requires passing the principal through &lt;strong>potentially many layers&lt;/strong> if you have a deep call hierarchy.&lt;/li>
&lt;li>May lead to repetitive code in controllers if many endpoints need to pass the principal.&lt;/li>
&lt;/ul>
&lt;h3 id="usingauthenticatedprincipalin-the-service-layer">Using@AuthenticatedPrincipal in the service layer
&lt;/h3>&lt;h4 id="pros-5">Pros
&lt;/h4>&lt;ul>
&lt;li>Keeps the service method signature clean and focused on business logic parameters.&lt;/li>
&lt;li>&lt;strong>Reduces coupling&lt;/strong> between the controller and service layer.&lt;/li>
&lt;li>Allows the service to be used in different contexts (e.g., scheduled tasks, message listeners) where a controller might not be involved.&lt;/li>
&lt;/ul>
&lt;h4 id="cons-5">Cons
&lt;/h4>&lt;ul>
&lt;li>May make unit testing the service layer slightly &lt;strong>more complex&lt;/strong>, as you need to mock the security context.&lt;/li>
&lt;li>Could be seen as &lt;strong>mixing concerns&lt;/strong> if you consider authentication a cross-cutting concern.&lt;/li>
&lt;/ul>
&lt;h3 id="recommendation-1">Recommendation
&lt;/h3>&lt;p>In general, using @AuthenticatedPrincipal in the service layer is often preferred because:&lt;/p>
&lt;ul>
&lt;li>It adheres to the Don’t Repeat Yourself (DRY) principle, avoiding the need to pass the principal in every controller method.&lt;/li>
&lt;li>It makes the service methods self-contained and more reusable in different contexts.&lt;/li>
&lt;li>It leverages Spring Security’s built-in capabilities, which are well-tested and maintained.&lt;/li>
&lt;/ul></description></item><item><title>【Postopia Dev Log】Day 5</title><link>https://dyhes.github.io/p/postopia-dev-logday-5/</link><pubDate>Fri, 12 Jul 2024 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/postopia-dev-logday-5/</guid><description>&lt;p>深入了解了@ManyToMany, @ManyToOne, @OneToMany, @OneToOne 这几个注解以及java中的日期时间及其在数据库里的使用&lt;/p>
&lt;p>定义了Comment, Space 等 model&lt;/p>
&lt;h2 id="id">@Id
&lt;/h2>&lt;p>The @Id annotation in JPA (Java Persistence API) is used to mark a field as the primary key of an entity.&lt;/p>
&lt;p>By default:&lt;/p>
&lt;ul>
&lt;li>Nullable:
&lt;ul>
&lt;li>@Id fields are generally not nullable. Primary keys are used to uniquely identify each record in a database table, so they must have a value.&lt;/li>
&lt;li>However, the exact behavior can depend on the underlying database and the specific JPA implementation.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Updatable:
&lt;ul>
&lt;li>@Id fields are typically not updatable after they are set.&lt;/li>
&lt;li>Once an entity is persisted with a primary key value, that value should not change for the lifetime of the entity.&lt;/li>
&lt;li>Changing the ID of an existing entity can lead to data integrity issues and is generally discouraged.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>It’s important to note:&lt;/p>
&lt;ul>
&lt;li>While the @Id itself doesn’t have properties for nullable or updatable, you can use additional annotations or configurations to modify the behavior:
&lt;ul>
&lt;li>You can use @Column(nullable = false) to explicitly specify that the field cannot be null (though this is usually the default for ID fields).&lt;/li>
&lt;li>You can use @Column(updatable = false) to explicitly specify that the field cannot be updated after initial persistence.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The exact behavior can also depend on how the ID is generated. For example, if you’re using @GeneratedValue for automatic ID generation, the field will initially be null until the entity is persisted, at which point the database or JPA provider will generate and set the ID value.&lt;/li>
&lt;li>Some JPA implementations might allow updates to ID fields in certain circumstances, but this is not standard behavior and should be avoided in most cases.&lt;/li>
&lt;/ul>
&lt;h2 id="set-or-list">Set or List
&lt;/h2>&lt;p>When deciding whether to use a Set or a List for @ManyToMany and @OneToMany relationships in JPA, there are several factors to consider, including the uniqueness requirement, ordering, and performance. Here is a breakdown of when to use each:&lt;/p>
&lt;h3 id="when-to-use-set">When to Use Set
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>Uniqueness&lt;/strong>
Set does not allow duplicate elements. If you want to ensure that the collection of related entities is unique, a Set is appropriate.&lt;/li>
&lt;li>&lt;strong>No Ordering&lt;/strong>
Set does not maintain the order of elements. If the order of the related entities does not matter, you can use a Set.&lt;/li>
&lt;li>&lt;strong>Performance&lt;/strong>
In general, Set operations like add, remove, and contains are faster than List operations because Set uses hashing or other mechanisms to enforce uniqueness.&lt;/li>
&lt;/ul>
&lt;h3 id="when-to-uselist">&lt;strong>When to Use&lt;/strong> &lt;strong>List&lt;/strong>
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>Ordering&lt;/strong>
List maintains the order of elements. If the order of the related entities matters, or you need to preserve the order in which elements are inserted, you should use a List.&lt;/li>
&lt;li>&lt;strong>Duplicates&lt;/strong>
List allows duplicate elements. If there is a scenario where duplicates are meaningful or required, then List is the appropriate choice.&lt;/li>
&lt;li>&lt;strong>Indexed Access&lt;/strong>
List allows indexed access to elements. If you need to frequently access elements by their index, a List would be more suitable.&lt;/li>
&lt;/ul>
&lt;h2 id="join-table-entity">Join Table Entity
&lt;/h2>&lt;p>Check the corresponding Independent post&lt;/p>
&lt;h2 id="dates-in-java">Dates in Java
&lt;/h2>&lt;p>Check the corresponding Independent post&lt;/p>
&lt;h2 id="confusion-about-fetchtypelazy">Confusion about FetchType.LAZY
&lt;/h2>&lt;p>Is the primary key of the referenced entity can be easily accessed even when the fetch is LAZY in @ManyToOne and @OneToOne of spring data jpa?&lt;/p>
&lt;blockquote>
&lt;p>Yes, the primary key of the referenced entity can still be easily accessed even when the fetch type is set to FetchType.LAZY in @ManyToOne and @OneToOne relationships in Spring Data JPA.&lt;/p>
&lt;p>When you configure a relationship with FetchType.LAZY, it means that the related entity is not immediately loaded from the database when the parent entity is fetched. Instead, it is loaded on demand when you actually try to access the relationship.&lt;/p>
&lt;p>However, accessing the primary key of the referenced entity does not require fetching the entire entity. The primary key value is typically stored as a foreign key in the parent entity, and &lt;strong>you can access this foreign key directly without triggering a lazy load of the related entity&lt;/strong>.&lt;/p>
&lt;/blockquote>
&lt;p>Is it the same for @ManyToMany and @OneToMany?&lt;/p>
&lt;blockquote>
&lt;p>GPT-4o:&lt;/p>
&lt;p>No.&lt;/p>
&lt;p>In a @ManyToMany relationship, a &lt;strong>join table&lt;/strong> is typically used to maintain the associations between the entities. When the fetch type is LAZY, the list of related entities is not loaded until you explicitly access it.&lt;/p>
&lt;p>In a @ManyToMany relationship, The foreign key parent_id is stored in the Child entity and &lt;strong>not directly accessible from the Parent entity without loading the children&lt;/strong>.&lt;/p>
&lt;p>In both cases, there isn’t a straightforward way to access the primary keys of the related entities without triggering a lazy load.&lt;/p>
&lt;/blockquote>
&lt;h2 id="entity-objectextension">Entity Object Extension
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nn">javax.persistence.MappedSuperclass&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kn">import&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nn">javax.persistence.Id&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kn">import&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nn">javax.persistence.GeneratedValue&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kn">import&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nn">javax.persistence.GenerationType&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kn">import&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nn">javax.persistence.Column&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nd">@MappedSuperclass&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">abstract&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">BaseEntity&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Id&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@GeneratedValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">strategy&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">GenerationType&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">IDENTITY&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Long&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Column&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;created_at&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">LocalDateTime&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">createdAt&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nd">@Column&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;updated_at&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">private&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">LocalDateTime&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">updatedAt&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// Getters and Setters&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="confusions-about-database">Confusions about database
&lt;/h2>&lt;ul>
&lt;li>In most cases, a simple COUNT() will be more efficient than retrieving detailed columns.&lt;/li>
&lt;li>the columns queried can have a significant impact on query time.
&lt;ul>
&lt;li>SELECT * is often slower than selecting specific columns, especially in large tables.&lt;/li>
&lt;li>Smaller data types (e.g., INT) are typically faster to retrieve than larger ones (e.g., TEXT or BLOB).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>【Postopia Dev Log】Day 6</title><link>https://dyhes.github.io/p/postopia-dev-logday-6/</link><pubDate>Fri, 12 Jul 2024 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/postopia-dev-logday-6/</guid><description>&lt;p>实现了创建空间和加入空间&lt;/p>
&lt;p>调试接口的时候报：&lt;/p>
&lt;p>failed to lazily initialize a collection of role: com.heslin.postopia.model.User.spaces: could not initialize proxy - no Session&lt;/p>
&lt;p>检查之后发现 UsernamePasswordAuthenticationToken 在处理过程中会调用principal 的 toString方法，导致了这个错误，自己重载User.toString 之后恢复正常。&lt;/p>
&lt;h2 id="polymorphic-query">Polymorphic Query
&lt;/h2>&lt;p>Check the corresponding post&lt;/p>
&lt;h2 id="java-enum">Java Enum
&lt;/h2>&lt;p>Check the corresponding post&lt;/p>
&lt;h2 id="pageable-and-sort">Pageable and Sort
&lt;/h2>&lt;p>Check the corresponding post&lt;/p>
&lt;h2 id="query-and-jpql">@Query and JPQL
&lt;/h2>&lt;p>Check the corresponding post&lt;/p></description></item><item><title>【Postopia Dev Log】Day 4</title><link>https://dyhes.github.io/p/postopia-dev-logday-4/</link><pubDate>Wed, 10 Jul 2024 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/postopia-dev-logday-4/</guid><description>&lt;img src="https://dyhes.github.io/covers/cover6.png" alt="Featured image of post 【Postopia Dev Log】Day 4" />&lt;p>忙于构建个人博客，没有什么进展&lt;/p>
&lt;h2 id="knowledge">Knowledge
&lt;/h2>&lt;h3 id="java-record">Java Record
&lt;/h3>&lt;p>Java records were &lt;strong>introduced in Java 14&lt;/strong> as a preview feature and became a s&lt;strong>tandard feature in Java 16&lt;/strong>. They provide a compact syntax for declaring classes that are used primarily to store data. Records are designed to reduce boilerplate code and make it easier to create &lt;strong>simple, immutable&lt;/strong> data carriers.
Syntax:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">record&lt;/span> &lt;span class="nc">Person&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Automatic generation:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>A constructor with parameters for all components&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Accessor methods for each component (e.g., name() and age())&lt;/p>
&lt;/li>
&lt;li>
&lt;p>equals() and hashCode() methods&lt;/p>
&lt;/li>
&lt;li>
&lt;p>toString() method
Immutability:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Records are implicitly final and cannot be extended.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The fields (components) of a record are final by default.
Constructors:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You can define custom constructors, including compact constructors.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A compact constructor doesn’t need to explicitly list all fields:&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">record&lt;/span> &lt;span class="nc">Person&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Person&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">throw&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">new&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">IllegalArgumentException&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Age cannot be negative&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Additional methods:You can add other methods to a record, just like in a regular class.
Limitations:&lt;/p>
&lt;ul>
&lt;li>Records cannot extend other classes (they implicitly extend java.lang.Record).&lt;/li>
&lt;li>They cannot declare instance fields other than the private final fields for the components of the state description.&lt;/li>
&lt;li>They cannot be abstract.&lt;/li>
&lt;/ul>
&lt;h3 id="internationalization">Internationalization
&lt;/h3>&lt;p>Internationalization (i18n) is typically handled on both the front end and the back end, but the approach and responsibilities can vary depending on the specific requirements of your application.&lt;/p>
&lt;p>In many modern web applications, the front end handles a significant portion of i18n, especially for single-page applications (SPAs) and client-heavy architectures. This approach allows for more responsive user experiences and reduces server load.&lt;/p>
&lt;p>However, some aspects of i18n are better suited for the back end, particularly when dealing with sensitive data, complex business logic, or when you need to generate localized content server-side.&lt;/p>
&lt;p>&lt;strong>Best practices&lt;/strong>&lt;/p>
&lt;p>Best practices often involve a combination of both:&lt;/p>
&lt;p>Use front-end i18n libraries for UI elements and client-side formatting.
Implement back-end i18n for database content, emails, and API responses.
Use content delivery networks (CDNs) or static file hosting for language resource files.
Consider using a translation management system (TMS) to streamline the translation process.&lt;/p></description></item><item><title>【Postopia Dev Log】Day 3</title><link>https://dyhes.github.io/p/postopia-dev-logday-3/</link><pubDate>Tue, 09 Jul 2024 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/postopia-dev-logday-3/</guid><description>&lt;img src="https://dyhes.github.io/covers/cover14.png" alt="Featured image of post 【Postopia Dev Log】Day 3" />&lt;p>遇到一个好像很有用的网站 &lt;a class="link" href="https://dzone.com/" target="_blank" rel="noopener"
>Programming &amp;amp; DevOps news, tutorials &amp;amp; tools&lt;/a>&lt;/p>
&lt;p>实现了一个BadRequestExceptionHandler&lt;/p>
&lt;p>Spring Security 有点复杂，没找到好的参考资料&lt;/p>
&lt;p>在claude 3.5的帮助下初步实现了基于简单jwt的Authentication&lt;/p>
&lt;p>测试filter的时候不小心调用了两次chain.doFilter导致返回的json数据是重复的两份
&lt;a class="link" href="https://stackoverflow.com/questions/73892445/duplicate-json-in-spring-boot-response" target="_blank" rel="noopener"
>Duplicate Json in Spring Boot Response&lt;/a>&lt;/p>
&lt;h2 id="knowledge">Knowledge
&lt;/h2>&lt;h3 id="keycloak">Keycloak
&lt;/h3>&lt;p>Keycloak is an open-source Identity and Access Management (IAM) solution developed by Red Hat. It provides a comprehensive set of features for managing authentication and authorization in modern applications.&lt;/p>
&lt;h4 id="key-features">Key Features
&lt;/h4>&lt;p>&lt;strong>1&lt;/strong> &lt;strong>Single Sign-On (SSO)&lt;/strong>: Keycloak allows users to authenticate once and access multiple applications without re-entering credentials.&lt;/p>
&lt;p>&lt;strong>2&lt;/strong> &lt;strong>Identity Brokering&lt;/strong>: It can integrate with external identity providers like Google, Facebook, or other SAML 2.0 or OpenID Connect providers.&lt;/p>
&lt;p>&lt;strong>3&lt;/strong> &lt;strong>User Federation&lt;/strong>: Keycloak can sync with existing LDAP or Active Directory servers.&lt;/p>
&lt;p>&lt;strong>4&lt;/strong> &lt;strong>Customizable Authentication&lt;/strong>: Supports various authentication mechanisms including password, OTP, and custom authenticators.&lt;/p>
&lt;p>&lt;strong>5&lt;/strong> &lt;strong>Fine-grained Authorization&lt;/strong>: Provides role-based access control (RBAC) and attribute-based access control (ABAC).&lt;/p>
&lt;p>&lt;strong>6&lt;/strong> &lt;strong>Admin Console&lt;/strong>: Offers a user-friendly interface for managing users, roles, clients, and realm settings.&lt;/p>
&lt;p>&lt;strong>7&lt;/strong> &lt;strong>Standard Protocols&lt;/strong>: Supports OAuth 2.0, OpenID Connect, and SAML 2.0.&lt;/p>
&lt;p>&lt;strong>8&lt;/strong> &lt;strong>Client Adapters&lt;/strong>: Provides adapters for easy integration with various application stacks.&lt;/p>
&lt;p>&lt;strong>9&lt;/strong> &lt;strong>Themes and Internationalization&lt;/strong>: Allows customization of login pages and supports multiple languages.&lt;/p>
&lt;p>&lt;strong>10&lt;/strong> &lt;strong>Social Login&lt;/strong>: Enables users to log in using their social media accounts.&lt;/p>
&lt;h3 id="oauth2">Oauth2
&lt;/h3>&lt;h4 id="involved-actors">Involved Actors
&lt;/h4>&lt;p>&lt;strong>i) Resource Server&lt;/strong>: The server hosting user-owned resources that are protected by OAuth2. The resource server validates the access-token and serves the protected resources.&lt;/p>
&lt;p>&lt;strong>ii) Resource Owner&lt;/strong>: Typically, the user of the application is the resource owner. The resource owner has the ability to grant or deny access to their own data hosted on the resource server.&lt;/p>
&lt;p>&lt;strong>iii) Authorization Server&lt;/strong>: The authorization server gets consent from the resource owner and issues access tokens to clients for accessing protected resources hosted by a resource server.&lt;/p>
&lt;p>&lt;strong>iv) Client&lt;/strong>: An application making API requests to perform actions on protected resources on behalf of the resource owner. Before it may do so, it must be authorized by the resource owner, and the authorization must be validated by resource server/authorization server. OAuth2 defines two client types, based on their ability to authenticate securely with the authorization server (i.e., ability to &lt;strong>maintain the confidentiality&lt;/strong> of their client credentials):&lt;/p>
&lt;p>&lt;strong>a)Confidential&lt;/strong>: Clients capable of maintaining the confidentiality of their credentials. Confidential clients are implemented on a secure server with restricted access to the client credentials (e.g., a web application running on a &lt;strong>web server&lt;/strong>).&lt;/p>
&lt;p>&lt;strong>b) Public&lt;/strong>: Clients incapable of maintaining the confidentiality of their credentials (e.g. an installed native application or a &lt;strong>web browser-based application&lt;/strong>), and incapable of secure client authentication via any other means.&lt;/p>
&lt;h4 id="authorization-grant-types">&lt;strong>Authorization Grant Types&lt;/strong>
&lt;/h4>&lt;p>To get the access token, the client obtains authorization from the resource owner. The authorization is expressed in the form of an &lt;strong>authorization grant, which the client uses to request the access token.&lt;/strong> OAuth2 defines four standard grant types: authorization code, implicit, resource owner password credentials, and client credentials. It also provides an extension mechanism for defining additional grant types.&lt;/p>
&lt;p>&lt;strong>i) Authorization Code Grant&lt;/strong>: this grant type is optimized for confidential clients (web application server). The authorization code flow &lt;strong>does not expose the access token to the resource owner’s browser&lt;/strong>. Instead, authorization is accomplished using an intermediary “authorization code” that is passed through the browser. This code must be exchanged for an access token before calls can be made to protected APIs.&lt;/p>
&lt;p>&lt;strong>ii) Implicit Grant&lt;/strong>: this grant type is suitable &lt;strong>for public clients&lt;/strong>. The implicit grant flow &lt;strong>does not accommodate refresh tokens&lt;/strong>. If the authorization server expires access tokens regularly, your application will need to run through the authorization flow whenever it needs access. In this flow, an access token is immediately returned to the client after a user grants the requested authorization. An &lt;strong>intermediate authorization code is not required&lt;/strong> as it is in the authorization code grant.&lt;/p>
&lt;p>&lt;strong>iii) Resource Owner Password Credentials&lt;/strong>: the resource owner password credentials grant type is suitable in cases where &lt;strong>the resource owner has a trust relationship with the client&lt;/strong>, and the resource owner agrees to share hise/her credentials (username, password) with the client. Then the client can use resources from the owner&amp;rsquo;s credentials to get the access token from the authorization server.&lt;/p>
&lt;p>&lt;strong>iv) Client Credentials&lt;/strong>: this grant type is suitable when &lt;strong>the client itself owns the data and does not need delegated access from a resource owner&lt;/strong>, or delegated access has already been granted to the application outside of a typical OAuth flow. In this flow, user consent is not involved. The client exchanges his client credentials to get an access token.&lt;/p>
&lt;h3 id="transactions">Transactions
&lt;/h3>&lt;p>A database transaction is a sequence of one or more database operations that are treated as a single unit of work. Transactions adhere to the ACID properties:&lt;/p>
&lt;p>&lt;strong>1&lt;/strong> &lt;strong>Atomicity&lt;/strong>: All operations in a transaction either complete successfully or fail altogether. There&amp;rsquo;s no partial completion.&lt;/p>
&lt;p>&lt;strong>2&lt;/strong> &lt;strong>Consistency&lt;/strong>: A transaction brings the database from one valid state to another. All rules and constraints must be satisfied.&lt;/p>
&lt;p>&lt;strong>3&lt;/strong> &lt;strong>Isolation&lt;/strong>: Concurrent execution of transactions results in a state that would be obtained if transactions were executed sequentially.&lt;/p>
&lt;p>&lt;strong>4&lt;/strong> &lt;strong>Durability&lt;/strong>: Once a transaction has been committed, it will remain so, even in the event of power loss, crashes, or errors.&lt;/p>
&lt;h4 id="isolation-level">Isolation level
&lt;/h4>&lt;p>Isolation levels define how transaction integrity is visible to other users and systems. They provide a trade-off between consistency and performance.&lt;/p>
&lt;h4 id="1-read-uncommitted">1. READ UNCOMMITTED
&lt;/h4>&lt;ul>
&lt;li>Lowest isolation level&lt;/li>
&lt;li>One transaction may read not-yet-committed changes made by other transactions (&amp;ldquo;dirty reads&amp;rdquo;)&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">Transaction&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">UPDATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Account&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">balance&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">balance&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">account_id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">Transaction&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">balance&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Account&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">account_id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">-- May read the updated (uncommitted) balance
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">Transaction&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">ROLLBACK&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="2-read-committed">2. READ COMMITTED
&lt;/h4>&lt;ul>
&lt;li>A transaction only sees data committed before the transaction began&lt;/li>
&lt;li>Prevents dirty reads, but &amp;ldquo;non-repeatable reads&amp;rdquo; can occur&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">Transaction&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">balance&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Account&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">account_id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">-- Reads original balance
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">Transaction&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">UPDATE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Account&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SET&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">balance&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">balance&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">account_id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">Transaction&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">COMMIT&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">Transaction&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">balance&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Account&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">account_id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">-- Reads new balance
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="3-repeatable-read">3. REPEATABLE READ
&lt;/h4>&lt;ul>
&lt;li>Ensures that if a transaction reads a row, it will consistently see the same data for that row until the transaction completes&lt;/li>
&lt;li>Prevents non-repeatable reads, but &amp;ldquo;phantom reads&amp;rdquo; can occur&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">Transaction&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Account&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">balance&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">Transaction&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INSERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Account&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">account_id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">balance&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">VALUES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;C&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1500&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">Transaction&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">COMMIT&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">Transaction&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Account&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">balance&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">-- May see the new account (phantom read)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="4-serializable">4. SERIALIZABLE
&lt;/h4>&lt;ul>
&lt;li>Highest isolation level&lt;/li>
&lt;li>Transactions are completely isolated from one another&lt;/li>
&lt;li>Prevents dirty reads, non-repeatable reads, and phantom reads&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">Transaction&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Account&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">balance&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="k">Transaction&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INSERT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">INTO&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Account&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">account_id&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">balance&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">VALUES&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;C&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1500&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">-- This will be blocked until Transaction 1 completes
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">Transaction&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Account&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">WHERE&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">balance&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">-- Will not see any changes made by other transactions
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="concurrency-issues">Concurrency Issues
&lt;/h5>&lt;p>&lt;strong>1&lt;/strong> &lt;strong>Dirty Read&lt;/strong>: Reading uncommitted data from another transaction.&lt;/p>
&lt;p>&lt;strong>2&lt;/strong> &lt;strong>Non-Repeatable Read&lt;/strong>: Getting different results when reading the same row twice in the same transaction.&lt;/p>
&lt;p>&lt;strong>3&lt;/strong> &lt;strong>Phantom Read&lt;/strong>: Getting different results when querying for a range of rows twice in the same transaction.&lt;/p>
&lt;p>⠀Isolation Level Comparison&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: center">Isolation Level&lt;/th>
&lt;th style="text-align: center">Dirty Read&lt;/th>
&lt;th style="text-align: center">Non-Repeatable Read&lt;/th>
&lt;th style="text-align: center">Phantom Read&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: center">READ UNCOMMITTED&lt;/td>
&lt;td style="text-align: center">Possible&lt;/td>
&lt;td style="text-align: center">Possible&lt;/td>
&lt;td style="text-align: center">Possible&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">READ COMMITTED&lt;/td>
&lt;td style="text-align: center">Prevented&lt;/td>
&lt;td style="text-align: center">Possible&lt;/td>
&lt;td style="text-align: center">Possible&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">REPEATABLE READ&lt;/td>
&lt;td style="text-align: center">Prevented&lt;/td>
&lt;td style="text-align: center">Prevented&lt;/td>
&lt;td style="text-align: center">Possible&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: center">SERIALIZABLE&lt;/td>
&lt;td style="text-align: center">Prevented&lt;/td>
&lt;td style="text-align: center">Prevented&lt;/td>
&lt;td style="text-align: center">Prevented&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Higher isolation levels provide more consistency but may reduce concurrency and impact performance.&lt;/p>
&lt;p>Many applications use READ COMMITTED as a default, as it provides a good balance between consistency and performance.&lt;/p>
&lt;h3 id="transactional">@Transactional
&lt;/h3>&lt;p>When you annotate a method with @Transactional, Spring will start a transaction before the method executes and commit it after the method completes. If &lt;strong>an exception is thrown&lt;/strong>, the transaction will be rolled back.&lt;/p>
&lt;p>You can place @Transactional on a method or a class. If placed on a class, &lt;strong>all public methods&lt;/strong> of the class become transactional.(@Transactional only works on &lt;strong>public&lt;/strong> methods)
By default, transactions roll back on &lt;strong>runtime exceptions&lt;/strong>.&lt;/p>
&lt;p>You can customize&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Transactional&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rollbackFor&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">CustomException&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">})&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In Spring Boot applications, transaction management is automatically enabled. In other Spring applications, you need to explicitly enable it with @EnableTransactionManagement.
scenarios:&lt;/p>
&lt;ul>
&lt;li>Multiple Database Operations&lt;/li>
&lt;li>Read Operations Requiring Consistency&lt;/li>
&lt;li>…
&lt;strong>Service Layer Methods&lt;/strong> It&amp;rsquo;s often a good practice to put @Transactional on service-layer methods rather than repository methods or controllers.
Don&amp;rsquo;t use @Transactional for &lt;strong>single, simple database operations&lt;/strong> - the underlying repository methods are often already transactional.&lt;/li>
&lt;/ul>
&lt;h2 id="articles">Articles
&lt;/h2>&lt;p>&lt;a class="link" href="https://www.baeldung.com/rest-api-spring-oauth2-angular" target="_blank" rel="noopener"
>Spring REST API + OAuth2 + Angular&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.baeldung.com/keycloak-embedded-in-spring-boot-app" target="_blank" rel="noopener"
>Keycloak Embedded in a Spring Boot Application&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://dzone.com/articles/secure-spring-rest-with-spring-security-and-oauth2" target="_blank" rel="noopener"
>Secure Spring REST With Spring Security and OAuth2&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://dzone.com/articles/oauth-20-beginners-guide" target="_blank" rel="noopener"
>OAuth 2.0 Beginner&amp;rsquo;s Guide&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://dzone.com/refcardz/oauth-patterns-and-anti-patterns" target="_blank" rel="noopener"
>OAuth Patterns and Anti-Patterns&lt;/a>&lt;/p></description></item><item><title>【Postopia Dev Log】Day 2</title><link>https://dyhes.github.io/p/postopia-dev-logday-2/</link><pubDate>Sun, 07 Jul 2024 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/postopia-dev-logday-2/</guid><description>&lt;img src="https://dyhes.github.io/covers/cover11.png" alt="Featured image of post 【Postopia Dev Log】Day 2" />&lt;p>考虑到不确定能把系统做到什么程度，暂时不考虑分布式相关事宜&lt;/p>
&lt;p>运行./gradlew bootRun 热加载不知道为什么没有生效，找来找去没找到原因&lt;/p>
&lt;p>想直接用dokcer实现，不熟悉docker和docker compose困难重重&lt;/p>
&lt;p>根据 &lt;a class="link" href="https://digitalsanctuary.com/java/springboot-devtools-auto-restart-and-live-reload.html" target="_blank" rel="noopener"
>SpringBoot DevTools Auto Restart and Live Reload&lt;/a> 一顿操作之后控制台有反应了，但是没有效果&lt;/p>
&lt;p>根据 &lt;a class="link" href="https://github.com/spring-projects/spring-boot/issues/38538" target="_blank" rel="noopener"
>LiveReload does not detect changes&lt;/a>&lt;/p>
&lt;p>”For a change to be noticeable &lt;strong>it has to be compiled&lt;/strong>. You can learn more about this &lt;a class="link" href="https://docs.spring.io/spring-boot/docs/3.2.x/reference/html/using.html#using.devtools.restart" target="_blank" rel="noopener"
>in the reference documentation&lt;/a>. We generally recommend using an IDE to both to run the application and to make changes. It will then compile the changes so that they can be noticed by DevTools.“&lt;/p>
&lt;p>成功解决问题&lt;/p>
&lt;p>进度：
完成注册，热加载&lt;/p>
&lt;h2 id="knowledge">knowledge
&lt;/h2>&lt;h3 id="uuid-long-id-comparison">UUID, Long ID comparison
&lt;/h3>&lt;p>UUID:&lt;/p>
&lt;ul>
&lt;li>Globally unique&lt;/li>
&lt;li>128-bit value&lt;/li>
&lt;li>String representation&lt;/li>
&lt;li>No sequential ordering&lt;/li>
&lt;li>Suitable for distributed systems&lt;/li>
&lt;li>Can be generated without DB interaction&lt;/li>
&lt;li>Larger storage size (typically 36 characters)
⠀Long ID:&lt;/li>
&lt;li>Locally unique (per table)&lt;/li>
&lt;li>64-bit integer&lt;/li>
&lt;li>Numeric representation&lt;/li>
&lt;li>Sequential (if auto-incremented)&lt;/li>
&lt;li>Simpler and more human-readable&lt;/li>
&lt;li>Smaller storage size (8 bytes)&lt;/li>
&lt;li>Typically faster for indexing and joining&lt;/li>
&lt;/ul>
&lt;h3 id="generatedvalue">@GeneratedValue
&lt;/h3>&lt;p>The @GeneratedValue annotation in Spring Boot is used to specify &lt;strong>how the primary key should be generated for an entity&lt;/strong>. Here&amp;rsquo;s a breakdown of its key aspects:
Common strategies:&lt;/p>
&lt;ul>
&lt;li>GenerationType.AUTO (default)&lt;/li>
&lt;li>GenerationType.IDENTITY
&lt;ul>
&lt;li>Pros: Simple, efficient for single-node systems&lt;/li>
&lt;li>Cons: Can cause issues in distributed systems or data migrations&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>GenerationType.SEQUENCE
&lt;ul>
&lt;li>Pros: Efficient, works well in high-concurrency environments&lt;/li>
&lt;li>Cons: Not supported by all databases (e.g., MySQL before 8.0)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>GenerationType.TABLE
&lt;ul>
&lt;li>Pros: Database-independent, works everywhere&lt;/li>
&lt;li>Cons: Potentially slower, requires extra table management&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="lombok-constructor-related-annotation">Lombok Constructor related annotation
&lt;/h3>&lt;ul>
&lt;li>@NoArgsConstructor&lt;/li>
&lt;li>@AllArgsConstructor&lt;/li>
&lt;li>@RequiredArgsConstructor
all final and @NonNull fields&lt;/li>
&lt;li>@Builder
used to generate a builder pattern for your class&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">MyClass&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">myClass&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">MyClass&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">builder&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">name&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;John Doe&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">age&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">30&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">address&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;123 Main St&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="gradlew">./gradlew
&lt;/h3>&lt;p>This part of the command is invoking the &lt;strong>Gradle Wrapper&lt;/strong> (gradlew or gradlew.bat), which is a script that comes bundled with the Gradle build tool. The Gradle Wrapper ensures that the correct version of Gradle is used for the project, regardless of whether or not the user has Gradle installed on their system.&lt;/p>
&lt;h3 id="dockerfile">Dockerfile
&lt;/h3>&lt;p>A Dockerfile is a script that contains a series of instructions on how to build a Docker image. Each &lt;strong>instruction&lt;/strong> in a Dockerfile creates a &lt;strong>layer&lt;/strong> in the image, and when you build the image, Docker executes these instructions step by step to produce the final image.
&lt;strong>FROM&lt;/strong>
Specifies the &lt;strong>base image&lt;/strong> to use for the Docker image you’re building. Every Dockerfile &lt;strong>must start with&lt;/strong> a FROM instruction.
&lt;strong>FROM&lt;/strong> ubuntu:20.04&lt;/p>
&lt;p>&lt;strong>LABEL&lt;/strong>
Adds &lt;strong>metadata&lt;/strong> to the image, such as a maintainer name or a version.
&lt;strong>LABEL&lt;/strong> maintainer=&amp;ldquo;&lt;a class="link" href="mailto:example@example.com" >example@example.com&lt;/a>&amp;rdquo;&lt;/p>
&lt;p>&lt;strong>RUN&lt;/strong>
&lt;strong>Executes a command&lt;/strong> in the shell. It’s often used for installing software packages.
&lt;strong>RUN&lt;/strong> apt-get update &amp;amp;&amp;amp; apt-get install -y nginx&lt;/p>
&lt;p>&lt;strong>COPY&lt;/strong>
Copies files or directories from your local filesystem into the Docker image.
&lt;strong>COPY&lt;/strong> ./localfile /containerfile&lt;/p>
&lt;p>&lt;strong>ADD&lt;/strong>
Similar to COPY, but also &lt;strong>supports URL sources and automatic unpacking&lt;/strong> of compressed files.
&lt;strong>ADD&lt;/strong> &lt;a class="link" href="https://example.com/file.tar.gz" target="_blank" rel="noopener"
>https://example.com/file.tar.gz&lt;/a> /tmp/&lt;/p>
&lt;p>&lt;strong>WORKDIR&lt;/strong>
Sets the &lt;strong>working directory&lt;/strong> for any subsequent RUN, CMD, ENTRYPOINT, COPY, and ADD instructions.
&lt;strong>WORKDIR&lt;/strong> /app&lt;/p>
&lt;p>&lt;strong>CMD&lt;/strong>
Provides a command that will be executed &lt;strong>when a container is started from the image&lt;/strong>. Only one CMD instruction is allowed per Dockerfile; if multiple CMD instructions are specified, &lt;strong>only the last one takes effect&lt;/strong>.
&lt;strong>CMD&lt;/strong> [&amp;ldquo;nginx&amp;rdquo;, &amp;ldquo;-g&amp;rdquo;, &amp;ldquo;daemon off;&amp;rdquo;]&lt;/p>
&lt;p>&lt;strong>ENTRYPOINT&lt;/strong>
Sets the default application to be used every time a container is created from the image. Unlike CMD, ENTRYPOINT &lt;strong>won’t be overridden by command-line arguments&lt;/strong>.
&lt;strong>ENTRYPOINT&lt;/strong> [&amp;ldquo;nginx&amp;rdquo;, &amp;ldquo;-g&amp;rdquo;, &amp;ldquo;daemon off;&amp;rdquo;]&lt;/p>
&lt;p>&lt;strong>ENV&lt;/strong>
Sets environment variables.
&lt;strong>ENV&lt;/strong> MY_ENV_VAR=my_value&lt;/p>
&lt;p>&lt;strong>EXPOSE&lt;/strong>
Informs Docker that the container listens on the specified network ports at runtime. This doesn’t actually publish the port; it’s a form of &lt;strong>documentation&lt;/strong>.
&lt;strong>EXPOSE&lt;/strong> 80&lt;/p>
&lt;p>&lt;strong>VOLUME&lt;/strong>
Creates a mount point with the specified path and marks it as holding externally mounted volumes from the native host or other containers.
&lt;strong>VOLUME&lt;/strong> [&amp;quot;/data&amp;quot;]&lt;/p>
&lt;p>&lt;strong>USER&lt;/strong>
Sets the user name or UID to use when running the image and for any RUN, CMD, and ENTRYPOINT instructions that follow it.
&lt;strong>USER&lt;/strong> nginx&lt;/p>
&lt;p>a project can have multiple Dockerfiles.
e.g.
├── Dockerfile ## Default Dockerfile for production
├── Dockerfile.dev ## Dockerfile for development
├── Dockerfile.test ## Dockerfile for testing&lt;/p>
&lt;h2 id="articles">Articles
&lt;/h2>&lt;p>&lt;a class="link" href="https://medium.com/@saygiligozde/using-docker-compose-with-spring-boot-and-postgresql-235031106f9f" target="_blank" rel="noopener"
>Using Docker Compose with Spring Boot and PostgreSQL&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://digitalsanctuary.com/java/springboot-devtools-auto-restart-and-live-reload.html" target="_blank" rel="noopener"
>SpringBoot DevTools Auto Restart and Live Reload&lt;/a>&lt;/p></description></item><item><title>【Postopia Dev Log】Day 1</title><link>https://dyhes.github.io/p/postopia-dev-logday-1/</link><pubDate>Fri, 05 Jul 2024 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/postopia-dev-logday-1/</guid><description>&lt;img src="https://dyhes.github.io/covers/cover8.png" alt="Featured image of post 【Postopia Dev Log】Day 1" />&lt;p>为了提高自己的全栈开发能力，根据Reddit上某帖子(找不到原贴了)里关于提高代码能力的建议：&lt;strong>Reinvent The Wheel&lt;/strong>, 决定自己开发一个类似Reddit的论坛系统，在 Claude3.5的建议下取名 Postopia。&lt;/p>
&lt;p>考虑用umi max还是umi，感觉umi max虽然功能齐全，但是有点臃肿。最后考虑到配置各种依赖的复杂程度，还是选择umi max。&lt;/p>
&lt;p>用claude 3.5生成了一些代码，但感觉质量不是很高，同时只能提供最基础的html,css,js三件套，利用不了更高层的框架能力，还是仅供参考&lt;/p>
&lt;h2 id="postopia">Postopia
&lt;/h2>&lt;p>Claude 3.5:&lt;/p>
&lt;p>Here are some name suggestions for a Reddit alternative:&lt;/p>
&lt;ul>
&lt;li>Readit&lt;/li>
&lt;li>Threaddit&lt;/li>
&lt;li>Postopia&lt;/li>
&lt;li>Forumly&lt;/li>
&lt;li>Discussr&lt;/li>
&lt;/ul>
&lt;p>Postopia is indeed an interesting name choice. Let me break it down for you:&lt;/p>
&lt;p>Etymology:&lt;/p>
&lt;p>&amp;ldquo;Post&amp;rdquo; refers to the act of submitting content or messages, which is a core feature of Reddit-like platforms.
&amp;ldquo;topia&amp;rdquo; comes from the Greek word &amp;ldquo;topos&amp;rdquo; meaning place, and is often used to describe an ideal or imaginary place.&lt;/p>
&lt;p>Meaning:&lt;/p>
&lt;p>Together, Postopia suggests a &amp;ldquo;world of posts&amp;rdquo; or an &amp;ldquo;ideal place for posting.&amp;rdquo;&lt;/p>
&lt;p>Connotations:&lt;/p>
&lt;p>It evokes a sense of a utopian community built around sharing and discussing content.
The name implies a space where posting and engaging with posts is the primary focus.&lt;/p>
&lt;p>Relevance to Reddit alternative:&lt;/p>
&lt;p>Like Reddit, it emphasizes the user-generated content aspect.
It suggests a potentially improved or idealized version of a posting platform.&lt;/p>
&lt;p>Memorability:&lt;/p>
&lt;p>The combination of familiar elements (&amp;ldquo;post&amp;rdquo; and &amp;ldquo;topia&amp;rdquo;) creates a unique and catchy name.
It&amp;rsquo;s relatively easy to spell and pronounce.&lt;/p>
&lt;p>Domain availability:&lt;/p>
&lt;p>As of my last update, postopia.com was likely taken, but variations like getpostopia.com or postopia.io might be available.&lt;/p>
&lt;p>Branding potential:&lt;/p>
&lt;p>The name lends itself well to visual branding, perhaps incorporating elements that suggest an ideal digital community.&lt;/p>
&lt;h2 id="技术栈">技术栈
&lt;/h2>&lt;h3 id="前端">前端
&lt;/h3>&lt;p>Umi max，node 18.20.3&lt;/p>
&lt;h3 id="后端">后端
&lt;/h3>&lt;p>Spring Boot 3.3，Java 17&lt;/p></description></item><item><title>【Postopia Dev Log】Summary</title><link>https://dyhes.github.io/p/postopia-dev-logsummary/</link><pubDate>Fri, 05 Jul 2024 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/postopia-dev-logsummary/</guid><description>&lt;img src="https://dyhes.github.io/covers/cover18.png" alt="Featured image of post 【Postopia Dev Log】Summary" />&lt;p>考虑隔离级别&lt;/p>
&lt;h2 id="hard-core">Hard Core
&lt;/h2>&lt;h3 id="spring-security">Spring Security
&lt;/h3>&lt;p>没有经验时的登录实现，文档杂乱，不知道如何寻找正确的实现方法&lt;/p>
&lt;h2 id="inspiration">Inspiration
&lt;/h2>&lt;h3 id="w5">w5
&lt;/h3>&lt;p>如何处理以前没有遇到过的新需求（如给用户发送邮件），需要积累解决问题的能力（实习的时候可以边问边查，做自己的项目只能自己去查，那么如何高效检索并善用AI）,并形成方法论，以便提高能力&lt;/p>
&lt;h2 id="best-practices">Best Practices
&lt;/h2>&lt;p>很多问题只有亲身经历才能体会，并寻求 best practices 比如:&lt;/p>
&lt;ul>
&lt;li>直接更新好，处理可能的异常好还是先查询存在再更新好&lt;/li>
&lt;li>是否在Service Layer 使用@AuthenticatedPrincipal&lt;/li>
&lt;li>service引用多个repository或引用对应repository和其他service&lt;/li>
&lt;/ul>
&lt;h2 id="performance-considerations">Performance Considerations
&lt;/h2>&lt;ul>
&lt;li>用户对于帖子或评论的态度（赞同，反对）是否用额外的query查询更好（w4）&lt;/li>
&lt;/ul></description></item></channel></rss>