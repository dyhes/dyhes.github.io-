<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Android on 飞鸿踏雪泥</title><link>https://dyhes.github.io/tags/android/</link><description>Recent content in Android on 飞鸿踏雪泥</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 18 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://dyhes.github.io/tags/android/index.xml" rel="self" type="application/rss+xml"/><item><title>【Android】Jetpack Compose</title><link>https://dyhes.github.io/p/androidjetpack-compose/</link><pubDate>Thu, 18 Nov 2021 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/androidjetpack-compose/</guid><description>&lt;h2 id="application-fundamentals">Application Fundamentals
&lt;/h2>&lt;p>An &lt;em>Android package&lt;/em>, which is an archive file with an &lt;code>.apk&lt;/code> suffix, contains the contents of an Android app that are required at runtime and it is the file that Android-powered devices use to install the app.&lt;/p>
&lt;p>An Android App Bundle, which is an archive file with an &lt;code>.aab&lt;/code> suffix, contains the contents of an Android app project including some additional metadata that is not required at runtime. An AAB is a publishing format and is not installable on Android devices, it defers APK generation and signing to a later stage. When distributing your app through Google Play for example, Google Play&amp;rsquo;s servers generate optimized APKs that contain only the resources and code that are required by a particular device that is requesting installation of the app.&lt;/p>
&lt;p>Each Android app lives in its own security sandbox, protected by the following Android security features:&lt;/p>
&lt;ul>
&lt;li>The Android operating system is a multi-user Linux system in which each app is a different user.&lt;/li>
&lt;li>By default, the system assigns each app a unique Linux user ID (the ID is used only by the system and is unknown to the app). The system sets permissions for all the files in an app so that only the user ID assigned to that app can access them.&lt;/li>
&lt;li>Each process has its own virtual machine (VM), so an app&amp;rsquo;s code runs in isolation from other apps.&lt;/li>
&lt;li>By default, every app runs in its own Linux process. The Android system starts the process when any of the app&amp;rsquo;s components need to be executed, and then shuts down the process when it&amp;rsquo;s no longer needed or when the system must recover memory for other apps.&lt;/li>
&lt;/ul>
&lt;h3 id="app-components">App components
&lt;/h3>&lt;p>App components are the essential building blocks of an Android app. Each component is an entry point through which the system or a user can enter your app. Some components depend on others.&lt;/p>
&lt;p>There are four different types of app components:&lt;/p>
&lt;ul>
&lt;li>Activities&lt;/li>
&lt;li>Services&lt;/li>
&lt;li>Broadcast receivers&lt;/li>
&lt;li>Content providers&lt;/li>
&lt;/ul>
&lt;p>Each type serves a distinct purpose and has a distinct lifecycle that defines how the component is created and destroyed.&lt;/p>
&lt;h2 id="app-architecture">App Architecture
&lt;/h2>&lt;p>An app architecture defines the boundaries between parts of the app and the responsibilities each part should have. In order to meet the needs mentioned above, you should design your app architecture to follow a few specific principles.&lt;/p>
&lt;h3 id="principles">Principles
&lt;/h3>&lt;h4 id="separation-of-concerns">Separation of concerns
&lt;/h4>&lt;p>The most important principle to follow is &lt;a class="link" href="https://en.wikipedia.org/wiki/Separation_of_concerns" target="_blank" rel="noopener"
>separation of concerns&lt;/a>.&lt;/p>
&lt;h4 id="drive-ui-from-data-models">Drive UI from data models
&lt;/h4>&lt;p>Another important principle is that you should drive your UI from data models, preferably persistent models.&lt;/p>
&lt;h4 id="single-source-of-truth">Single source of truth
&lt;/h4>&lt;p>When a new data type is defined in your app, you should assign a Single Source of Truth (SSOT) to it.&lt;/p>
&lt;p>The &lt;a class="link" href="https://developer.android.com/topic/architecture?hl=en#single-source-of-truth" target="_blank" rel="noopener"
>single source of truth principle&lt;/a> is often used in our guides with the Unidirectional Data Flow (UDF) pattern. In UDF, &lt;strong>state&lt;/strong> flows in only one direction. The &lt;strong>events&lt;/strong> that modify the data flow in the opposite direction.&lt;/p>
&lt;h3 id="recommended-app-architecture">Recommended app architecture
&lt;/h3>&lt;p>Considering the common architectural principles mentioned in the previous section, each application should have at least two layers:&lt;/p>
&lt;ul>
&lt;li>The &lt;em>UI layer&lt;/em> that displays application data on the screen.&lt;/li>
&lt;li>The &lt;em>data layer&lt;/em> that contains the business logic of your app and exposes application data.&lt;/li>
&lt;/ul>
&lt;p>You can add an additional layer called the &lt;em>domain layer&lt;/em> to simplify and reuse the interactions between the UI and data layers.&lt;/p>
&lt;p>&lt;img src="https://developer.android.com/static/topic/libraries/architecture/images/mad-arch-overview.png"
loading="lazy"
alt="In a typical app architecture, the UI layer gets the application data from the data layer or from the optional domain layer, which sits between the UI layer and the data layer."
>&lt;/p>
&lt;h4 id="ui-layer">UI layer
&lt;/h4>&lt;p>The role of the UI layer (or &lt;em>presentation layer&lt;/em>) is to display the application data on the screen. Whenever the data changes, either due to user interaction (such as pressing a button) or external input (such as a network response), the UI should update to reflect the changes.&lt;/p>
&lt;p>The UI layer is made up of two things:&lt;/p>
&lt;ul>
&lt;li>UI elements that render the data on the screen. You build these elements using Views or &lt;a class="link" href="https://developer.android.com/jetpack/compose" target="_blank" rel="noopener"
>Jetpack Compose&lt;/a> functions.&lt;/li>
&lt;li>State holders (such as &lt;a class="link" href="https://developer.android.com/topic/libraries/architecture/viewmodel" target="_blank" rel="noopener"
>ViewModel&lt;/a> classes) that hold data, expose it to the UI, and handle logic.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://developer.android.com/static/topic/libraries/architecture/images/mad-arch-overview-ui.png"
loading="lazy"
alt="In a typical architecture, the UI layers UI elements depend on state holders, which in turn depend on classes from either the data layer or the optional domain layer."
>&lt;/p>
&lt;h4 id="data-layer">Data layer
&lt;/h4>&lt;p>The data layer of an app contains the &lt;em>business logic&lt;/em>. The business logic is what gives value to your app—it&amp;rsquo;s made of rules that determine how your app creates, stores, and changes data.&lt;/p>
&lt;p>The data layer is made of &lt;em>repositories&lt;/em> that each can contain zero to many &lt;em>data sources&lt;/em>. You should create a repository class for each different type of data you handle in your app.&lt;/p>
&lt;p>&lt;img src="https://developer.android.com/static/topic/libraries/architecture/images/mad-arch-overview-data.png"
loading="lazy"
alt="In a typical architecture, the data layers repositories provide data to the rest of the app and depend on the data sources."
>&lt;/p>
&lt;p>Repository classes are responsible for the following tasks:&lt;/p>
&lt;ul>
&lt;li>Exposing data to the rest of the app.&lt;/li>
&lt;li>Centralizing changes to the data.&lt;/li>
&lt;li>Resolving conflicts between multiple data sources.&lt;/li>
&lt;li>Abstracting sources of data from the rest of the app.&lt;/li>
&lt;li>Containing business logic.&lt;/li>
&lt;/ul>
&lt;p>Each data source class should have the responsibility of working with only one source of data, which can be a file, a network source, or a local database. Data source classes are the bridge between the application and the system for data operations.&lt;/p>
&lt;h4 id="domain-layer">Domain layer
&lt;/h4>&lt;p>The domain layer is an optional layer that sits between the UI and data layers.&lt;/p>
&lt;p>The domain layer is responsible for encapsulating complex business logic, or simple business logic that is reused by multiple ViewModels. This layer is optional because not all apps will have these requirements. You should use it only when needed—for example, to handle complexity or favor reusability.&lt;/p>
&lt;p>Classes in this layer are commonly called &lt;em>use cases&lt;/em> or &lt;em>interactors&lt;/em>. Each use case should have responsibility over a &lt;em>single&lt;/em> functionality. For example, your app could have a &lt;code>GetTimeZoneUseCase&lt;/code> class if multiple ViewModels rely on time zones to display the proper message on the screen.&lt;/p>
&lt;h3 id="general-best-practices">General best practices
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;strong>Don&amp;rsquo;t store data in app components.&lt;/strong>&lt;/p>
&lt;p>Avoid designating your app&amp;rsquo;s entry points—such as activities, services, and broadcast receivers—as sources of data.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Reduce dependencies on Android classes.&lt;/strong>&lt;/p>
&lt;p>Your app components should be the only classes that rely on Android framework SDK APIs such as &lt;a class="link" href="https://developer.android.com/reference/android/content/Context" target="_blank" rel="noopener"
>&lt;code>Context&lt;/code>&lt;/a>, or &lt;a class="link" href="https://developer.android.com/guide/topics/ui/notifiers/toasts" target="_blank" rel="noopener"
>&lt;code>Toast&lt;/code>&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Create well-defined boundaries of responsibility between various modules in your app.&lt;/strong>&lt;/p>
&lt;p>For example, don&amp;rsquo;t spread the code that loads data from the network across multiple classes or packages in your code base. Similarly, don&amp;rsquo;t define multiple unrelated responsibilities—such as data caching and data binding—in the same class.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Expose as little as possible from each module.&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Focus on the unique core of your app so it stands out from other apps.&lt;/strong>&lt;/p>
&lt;p>Don&amp;rsquo;t reinvent the wheel by writing the same boilerplate code again and again.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Consider how to make each part of your app testable in isolation.&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Types are responsible for their concurrency policy.&lt;/strong>&lt;/p>
&lt;p>If a type is performing long-running blocking work, it should be responsible for moving that computation to the right thread.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Persist as much relevant and fresh data as possible.&lt;/strong>&lt;/p>
&lt;p>That way, users can enjoy your app&amp;rsquo;s functionality even when their device is in offline mode.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="state">State
&lt;/h2>&lt;p>There are three ways to declare a &lt;code>MutableState&lt;/code> object in a composable:&lt;/p>
&lt;ul>
&lt;li>&lt;code>val value = remember { mutableStateOf(default) }&lt;/code>&lt;/li>
&lt;li>&lt;code>var value by remember { mutableStateOf(default) }&lt;/code>&lt;/li>
&lt;li>&lt;code>val (value, setValue) = remember { mutableStateOf(default) }&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>These declarations are equivalent, and are provided as syntax sugar for different uses of state&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Caution:&lt;/strong> Using mutable objects such as &lt;code>ArrayList&amp;lt;T&amp;gt;&lt;/code> or &lt;code>mutableListOf()&lt;/code> as state in Compose causes your users to see incorrect or stale data in your app. Mutable objects that are not observable, such as ArrayList or a mutable data class, are not observable by Compose and don&amp;rsquo;t trigger a recomposition when they change. Instead of using non-observable mutable objects, the recommendation is to use an observable data holder such as &lt;code>State&amp;lt;List&amp;lt;T&amp;gt;&amp;gt;&lt;/code> and the immutable &lt;code>listOf()&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;p>While &lt;code>remember&lt;/code> helps you retain state across recompositions, the state is not retained across configuration changes. For this, you must use &lt;code>rememberSaveable&lt;/code>. &lt;code>rememberSaveable&lt;/code> automatically saves any value that can be saved in a &lt;code>Bundle&lt;/code>.&lt;/p>
&lt;blockquote>
&lt;p>Compose automatically recomposes from reading &lt;code>State&lt;/code> objects. If you use another observable type such as &lt;code>LiveData&lt;/code> in Compose, you should convert it to &lt;code>State&lt;/code> before reading it. Make sure that type conversion happens in a composable, using a composable extension function like &lt;code>LiveData&amp;lt;T&amp;gt;.observeAsState()&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;h3 id="state-hoisting">State hoisting
&lt;/h3>&lt;p>State hoisting in Compose is a pattern of moving state to a composable&amp;rsquo;s caller to make a composable stateless.&lt;/p>
&lt;p>The general pattern for state hoisting in Jetpack Compose is to replace the state variable with two parameters:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;code>value: T&lt;/code>:&lt;/strong> the current value to display&lt;/li>
&lt;li>&lt;strong>&lt;code>onValueChange: (T) -&amp;gt; Unit&lt;/code>:&lt;/strong> an event that requests the value to change, where &lt;code>T&lt;/code> is the proposed new value&lt;/li>
&lt;/ul>
&lt;h4 id="ui-state">UI state
&lt;/h4>&lt;p>&lt;a class="link" href="https://developer.android.com/topic/architecture/ui-layer/stateholders#ui-state" target="_blank" rel="noopener"
>UI state&lt;/a> is the property that describes the UI. There are two types of UI state:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Screen UI state&lt;/strong> is &lt;em>what&lt;/em> you need to display on the screen. This state is usually connected with other layers of the hierarchy because it contains app data.&lt;/li>
&lt;li>&lt;strong>UI element state&lt;/strong> refers to properties intrinsic to UI elements that influence how they are rendered. A UI element may be shown or hidden and may have a certain font, font size, or font color.&lt;/li>
&lt;/ul>
&lt;h4 id="logic">Logic
&lt;/h4>&lt;p>Logic in an application can be either business logic or UI logic:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Business logic&lt;/strong> is the implementation of product requirements for app data. For example, bookmarking an article in a news reader app when the user taps the button. This logic to save a bookmark to a file or database is usually placed in the domain or data layers. The state holder usually delegates this logic to those layers by calling the methods they expose.&lt;/li>
&lt;li>&lt;strong>UI logic&lt;/strong> is related to &lt;em>how&lt;/em> to display UI state on the screen. For example, obtaining the right search bar hint when the user has selected a category, scrolling to a particular item in a list, or the navigation logic to a particular screen when the user clicks a button.&lt;/li>
&lt;/ul>
&lt;h5 id="ui-logic">UI Logic
&lt;/h5>&lt;p>When &lt;a class="link" href="https://developer.android.com/topic/architecture/ui-layer#logic-types" target="_blank" rel="noopener"
>UI logic&lt;/a> needs to read or write state, you should scope the state to the UI, following its lifecycle. To achieve this, you should hoist the state at the correct level in a composable function. Alternatively, you can do so in a &lt;a class="link" href="https://developer.android.com/topic/architecture/ui-layer/stateholders#ui-logic" target="_blank" rel="noopener"
>plain state holder class&lt;/a>, also scoped to the UI lifecycle.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Key Point:&lt;/strong> Keeping UI element state internal to composable functions is acceptable. This is a good solution if the state and logic you apply to it is simple and other parts of the UI hierarchy don&amp;rsquo;t need the state.&lt;/p>
&lt;/blockquote>
&lt;h5 id="business-logic">Business logic
&lt;/h5>&lt;p>If composables and plain state holders classes are in charge of the UI logic and UI element state, a screen level state holder is in charge of the following tasks:&lt;/p>
&lt;ul>
&lt;li>Providing access to the &lt;a class="link" href="https://developer.android.com/topic/architecture/ui-layer#logic-types" target="_blank" rel="noopener"
>business logic&lt;/a> of the application that is usually placed in other layers of the hierarchy such as the business and data layers.&lt;/li>
&lt;li>Preparing the application data for presentation in a particular screen, which becomes the screen UI state.&lt;/li>
&lt;/ul>
&lt;p>The &lt;a class="link" href="https://developer.android.com/topic/libraries/architecture/viewmodel#best-practices" target="_blank" rel="noopener"
>benefits&lt;/a> of AAC ViewModels in Android development make them suitable for providing access to the business logic and preparing the application data for presentation on the screen.&lt;/p>
&lt;p>When you hoist UI state in the &lt;code>ViewModel&lt;/code>, you move it outside of the Composition.&lt;/p>
&lt;p>&lt;strong>Figure 6&lt;/strong>: State hoisted to the ViewModel is stored outside of the Composition.&lt;/p>
&lt;p>ViewModels aren&amp;rsquo;t stored as part of the Composition. They&amp;rsquo;re provided by the framework and they&amp;rsquo;re scoped to a &lt;a class="link" href="https://developer.android.com/reference/androidx/lifecycle/ViewModelStoreOwner" target="_blank" rel="noopener"
>&lt;code>ViewModelStoreOwner&lt;/code>&lt;/a> which can be an Activity, Fragment, navigation graph, or destination of a navigation graph.&lt;/p>
&lt;p>You should inject the &lt;code>ViewModel&lt;/code> instance in your screen-level composables to provide access to business logic.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> You should not pass &lt;code>ViewModel&lt;/code> instances down to other composables.&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-Kotlin" data-lang="Kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="n">ConversationScreen&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ConversationScreen&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="unidirectional-data-flow">unidirectional data flow
&lt;/h4>&lt;p>The pattern where the state goes down, and events go up is called a &lt;em>unidirectional data flow&lt;/em>.&lt;/p>
&lt;p>&lt;img src="https://developer.android.com/static/images/jetpack/compose/mmodel-flow-data.png"
loading="lazy"
alt="Illustration of the flow of data in a Compose UI, from high-level objects down to their children."
>&lt;/p>
&lt;p>&lt;img src="https://developer.android.com/static/images/jetpack/compose/mmodel-flow-events.png"
loading="lazy"
alt="Illustration of how UI elements respond to interaction, by triggering events that are handled by the app logic."
>&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Key Point:&lt;/strong> When hoisting state, there are three rules to help you figure out where state should go:&lt;/p>
&lt;ol>
&lt;li>State should be hoisted to at &lt;em>least&lt;/em> the &lt;strong>lowest common parent&lt;/strong> of all composables that use the state (read).&lt;/li>
&lt;li>State should be hoisted to at &lt;em>least&lt;/em> the &lt;strong>highest level it may be changed&lt;/strong> (write).&lt;/li>
&lt;li>If &lt;strong>two states change in response to the same events&lt;/strong> they should be &lt;strong>hoisted together.&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>You can hoist state higher than these rules require, but underhoisting state makes it difficult or impossible to follow unidirectional data flow.&lt;/p>
&lt;/blockquote>
&lt;h3 id="state-storage">state storage
&lt;/h3>&lt;p>&lt;strong>Parcelize&lt;/strong>&lt;/p>
&lt;p>The simplest solution is to add the &lt;a class="link" href="https://github.com/Kotlin/KEEP/blob/master/proposals/extensions/android-parcelable.md" target="_blank" rel="noopener"
>&lt;code>@Parcelize&lt;/code>&lt;/a> annotation to the object. The object becomes parcelable, and can be bundled. For example, this code makes a parcelable &lt;code>City&lt;/code> data type and saves it to the state.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Parcelize&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">data&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">City&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">country&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Parcelable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Composable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">CityScreen&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">var&lt;/span> &lt;span class="py">selectedCity&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">rememberSaveable&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mutableStateOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">City&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Madrid&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Spain&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>MapSaver&lt;/strong>&lt;/p>
&lt;p>If for some reason &lt;code>@Parcelize&lt;/code> is not suitable, you can use &lt;code>mapSaver&lt;/code> to define your own rule for converting an object into a set of values that the system can save to the &lt;code>Bundle&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">data&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">City&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">country&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">val&lt;/span> &lt;span class="py">CitySaver&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">run&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">nameKey&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;Name&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">countryKey&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;Country&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mapSaver&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">save&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">mapOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">nameKey&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="k">it&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">countryKey&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="k">it&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">country&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">restore&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">City&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">it&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">nameKey&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">it&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">countryKey&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Composable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">CityScreen&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">var&lt;/span> &lt;span class="py">selectedCity&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">rememberSaveable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stateSaver&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">CitySaver&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mutableStateOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">City&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Madrid&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Spain&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>ListSaver&lt;/strong>&lt;/p>
&lt;p>To avoid needing to define the keys for the map, you can also use &lt;code>listSaver&lt;/code> and use its indices as keys:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">data&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">City&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">country&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">val&lt;/span> &lt;span class="py">CitySaver&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">listSaver&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">City&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Any&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">save&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">listOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">it&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">it&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">country&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">restore&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">City&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">it&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">it&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Composable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">CityScreen&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">var&lt;/span> &lt;span class="py">selectedCity&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">rememberSaveable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stateSaver&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">CitySaver&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mutableStateOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">City&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Madrid&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Spain&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="lifecycle">Lifecycle
&lt;/h2>&lt;p>The lifecycle of a composable is defined by the following events:&lt;/p>
&lt;ul>
&lt;li>entering the Composition&lt;/li>
&lt;li>getting recomposed 0 or more times&lt;/li>
&lt;li>leaving the Composition.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://developer.android.com/static/images/jetpack/compose/lifecycle-composition.png"
loading="lazy"
alt="Diagram showing the lifecycle of a composable"
>&lt;/p>
&lt;p>Recomposition is typically triggered by a change to a &lt;a class="link" href="https://developer.android.com/reference/kotlin/androidx/compose/runtime/State" target="_blank" rel="noopener"
>&lt;code>State&lt;/code>&lt;/a> object. Compose tracks these and runs all composables in the Composition that read that particular &lt;code>State&amp;lt;T&amp;gt;&lt;/code>, and any composables that they call that cannot be &lt;a class="link" href="https://developer.android.com/jetpack/compose/lifecycle#skipping" target="_blank" rel="noopener"
>skipped&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>A Composable&amp;rsquo;s&amp;rsquo; lifecycle is simpler than the lifecycle of views, activities, and fragments. When a composable needs to manage or interact with external resources that &lt;em>do&lt;/em> have a more complex lifecycle, you should use &lt;a class="link" href="https://developer.android.com/jetpack/compose/lifecycle#state-effect-use-cases" target="_blank" rel="noopener"
>effects&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;p>Add extra information to help smart recompositions&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Composable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">MoviesScreen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">movies&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Movie&lt;/span>&lt;span class="p">&amp;gt;)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Column&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">movie&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">movies&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">key&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">movie&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// Unique ID for this movie
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">MovieOverview&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">movie&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="stable">Stable
&lt;/h3>&lt;p>If a composable is already in the Composition, it can skip recomposition if all the inputs are stable and haven&amp;rsquo;t changed.&lt;/p>
&lt;p>A stable type must comply with the following contract:&lt;/p>
&lt;ul>
&lt;li>The result of &lt;code>equals&lt;/code> for two instances will &lt;em>forever&lt;/em> be the same for the same two instances.&lt;/li>
&lt;li>If a public property of the type changes, Composition will be notified.&lt;/li>
&lt;li>All public property types are also stable.&lt;/li>
&lt;/ul>
&lt;p>There are some important common types that fall into this contract that the compose compiler will treat as stable, even though they are not explicitly marked as stable by using the &lt;code>@Stable&lt;/code> annotation:&lt;/p>
&lt;ul>
&lt;li>All primitive value types: &lt;code>Boolean&lt;/code>, &lt;code>Int&lt;/code>, &lt;code>Long&lt;/code>, &lt;code>Float&lt;/code>, &lt;code>Char&lt;/code>, etc.&lt;/li>
&lt;li>Strings&lt;/li>
&lt;li>All Function types (lambdas)&lt;/li>
&lt;/ul>
&lt;p>All of these types are able to follow the contract of stable because they are immutable. Since immutable types never change, they never have to notify Composition of the change, so it is much easier to follow this contract.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> All deeply immutable types can safely be considered stable types.&lt;/p>
&lt;/blockquote>
&lt;p>One notable type that is stable but &lt;em>is&lt;/em> mutable is Compose’s &lt;code>MutableState&lt;/code> type. If a value is held in a &lt;code>MutableState&lt;/code>, the state object overall is considered to be stable as Compose will be notified of any changes to the &lt;code>.value&lt;/code> property of &lt;code>State&lt;/code>.&lt;/p>
&lt;p>If Compose is not able to infer that a type is stable, but you want to force Compose to treat it as stable, mark it with the &lt;a class="link" href="https://developer.android.com/reference/kotlin/androidx/compose/runtime/Stable" target="_blank" rel="noopener"
>&lt;code>@Stable&lt;/code>&lt;/a> annotation.&lt;/p>
&lt;h2 id="modifiers">Modifiers
&lt;/h2>&lt;p>odifiers allow you to decorate or augment a composable. Modifiers let you do these sorts of things:&lt;/p>
&lt;ul>
&lt;li>Change the composable&amp;rsquo;s size, layout, behavior, and appearance&lt;/li>
&lt;li>Add information, like accessibility labels&lt;/li>
&lt;li>Process user input&lt;/li>
&lt;li>Add high-level interactions, like making an element clickable, scrollable, draggable, or zoomable&lt;/li>
&lt;/ul>
&lt;p>It&amp;rsquo;s a best practice to have &lt;em>all&lt;/em> of your Composables accept a &lt;code>modifier&lt;/code> parameter, and pass that modifier to its first child that emits UI.&lt;/p>
&lt;p>The order of modifier functions is &lt;strong>significant&lt;/strong>. Since each function makes changes to the &lt;code>Modifier&lt;/code>returned by the previous function, the sequence affects the final result.&lt;/p>
&lt;p>Multiple modifiers can be chained together to decorate or augment a composable. This chain is created via the &lt;a class="link" href="https://developer.android.com/reference/kotlin/androidx/compose/ui/Modifier" target="_blank" rel="noopener"
>&lt;code>Modifier&lt;/code>&lt;/a> interface which represents an ordered, immutable list of single &lt;a class="link" href="https://developer.android.com/reference/kotlin/androidx/compose/ui/Modifier.Element" target="_blank" rel="noopener"
>&lt;code>Modifier.Elements&lt;/code>&lt;/a>.&lt;/p>
&lt;p>Each &lt;code>Modifier.Element&lt;/code> represents an individual behavior, like layout, drawing and graphics behaviors, all gesture-related, focus and semantics behaviors, as well as device input events. Their ordering matters: modifier elements that are added first will be applied first.&lt;/p>
&lt;p>Sometimes it can be beneficial to reuse the same modifier chain instances in multiple composables, by extracting them into variables and hoisting them into higher scopes. It can improve code readability or help improve your app&amp;rsquo;s performance.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">val&lt;/span> &lt;span class="py">reusableModifier&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Modifier&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">fillMaxWidth&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">background&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nc">Color&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Red&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">padding&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">12.&lt;/span>&lt;span class="n">dp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can further chain or append your extracted modifier chains by calling the &lt;a class="link" href="https://developer.android.com/reference/kotlin/androidx/compose/ui/Modifier#then%28androidx.compose.ui.Modifier%29" target="_blank" rel="noopener"
>&lt;code>.then()&lt;/code>&lt;/a> function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">val&lt;/span> &lt;span class="py">reusableModifier&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Modifier&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">fillMaxWidth&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">background&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nc">Color&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Red&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">padding&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">12.&lt;/span>&lt;span class="n">dp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Append to your reusableModifier
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">reusableModifier&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">clickable&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="err">…&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Append your reusableModifier
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">otherModifier&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">then&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">reusableModifier&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="side-effects">Side-effects
&lt;/h2>&lt;p>A &lt;strong>side-effect&lt;/strong> is a change to the state of the app that happens outside the scope of a composable function.&lt;/p>
&lt;p>Composables should be side-effect free. When you need to make changes to the state of the app, &lt;strong>you should use the Effect APIs so that those side effects are executed in a predictable manner&lt;/strong>.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Key Term:&lt;/strong> An &lt;strong>effect&lt;/strong> is a composable function that doesn&amp;rsquo;t emit UI and causes side effects to run when a composition completes.&lt;/p>
&lt;/blockquote>
&lt;h3 id="launchedeffect-run-suspend-functions-in-the-scope-of-a-composable">LaunchedEffect: run suspend functions in the scope of a composable
&lt;/h3>&lt;p>To call suspend functions safely from inside a composable, use the &lt;a class="link" href="https://developer.android.com/reference/kotlin/androidx/compose/runtime/package-summary#LaunchedEffect%28kotlin.Any,kotlin.coroutines.SuspendFunction1%29" target="_blank" rel="noopener"
>&lt;code>LaunchedEffect&lt;/code>&lt;/a> composable. When &lt;code>LaunchedEffect&lt;/code> enters the Composition, it launches a coroutine with the block of code passed as a parameter. The coroutine will be cancelled if &lt;code>LaunchedEffect&lt;/code> leaves the composition. If &lt;code>LaunchedEffect&lt;/code> is recomposed with different keys, the existing coroutine will be cancelled and the new suspend function will be launched in a new coroutine.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Composable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">LandingScreen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">onTimeout&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Unit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// This will always refer to the latest onTimeout function that
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// LandingScreen was recomposed with
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">currentOnTimeout&lt;/span> &lt;span class="k">by&lt;/span> &lt;span class="n">rememberUpdatedState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">onTimeout&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Create an effect that matches the lifecycle of LandingScreen.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// If LandingScreen recomposes, the delay shouldn&amp;#39;t start again.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">LaunchedEffect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">true&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">delay&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SplashWaitTimeMillis&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">currentOnTimeout&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* Landing screen content */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="remembercoroutinescope-obtain-a-composition-aware-scope-to-launch-a-coroutine-outside-a-composable">rememberCoroutineScope: obtain a composition-aware scope to launch a coroutine outside a composable
&lt;/h3>&lt;p>As &lt;code>LaunchedEffect&lt;/code> is a composable function, it can only be used inside other composable functions. In order to launch a coroutine outside of a composable, but scoped so that it will be automatically canceled once it leaves the composition, use &lt;a class="link" href="https://developer.android.com/reference/kotlin/androidx/compose/runtime/package-summary#rememberCoroutineScope%28kotlin.Function0%29" target="_blank" rel="noopener"
>&lt;code>rememberCoroutineScope&lt;/code>&lt;/a>&lt;/p>
&lt;p>&lt;code>rememberCoroutineScope&lt;/code> is a composable function that returns a &lt;code>CoroutineScope&lt;/code> bound to the point of the Composition where it&amp;rsquo;s called. The scope will be cancelled when the call leaves the Composition.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Composable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">LandingScreen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">onTimeout&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Unit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// This will always refer to the latest onTimeout function that
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// LandingScreen was recomposed with
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">currentOnTimeout&lt;/span> &lt;span class="k">by&lt;/span> &lt;span class="n">rememberUpdatedState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">onTimeout&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Create an effect that matches the lifecycle of LandingScreen.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// If LandingScreen recomposes, the delay shouldn&amp;#39;t start again.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">LaunchedEffect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">true&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">delay&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SplashWaitTimeMillis&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">currentOnTimeout&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* Landing screen content */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="rememberupdatedstate-reference-a-value-in-an-effect-that-shouldnt-restart-if-the-value-changes">rememberUpdatedState: reference a value in an effect that shouldn&amp;rsquo;t restart if the value changes
&lt;/h3>&lt;p>&lt;code>LaunchedEffect&lt;/code> restarts when one of the key parameters changes. However, in some situations you might want to capture a value in your effect that, if it changes, you do not want the effect to restart. In order to do this, it is required to use &lt;code>rememberUpdatedState&lt;/code> to create a reference to this value which can be captured and updated. This approach is helpful for effects that contain long-lived operations that may be expensive or prohibitive to recreate and restart.&lt;/p>
&lt;p>For example, suppose your app has a &lt;code>LandingScreen&lt;/code> that disappears after some time. Even if &lt;code>LandingScreen&lt;/code> is recomposed, the effect that waits for some time and notifies that the time passed shouldn&amp;rsquo;t be restarted:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Composable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">LandingScreen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">onTimeout&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Unit&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// This will always refer to the latest onTimeout function that
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// LandingScreen was recomposed with
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">currentOnTimeout&lt;/span> &lt;span class="k">by&lt;/span> &lt;span class="n">rememberUpdatedState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">onTimeout&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Create an effect that matches the lifecycle of LandingScreen.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// If LandingScreen recomposes, the delay shouldn&amp;#39;t start again.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">LaunchedEffect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">true&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">delay&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SplashWaitTimeMillis&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">currentOnTimeout&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* Landing screen content */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="disposableeffect-effects-that-require-cleanup">DisposableEffect: effects that require cleanup
&lt;/h3>&lt;p>For side effects that need to be &lt;em>cleaned up&lt;/em> after the keys change or if the composable leaves the Composition, use &lt;a class="link" href="https://developer.android.com/reference/kotlin/androidx/compose/runtime/package-summary#DisposableEffect%28kotlin.Any,kotlin.Function1%29" target="_blank" rel="noopener"
>&lt;code>DisposableEffect&lt;/code>&lt;/a>. If the &lt;code>DisposableEffect&lt;/code> keys change, the composable needs to &lt;em>dispose&lt;/em> (do the cleanup for) its current effect, and reset by calling the effect again.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Composable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">HomeScreen&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lifecycleOwner&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">LifecycleOwner&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nc">LocalLifecycleOwner&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">current&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">onStart&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Unit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// Send the &amp;#39;started&amp;#39; analytics event
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">onStop&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Unit&lt;/span> &lt;span class="c1">// Send the &amp;#39;stopped&amp;#39; analytics event
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Safely update the current lambdas when a new one is provided
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">currentOnStart&lt;/span> &lt;span class="k">by&lt;/span> &lt;span class="n">rememberUpdatedState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">onStart&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">currentOnStop&lt;/span> &lt;span class="k">by&lt;/span> &lt;span class="n">rememberUpdatedState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">onStop&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// If `lifecycleOwner` changes, dispose and reset the effect
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">DisposableEffect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lifecycleOwner&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Create an observer that triggers our remembered callbacks
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// for sending analytics events
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">observer&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">LifecycleEventObserver&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">event&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">event&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nc">Lifecycle&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">Event&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ON_START&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">currentOnStart&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">event&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nc">Lifecycle&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">Event&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ON_STOP&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">currentOnStop&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Add the observer to the lifecycle
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">lifecycleOwner&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">lifecycle&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">addObserver&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">observer&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// When the effect leaves the Composition, remove the observer
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">onDispose&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">lifecycleOwner&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">lifecycle&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">removeObserver&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">observer&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* Home screen content */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="sideeffect-publish-compose-state-to-non-compose-code">SideEffect: publish Compose state to non-compose code
&lt;/h3>&lt;p>To share Compose state with objects not managed by compose, use the &lt;a class="link" href="https://developer.android.com/reference/kotlin/androidx/compose/runtime/package-summary#SideEffect%28kotlin.Function0%29" target="_blank" rel="noopener"
>&lt;code>SideEffect&lt;/code>&lt;/a> composable, as it&amp;rsquo;s invoked on every successful recomposition.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Composable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">rememberAnalytics&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">User&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">FirebaseAnalytics&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">analytics&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">FirebaseAnalytics&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">remember&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* ... */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// On every successful composition, update FirebaseAnalytics with
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// the userType from the current User, ensuring that future analytics
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// events have this metadata attached
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">SideEffect&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">analytics&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">setUserProperty&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;userType&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">user&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">userType&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">analytics&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="producestate-convert-non-compose-state-into-compose-state">produceState: convert non-Compose state into Compose state
&lt;/h3>&lt;p>&lt;a class="link" href="https://developer.android.com/reference/kotlin/androidx/compose/runtime/package-summary#produceState%28kotlin.Any,kotlin.coroutines.SuspendFunction1%29" target="_blank" rel="noopener"
>&lt;code>produceState&lt;/code>&lt;/a> launches a coroutine scoped to the Composition that can push values into a returned &lt;a class="link" href="https://developer.android.com/reference/kotlin/androidx/compose/runtime/State" target="_blank" rel="noopener"
>&lt;code>State&lt;/code>&lt;/a>. Use it to convert non-Compose state into Compose state, for example bringing external subscription-driven state such as &lt;code>Flow&lt;/code>, &lt;code>LiveData&lt;/code>, or &lt;code>RxJava&lt;/code> into the Composition.&lt;/p>
&lt;p>The producer is launched when &lt;code>produceState&lt;/code> enters the Composition, and will be cancelled when it leaves the Composition.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Composable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">loadNetworkImage&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">url&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">imageRepository&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">ImageRepository&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">):&lt;/span> &lt;span class="n">State&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Result&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Image&lt;/span>&lt;span class="p">&amp;gt;&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Creates a State&amp;lt;T&amp;gt; with Result.Loading as initial value
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// If either `url` or `imageRepository` changes, the running producer
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// will cancel and will be re-launched with the new inputs.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">produceState&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Result&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Image&lt;/span>&lt;span class="p">&amp;gt;&amp;gt;(&lt;/span>&lt;span class="n">initialValue&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nc">Result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Loading&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">imageRepository&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// In a coroutine, can make suspend calls
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">image&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">imageRepository&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">load&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">url&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Update State with either an Error or Success result.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// This will trigger a recomposition where this State is read
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">value&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">image&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="k">null&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nc">Result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Error&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nc">Result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Success&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">image&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> Composables with a return type should be named the way you&amp;rsquo;d name a normal Kotlin function, starting with a lowercase letter.&lt;/p>
&lt;/blockquote>
&lt;h3 id="derivedstateof-convert-one-or-multiple-state-objects-into-another-state">derivedStateOf: convert one or multiple state objects into another state
&lt;/h3>&lt;p>Use &lt;a class="link" href="https://developer.android.com/reference/kotlin/androidx/compose/runtime/package-summary#derivedStateOf%28kotlin.Function0%29" target="_blank" rel="noopener"
>&lt;code>derivedStateOf&lt;/code>&lt;/a> when a certain state is calculated or derived from other state objects. Using this function guarantees that the calculation will only occur whenever one of the states used in the calculation changes.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Composable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">TodoList&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">highPriorityKeywords&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">listOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Review&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Unblock&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Compose&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">todoTasks&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">remember&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">mutableStateListOf&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Calculate high priority tasks only when the todoTasks or highPriorityKeywords
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// change, not on every recomposition
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">highPriorityTasks&lt;/span> &lt;span class="k">by&lt;/span> &lt;span class="n">remember&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">highPriorityKeywords&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">derivedStateOf&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">todoTasks&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">filter&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">it&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">containsWord&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">highPriorityKeywords&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Box&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nc">Modifier&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">fillMaxSize&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">LazyColumn&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">items&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">highPriorityTasks&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="cm">/* ... */&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">items&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">todoTasks&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="cm">/* ... */&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/* Rest of the UI where users can add elements to the list */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="snapshotflow-convert-composes-state-into-flows">snapshotFlow: convert Compose&amp;rsquo;s State into Flows
&lt;/h3>&lt;p>Use &lt;a class="link" href="https://developer.android.com/reference/kotlin/androidx/compose/runtime/package-summary#snapshotFlow%28kotlin.Function0%29" target="_blank" rel="noopener"
>&lt;code>snapshotFlow&lt;/code>&lt;/a> to convert &lt;a class="link" href="https://developer.android.com/reference/kotlin/androidx/compose/runtime/State" target="_blank" rel="noopener"
>&lt;code>State&lt;/code>&lt;/a> objects into a cold Flow. &lt;code>snapshotFlow&lt;/code> runs its block when collected and emits the result of the &lt;code>State&lt;/code> objects read in it. When one of the &lt;code>State&lt;/code> objects read inside the &lt;code>snapshotFlow&lt;/code> block mutates, the Flow will emit the new value to its collector if the new value is not &lt;a class="link" href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/equals.html" target="_blank" rel="noopener"
>equal to&lt;/a> the previous emitted value (this behavior is similar to that of &lt;a class="link" href="https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/distinct-until-changed.html" target="_blank" rel="noopener"
>&lt;code>Flow.distinctUntilChanged&lt;/code>&lt;/a>).&lt;/p>
&lt;p>The following example shows a side effect that records when the user scrolls past the first item in a list to analytics:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">val&lt;/span> &lt;span class="py">listState&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">rememberLazyListState&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">LazyColumn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">state&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">listState&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">LaunchedEffect&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">listState&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">snapshotFlow&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">listState&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">firstVisibleItemIndex&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">map&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="p">&amp;gt;&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">distinctUntilChanged&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">filter&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">it&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="k">true&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">collect&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nc">MyAnalyticsService&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sendScrolledPastFirstItemEvent&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="restarting-effects">Restarting effects
&lt;/h3>&lt;p>As a rule of thumb, mutable and immutable variables used in the effect block of code should be added as parameters to the effect composable. Apart from those, more parameters can be added to force restarting the effect. If the change of a variable shouldn&amp;rsquo;t cause the effect to restart, the variable should be wrapped in &lt;a class="link" href="https://developer.android.com/jetpack/compose/side-effects#rememberupdatedstate" target="_blank" rel="noopener"
>&lt;code>rememberUpdatedState&lt;/code>&lt;/a>. If the variable never changes because it&amp;rsquo;s wrapped in a &lt;code>remember&lt;/code> with no keys, you don&amp;rsquo;t need to pass the variable as a key to the effect.&lt;/p>
&lt;p>You can use a constant like &lt;code>true&lt;/code> as an effect key to make it &lt;strong>follow the lifecycle of the call site&lt;/strong>.&lt;/p>
&lt;h2 id="phases">Phases
&lt;/h2>&lt;p>Like most other UI toolkits, Compose renders a frame through several distinct &lt;em>phases&lt;/em>.&lt;/p>
&lt;p>Compose has three main phases:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Composition&lt;/strong>: &lt;em>What&lt;/em> UI to show. Compose runs composable functions and creates a description of your UI.&lt;/li>
&lt;li>&lt;strong>Layout&lt;/strong>: &lt;em>Where&lt;/em> to place UI. This phase consists of two steps: measurement and placement. Layout elements measure and place themselves and any child elements in 2D coordinates, for each node in the layout tree.&lt;/li>
&lt;li>&lt;strong>Drawing&lt;/strong>: &lt;em>How&lt;/em> it renders. UI elements draw into a Canvas, usually a device screen.&lt;/li>
&lt;/ol>
&lt;p>The order of these phases is generally the same, allowing data to flow in one direction from composition to layout to drawing to produce a frame (also known as &lt;a class="link" href="https://developer.android.com/jetpack/compose/architecture#udf" target="_blank" rel="noopener"
>unidirectional data flow&lt;/a>). &lt;a class="link" href="https://developer.android.com/jetpack/compose/layouts/basics#constraints" target="_blank" rel="noopener"
>&lt;code>BoxWithConstraints&lt;/code>&lt;/a> and &lt;a class="link" href="https://developer.android.com/jetpack/compose/lists#lazy" target="_blank" rel="noopener"
>&lt;code>LazyColumn&lt;/code> and &lt;code>LazyRow&lt;/code>&lt;/a> are notable exceptions, where the composition of its children depends on the parent&amp;rsquo;s layout phase.&lt;/p>
&lt;h2 id="architectural-layering">Architectural Layering
&lt;/h2>&lt;p>The major layers of Jetpack Compose are:&lt;/p>
&lt;p>&lt;img src="https://developer.android.com/static/images/jetpack/compose/layering-major-layers.svg"
loading="lazy"
alt="img"
>&lt;/p>
&lt;p>Each layer is built upon the lower levels, combining functionality to create higher level components.&lt;/p>
&lt;h2 id="semantics">Semantics
&lt;/h2>&lt;p>The Composition is a tree-structure that consists of the composables that describe your UI.&lt;/p>
&lt;p>Next to the Composition, there exists a parallel tree, called the &lt;em>Semantics tree&lt;/em>. This tree describes your UI in an alternative manner that is understandable for &lt;a class="link" href="https://developer.android.com/jetpack/compose/accessibility" target="_blank" rel="noopener"
>Accessibility&lt;/a> services and for the &lt;a class="link" href="https://developer.android.com/jetpack/compose/testing" target="_blank" rel="noopener"
>Testing&lt;/a> framework.&lt;/p>
&lt;p>If your app consists of composables and modifiers from the Compose foundation and material library, the Semantics tree is automatically filled and generated for you. However &lt;strong>when you’re adding custom low-level composables, you will have to manually provide its semantics&lt;/strong>&lt;/p>
&lt;h2 id="compositionlocal">CompositionLocal
&lt;/h2>&lt;p>&lt;code>CompositionLocal&lt;/code>s can be used as an implicit way to have data flow through a composition.&lt;/p>
&lt;p>&lt;code>CompositionLocal&lt;/code> elements are usually provided with a value in a certain node of the UI tree. That value can be used by its composable descendants without declaring the &lt;code>CompositionLocal&lt;/code> as a parameter in the composable function.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Define a CompositionLocal global object with a default
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// This instance can be accessed by all composables in the app
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">ActiveUser&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">compositionLocalOf&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">User&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;No active user found!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Composable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">UserPhoto&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">user&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nc">ActiveUser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">current&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ProfileIcon&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">src&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">user&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">profilePhotoUrl&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Composable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">App&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">user&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">User&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">CompositionLocalProvider&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ActiveUser&lt;/span> &lt;span class="n">provides&lt;/span> &lt;span class="n">user&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SomeScreen&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Composable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">SomeScreen&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">UserPhoto&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Composable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">UserPhoto&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">user&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nc">ActiveUser&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">current&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ProfileIcon&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">src&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">user&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">profilePhotoUrl&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>There are two APIs to create a &lt;code>CompositionLocal&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://developer.android.com/reference/kotlin/androidx/compose/runtime/package-summary#compositionLocalOf%28androidx.compose.runtime.SnapshotMutationPolicy,kotlin.Function0%29" target="_blank" rel="noopener"
>&lt;code>compositionLocalOf&lt;/code>&lt;/a>: Changing the value provided during recomposition invalidates &lt;em>only&lt;/em> the content that reads its &lt;a class="link" href="https://developer.android.com/reference/kotlin/androidx/compose/runtime/CompositionLocal#current%28%29" target="_blank" rel="noopener"
>&lt;code>current&lt;/code>&lt;/a> value.&lt;/li>
&lt;li>&lt;a class="link" href="https://developer.android.com/reference/kotlin/androidx/compose/runtime/package-summary#staticCompositionLocalOf%28kotlin.Function0%29" target="_blank" rel="noopener"
>&lt;code>staticCompositionLocalOf&lt;/code>&lt;/a>: Unlike &lt;code>compositionLocalOf&lt;/code>, reads of a &lt;code>staticCompositionLocalOf&lt;/code> are not tracked by Compose. Changing the value causes the entirety of the &lt;code>content&lt;/code> lambda where the &lt;code>CompositionLocal&lt;/code> is provided to be recomposed, instead of just the places where the &lt;code>current&lt;/code> value is read in the Composition.&lt;/li>
&lt;/ul>
&lt;p>If the value provided to the &lt;code>CompositionLocal&lt;/code> is highly unlikely to change or will never change, use &lt;code>staticCompositionLocalOf&lt;/code> to get performance benefits.&lt;/p>
&lt;h2 id="navigation">Navigation
&lt;/h2>&lt;p>The &lt;a class="link" href="https://developer.android.com/reference/androidx/navigation/NavController" target="_blank" rel="noopener"
>&lt;code>NavController&lt;/code>&lt;/a> is the central API for the Navigation component. It is stateful and keeps track of the back stack of composables that make up the screens in your app and the state of each screen.&lt;/p>
&lt;p>You can create a &lt;code>NavController&lt;/code> by using the &lt;a class="link" href="https://developer.android.com/reference/kotlin/androidx/navigation/compose/package-summary#rememberNavController%28kotlin.Array%29" target="_blank" rel="noopener"
>&lt;code>rememberNavController()&lt;/code>&lt;/a> method in your composable:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">val&lt;/span> &lt;span class="py">navController&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">rememberNavController&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You should create the &lt;code>NavController&lt;/code> in the place in your composable hierarchy where all composables that need to reference it have access to it. This follows the principles of &lt;a class="link" href="https://developer.android.com/jetpack/compose/state#state-hoisting" target="_blank" rel="noopener"
>state hoisting&lt;/a> and allows you to use the &lt;code>NavController&lt;/code> and the state it provides via &lt;a class="link" href="https://developer.android.com/reference/kotlin/androidx/navigation/compose/package-summary#%28androidx.navigation.NavController%29.currentBackStackEntryAsState%28%29" target="_blank" rel="noopener"
>&lt;code>currentBackStackEntryAsState()&lt;/code>&lt;/a> to be used as the source of truth for updating composables outside of your screens.&lt;/p>
&lt;p>Each &lt;a class="link" href="https://developer.android.com/reference/androidx/navigation/NavController" target="_blank" rel="noopener"
>&lt;code>NavController&lt;/code>&lt;/a> must be associated with a single &lt;a class="link" href="https://developer.android.com/reference/androidx/navigation/NavHost" target="_blank" rel="noopener"
>&lt;code>NavHost&lt;/code>&lt;/a> composable. The &lt;code>NavHost&lt;/code> links the &lt;code>NavController&lt;/code> with a navigation graph that specifies the composable destinations that you should be able to navigate between. As you navigate between composables, the content of the &lt;code>NavHost&lt;/code> is automatically &lt;a class="link" href="https://developer.android.com/jetpack/compose/mental-model#recomposition" target="_blank" rel="noopener"
>recomposed&lt;/a>. Each composable destination in your navigation graph is associated with a &lt;em>route&lt;/em>.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Key Term:&lt;/strong> &lt;strong>Route&lt;/strong> is a &lt;code>String&lt;/code> that defines the path to your composable. You can think of it as an implicit deep link that leads to a specific destination. Each destination should have a unique route.&lt;/p>
&lt;/blockquote>
&lt;p>Creating the &lt;code>NavHost&lt;/code> requires the &lt;code>NavController&lt;/code> previously created via &lt;code>rememberNavController()&lt;/code> and the route of the starting destination of your graph. &lt;code>NavHost&lt;/code> creation uses the lambda syntax from the &lt;a class="link" href="https://developer.android.com/guide/navigation/navigation-kotlin-dsl#navgraphbuilder" target="_blank" rel="noopener"
>Navigation Kotlin DSL&lt;/a> to construct your navigation graph. You can add to your navigation structure by using the &lt;a class="link" href="https://developer.android.com/reference/kotlin/androidx/navigation/compose/package-summary#%28androidx.navigation.NavGraphBuilder%29.composable%28kotlin.String,kotlin.collections.List,kotlin.collections.List,kotlin.Function1%29" target="_blank" rel="noopener"
>&lt;code>composable()&lt;/code>&lt;/a> method. This method requires that you provide a route and the composable that should be linked to the destination:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="n">NavHost&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">navController&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">navController&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">startDestination&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;profile&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">composable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;profile&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">Profile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="cm">/*...*/&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">composable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;friendslist&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">FriendsList&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="cm">/*...*/&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/*...*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> the Navigation Component requires that you follow the &lt;a class="link" href="https://developer.android.com/guide/navigation/navigation-principles#fixed_start_destination" target="_blank" rel="noopener"
>Principles of Navigation&lt;/a> and use a fixed starting destination. You should not use a composable value for the &lt;code>startDestination&lt;/code> route.&lt;/p>
&lt;/blockquote>
&lt;p>To navigate to a composable destination in the navigation graph, you must use the &lt;a class="link" href="https://developer.android.com/reference/androidx/navigation/NavController#navigate%28kotlin.String,androidx.navigation.NavOptions,androidx.navigation.Navigator.Extras%29" target="_blank" rel="noopener"
>&lt;code>navigate&lt;/code>&lt;/a> method. &lt;code>navigate&lt;/code> takes a single &lt;code>String&lt;/code> parameter that represents the destination’s route. To navigate from a composable within the navigation graph, call &lt;code>navigate&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="n">navController&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">navigate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;friendslist&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>By default, &lt;a class="link" href="https://developer.android.com/reference/androidx/navigation/NavController#navigate%28kotlin.String,androidx.navigation.NavOptions,androidx.navigation.Navigator.Extras%29" target="_blank" rel="noopener"
>&lt;code>navigate&lt;/code>&lt;/a> adds your new destination to the back stack. You can modify the behavior of &lt;code>navigate&lt;/code> by attaching additional navigation options to our &lt;code>navigate()&lt;/code> call:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Pop everything up to the &amp;#34;home&amp;#34; destination off the back stack before
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// navigating to the &amp;#34;friendslist&amp;#34; destination
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">navController&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">navigate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;friendslist&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">popUpTo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;home&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Pop everything up to and including the &amp;#34;home&amp;#34; destination off
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// the back stack before navigating to the &amp;#34;friendslist&amp;#34; destination
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">navController&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">navigate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;friendslist&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">popUpTo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;home&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">inclusive&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">true&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Navigate to the &amp;#34;search” destination only if we’re not already on
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// the &amp;#34;search&amp;#34; destination, avoiding multiple copies on the top of the
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// back stack
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">navController&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">navigate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;search&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">launchSingleTop&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Destinations can be grouped into a &lt;a class="link" href="https://developer.android.com/guide/navigation/navigation-design-graph#nested_graphs" target="_blank" rel="noopener"
>nested graph&lt;/a> to modularize a particular flow in your app’s UI. An example of this could be a self-contained login flow.&lt;/p>
&lt;p>The nested graph encapsulates its destinations. As with the root graph, a nested graph must have a destination identified as the start destination by its route. This is the destination that is navigated to when you navigate to the route associated with the nested graph.&lt;/p>
&lt;p>To add a nested graph to your &lt;code>NavHost&lt;/code>, you can use the &lt;a class="link" href="https://developer.android.com/reference/kotlin/androidx/navigation/compose/package-summary#%28androidx.navigation.NavGraphBuilder%29.navigation%28kotlin.String,kotlin.String,kotlin.collections.List,kotlin.collections.List,kotlin.Function1%29" target="_blank" rel="noopener"
>&lt;code>navigation&lt;/code>&lt;/a> extension function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="n">NavHost&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">navController&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">startDestination&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;home&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">..&lt;/span>&lt;span class="p">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Navigating to the graph via its route (&amp;#39;login&amp;#39;) automatically
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// navigates to the graph&amp;#39;s start destination - &amp;#39;username&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// therefore encapsulating the graph&amp;#39;s internal routing logic
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">navigation&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">startDestination&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;username&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">route&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;login&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">composable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;username&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="o">..&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">composable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;password&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="o">..&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">composable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;registration&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="o">..&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">..&lt;/span>&lt;span class="p">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It is strongly recommended that you split your navigation graph into multiple methods as the graph grows in size. This also allows multiple modules to contribute their own navigation graphs.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">NavGraphBuilder&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">loginGraph&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">navController&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">NavController&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">navigation&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">startDestination&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;username&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">route&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;login&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">composable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;username&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="o">..&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">composable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;password&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="o">..&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">composable&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;registration&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="o">..&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>By making the method an extension method on &lt;a class="link" href="https://developer.android.com/reference/kotlin/androidx/navigation/NavGraphBuilder" target="_blank" rel="noopener"
>&lt;code>NavGraphBuilder&lt;/code>&lt;/a>, you can use it alongside the prebuilt &lt;code>navigation&lt;/code>, &lt;code>composable&lt;/code>, and &lt;code>dialog&lt;/code> extension methods:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="n">NavHost&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">navController&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">startDestination&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;home&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">..&lt;/span>&lt;span class="p">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">loginGraph&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">navController&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">..&lt;/span>&lt;span class="p">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ui-design">UI Design
&lt;/h2>&lt;h3 id="layout">Layout
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>Column&lt;/p>
&lt;p>Use &lt;a class="link" href="https://developer.android.com/reference/kotlin/androidx/compose/foundation/layout/package-summary#Column%28androidx.compose.ui.Modifier,androidx.compose.foundation.layout.Arrangement.Vertical,androidx.compose.ui.Alignment.Horizontal,kotlin.Function1%29%28androidx.compose.ui.Modifier,androidx.compose.foundation.layout.Arrangement.Vertical,androidx.compose.ui.Alignment.Horizontal,kotlin.Function1%29" target="_blank" rel="noopener"
>&lt;code>Column&lt;/code>&lt;/a> to place items vertically on the screen.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Row&lt;/p>
&lt;p>Similarly, use &lt;a class="link" href="https://developer.android.com/reference/kotlin/androidx/compose/foundation/layout/package-summary#Row%28androidx.compose.ui.Modifier,androidx.compose.foundation.layout.Arrangement.Horizontal,androidx.compose.ui.Alignment.Vertical,kotlin.Function1%29%28androidx.compose.ui.Modifier,androidx.compose.foundation.layout.Arrangement.Horizontal,androidx.compose.ui.Alignment.Vertical,kotlin.Function1%29" target="_blank" rel="noopener"
>&lt;code>Row&lt;/code>&lt;/a> to place items horizontally on the screen. Both &lt;code>Column&lt;/code> and &lt;code>Row&lt;/code> support configuring the alignment of the elements they contain.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Box&lt;/p>
&lt;p>Use &lt;a class="link" href="https://developer.android.com/reference/kotlin/androidx/compose/foundation/layout/package-summary#Box%28androidx.compose.ui.Modifier,androidx.compose.ui.Alignment,kotlin.Boolean,kotlin.Function1%29" target="_blank" rel="noopener"
>&lt;code>Box&lt;/code>&lt;/a> to put elements on top of another. &lt;code>Box&lt;/code> also supports configuring specific alignment of the elements it contains.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Often these building blocks are all you need. You can write your own composable function to combine these layouts into a more elaborate layout that suits your app.&lt;/p>
&lt;p>&lt;img src="https://developer.android.com/static/images/jetpack/compose/layout-column-row-box.svg"
loading="lazy"
alt="Compares three simple layout composables: column, row, and box"
>&lt;/p>
&lt;p>To set children&amp;rsquo;s position within a &lt;code>Row&lt;/code>, set the &lt;code>horizontalArrangement&lt;/code> and &lt;code>verticalAlignment&lt;/code> arguments. For a &lt;code>Column&lt;/code>, set the &lt;code>verticalArrangement&lt;/code> and &lt;code>horizontalAlignment&lt;/code> arguments.&lt;/p>
&lt;p>In order to know the constraints coming from the parent and design the layout accordingly, you can use a &lt;code>BoxWithConstraints&lt;/code>.&lt;/p>
&lt;h4 id="content-slots">Content slots
&lt;/h4>&lt;p>Material Components that support inner content (text labels, icons, etc.) tend to offer “slots” — generic lambdas that accept composable content — as well as public constants, like size and padding, to support laying out inner content to match Material specifications.&lt;/p>
&lt;h2 id="testing-apis">Testing APIs
&lt;/h2>&lt;p>There are three main ways to interact with elements:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Finders&lt;/strong> let you select one or multiple elements (or &lt;em>nodes&lt;/em> in the Semantics tree) to make assertions or perform actions on them.&lt;/li>
&lt;li>&lt;strong>Assertions&lt;/strong> are used to verify that the elements exist or have certain attributes.&lt;/li>
&lt;li>&lt;strong>Actions&lt;/strong> inject simulated user events on the elements, such as clicks or other gestures.&lt;/li>
&lt;/ul>
&lt;p>Some of these APIs accept a &lt;a class="link" href="https://developer.android.com/reference/kotlin/androidx/compose/ui/test/SemanticsMatcher" target="_blank" rel="noopener"
>&lt;code>SemanticsMatcher&lt;/code>&lt;/a> to refer to one or more &lt;em>nodes&lt;/em> in the semantics tree.&lt;/p>
&lt;h3 id="finders">Finders
&lt;/h3>&lt;p>You can use &lt;a class="link" href="https://developer.android.com/reference/kotlin/androidx/compose/ui/test/SemanticsNodeInteractionsProvider#onNode%28androidx.compose.ui.test.SemanticsMatcher,kotlin.Boolean%29" target="_blank" rel="noopener"
>&lt;code>onNode&lt;/code>&lt;/a> and &lt;a class="link" href="https://developer.android.com/reference/kotlin/androidx/compose/ui/test/SemanticsNodeInteractionsProvider#onAllNodes%28androidx.compose.ui.test.SemanticsMatcher,kotlin.Boolean%29" target="_blank" rel="noopener"
>&lt;code>onAllNodes&lt;/code>&lt;/a> to select one or multiple nodes respectively, but you can also use convenience finders for the most common searches, such as &lt;a class="link" href="https://developer.android.com/reference/kotlin/androidx/compose/ui/test/package-summary#%28androidx.compose.ui.test.SemanticsNodeInteractionsProvider%29.onNodeWithText%28kotlin.String,kotlin.Boolean,kotlin.Boolean,kotlin.Boolean%29" target="_blank" rel="noopener"
>&lt;code>onNodeWithText&lt;/code>&lt;/a> , &lt;a class="link" href="https://developer.android.com/reference/kotlin/androidx/compose/ui/test/package-summary#%28androidx.compose.ui.test.SemanticsNodeInteractionsProvider%29.onNodeWithContentDescription%28kotlin.String,kotlin.Boolean,kotlin.Boolean,kotlin.Boolean%29" target="_blank" rel="noopener"
>&lt;code>onNodeWithContentDescription&lt;/code>&lt;/a>, etc.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="n">composeTestRule&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">onNode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hasText&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Button&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1">// Equivalent to onNodeWithText(&amp;#34;Button&amp;#34;)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="assertions">Assertions
&lt;/h3>&lt;p>Check assertions by calling &lt;code>assert()&lt;/code> on the &lt;code>SemanticsNodeInteraction&lt;/code> returned by a finder with one or multiple matchers:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Single matcher:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">composeTestRule&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">onNode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">matcher&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hasText&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Button&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="c1">// hasText is a SemanticsMatcher
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Multiple matchers can use and / or
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">composeTestRule&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">onNode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">matcher&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">assert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">hasText&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Button&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">or&lt;/span> &lt;span class="n">hasText&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Button2&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can also use convenience functions for the most common assertions, such as &lt;a class="link" href="https://developer.android.com/reference/kotlin/androidx/compose/ui/test/SemanticsNodeInteraction#assertExists%28kotlin.String%29" target="_blank" rel="noopener"
>&lt;code>assertExists&lt;/code>&lt;/a> , &lt;a class="link" href="https://developer.android.com/reference/kotlin/androidx/compose/ui/test/SemanticsNodeInteraction#%28androidx.compose.ui.test.SemanticsNodeInteraction%29.assertIsDisplayed%28%29" target="_blank" rel="noopener"
>&lt;code>assertIsDisplayed&lt;/code>&lt;/a> , &lt;a class="link" href="https://developer.android.com/reference/kotlin/androidx/compose/ui/test/SemanticsNodeInteraction#%28androidx.compose.ui.test.SemanticsNodeInteraction%29.assertTextEquals%28kotlin.Array,kotlin.Boolean%29" target="_blank" rel="noopener"
>&lt;code>assertTextEquals&lt;/code>&lt;/a> , etc. You can browse the complete list in the &lt;a class="link" href="https://developer.android.com/jetpack/compose/testing-cheatsheet" target="_blank" rel="noopener"
>Compose Testing cheat sheet&lt;/a>.&lt;/p>
&lt;h3 id="actions">Actions
&lt;/h3>&lt;p>To inject an action on a node, call a &lt;code>perform…()&lt;/code> function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="n">composeTestRule&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">onNode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="p">.).&lt;/span>&lt;span class="n">performClick&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> You cannot chain actions inside a perform function. Instead, make multiple &lt;code>perform()&lt;/code> calls.&lt;/p>
&lt;/blockquote></description></item><item><title>【Android】金旭亮-Android应用开发</title><link>https://dyhes.github.io/p/android%E9%87%91%E6%97%AD%E4%BA%AE-android%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/</link><pubDate>Tue, 16 Nov 2021 00:00:00 +0000</pubDate><guid>https://dyhes.github.io/p/android%E9%87%91%E6%97%AD%E4%BA%AE-android%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/</guid><description>&lt;h2 id="视图模式">视图模式
&lt;/h2>&lt;p>Android Studio支持以多种方式查看Android项目，可点击左上角的下拉菜单在各视图模式之间进行切换。&lt;/p>
&lt;p>开发中最常用的是两个视图：&lt;/p>
&lt;p>（1）Android：一般开发时使用这 个视图，它帮助隐藏和折叠了一些 开发很少用到的文件和文件夹。&lt;/p>
&lt;p>（2）Project：与真实的文件管理器 中看到的文件和文件夹内容一致。&lt;/p>
&lt;h2 id="总体结构">总体结构
&lt;/h2>&lt;ul>
&lt;li>AndroidManifest.xml：用于设置 Android应用的各种配置参数。&lt;/li>
&lt;li>Java:程序员为Activity/Fragment所写的代 码放在java文件夹下的相应包文件夹中&lt;/li>
&lt;li>Android Studio使用Gradle构建项目， 这些文件中最重要的就是项目与模块所 关联的build.gradle文件。&lt;/li>
&lt;/ul>
&lt;h2 id="控件">控件
&lt;/h2>&lt;p>整个App界面是一个Activity， 其中包容有其他UI控件&lt;/p>
&lt;p>一个Activity代表一个单独的用户可见的界面，由各种可视化控件所构成。&lt;/p>
&lt;h3 id="view">View
&lt;/h3>&lt;p>所有的Android控件都派生自View&lt;/p>
&lt;h3 id="viewgroup">ViewGroup
&lt;/h3>&lt;p>能够包容其他Android控件的控件，称为“容器” 控件，派生自ViewGroup&lt;/p>
&lt;h3 id="layout">Layout
&lt;/h3>&lt;p>一种特殊的“容器”控件， 本身不可见，其职责是排 列它所包容的控件。&lt;/p>
&lt;p>App中的UI界面与功能代码是分离的&lt;/p>
&lt;p>Kotlin/Java代码 （.java/.kt），完成 交互和数据处理功能。&lt;/p>
&lt;p>布局文件（.xml）确定 Activity的界面呈现&lt;/p>
&lt;h2 id="步骤">步骤
&lt;/h2>&lt;ul>
&lt;li>使用xml定义UI布局文件，其中需要通过代码访问的控件需要给 定一个Id。&lt;/li>
&lt;li>.在onCreate()方法中setContentView(布局文件），指定Activity使用 此特定的界面布局。&lt;/li>
&lt;li>使用findViewById()方法获取特定控件的引用&lt;/li>
&lt;li>调整控件的属性、给其特定事件添加响应代码&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>消除findViewById:&lt;/p>
&lt;p>视图绑定 （View Binding）&lt;/p>
&lt;p>数据绑定库 （Data Binding Library）&lt;/p>
&lt;/blockquote>
&lt;h2 id="log类">Log类
&lt;/h2>&lt;p>当Android App运行时，可以使用Log类，在Logcat面板输出信息&lt;/p>
&lt;ol>
&lt;li>Log.v(String tag, String msg)；（VERBOSE）&lt;/li>
&lt;li>Log.d(String tag, String msg)；（DEBUG）&lt;/li>
&lt;li>Log.i(String tag, String msg)；（INFO）&lt;/li>
&lt;li>Log.w(String tag, String msg)；（WARN）&lt;/li>
&lt;li>Log.e(String tag, String msg)；（ERROR）&lt;/li>
&lt;/ol>
&lt;h3 id="compared-with-timber">compared with Timber
&lt;/h3>&lt;p>它会自动检测它所处的类，使用类名作为TAG，从而省去了自定 义TAG的麻烦，但在需要时你也可以人工指定TAG名称。&lt;/p>
&lt;p>当使用Release模式发布App时，它会自动地Disable掉，无需 人工处理。&lt;/p>
&lt;h2 id="显示信息">显示信息
&lt;/h2>&lt;h3 id="toast">Toast
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Toast&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">makeText&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Context对象&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;要显示的信息&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">Toast&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">LENGTH_LONG&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="na">show&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>有许多的Android函数都需要有一个Context对象作为参数。&lt;/p>
&lt;p>使用Context对象，你就可以获取Android操作系统的当前状态信息，访问到Android操作系统的各种组件，调用它的服务。&lt;/p>
&lt;p>Android应用中常见的界面组件——Activity和Fragment（后 面课程介绍），都派生自Context类，所以，它们都可以看成是一个Context对象。当你在编程中发现某个方法需要有一个 Context对象时，直接将一个Activity或Fragment对象的引用传给它就好了，也可以通过“控件变量名.context”得到一 个Context对象。&lt;/p>
&lt;/blockquote>
&lt;h3 id="对话框">对话框
&lt;/h3>&lt;p>Dialog&lt;/p>
&lt;h2 id="图片">图片
&lt;/h2>&lt;p>Android项目的drawable文件夹用于保存App中用到的图片或图标。可以从网上找到各种图片（.jpg或.png），直接将其复制到此文件夹中，即可供App所使用。&lt;/p>
&lt;p>复制到drawable文件夹下的图片，拥有一 个（资源）标识值，其格式为： 放在drawable中的图片文件，其名字中不要有汉字或空格等字 符，应该采用全英文小写字母作为文件名。&lt;/p>
&lt;p>R.drawable.图片文件名&lt;/p>
&lt;p>Android Studio中可以创建 两种类型的图片资源，一种 称为“Image Asset”，是 基于像素的位图，另一种是 “Vector Asset”，是一种 矢量图形。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>位图图形即常见的“数码相 片”，扩展名通常为“.jpg” 或“.png”，当放大到一定程度时，可以明显地看到其中的像素色块。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>矢量图形是使用数学方式描述的，可以随意地放大和缩小，清晰度不会改变，在 Android中，这种图像资源的扩展名为&amp;quot;.xml&amp;quot;&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="菜单">菜单
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>在res/menu中编写菜单资源文件&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在Activity中重写&lt;strong>onCreateOptionsMenu&lt;/strong> 和&lt;strong>onOptionsItemSelected&lt;/strong>两个方法&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="context-menu">context menu
&lt;/h3>&lt;p>调用registerForContextMenu()方 法为某个view注册上下文菜单，其参 数就是那个长按弹出上下文菜单的控 件，此方法一般在onCreate里面调用&lt;/p>
&lt;h2 id="用户输入">用户输入
&lt;/h2>&lt;p>EditText是Android App中让用户输入信息 的主要控件之一。&lt;/p>
&lt;p>为了规范用户的输入信息， EditText提供 了InputType属性，用于过滤掉不合法的输 入字符，只有符合输入类型要求的字符，才 允许接收并显示出来。&lt;/p>
&lt;p>可以给EditText提供一个实现了TextWatcher接口的对象，在里面写代码实现特定的监控功能。&lt;/p>
&lt;h2 id="布局">布局
&lt;/h2>&lt;p>使用XML定义App界面并非唯一的方式，可以使用代码完成相同的功能：&lt;/p>
&lt;p>事实上，用XML定义的界面，最后也是要转换为代码来实现布局的&lt;/p>
&lt;blockquote>
&lt;p>实际开发中，应该使用XML为设计UI的主要方式，代码作为辅助手段。 但现在Google正在研发一种称为Compose的技术，完全使用kotlin取代 XML来定义界面，非常值得关注，它很可能代表了技术的发展方向&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="C:%5cUsers%5cdyhes%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20220415103836954.png"
loading="lazy"
alt="image-20220415103836954"
>&lt;/p>
&lt;h3 id="viewgroup-1">ViewGroup
&lt;/h3>&lt;p>View有一个特殊的子类，称为ViewGroup。ViewGroup提供了&lt;strong>对其子组件的管理功能&lt;/strong>，包括布局、动画等。ViewGroup的子组件可以是View也可以是ViewGroup。常用的布局控件（比如LinearLayout）都是ViewGroup的子类。&lt;/p>
&lt;h3 id="box-model">Box Model
&lt;/h3>&lt;p>• View支持padding，但是不支持margin。&lt;/p>
&lt;p>• ViewGroup支持padding和margin&lt;/p>
&lt;p>Android控件所占的具体位置，是由其父控件（主要就是布局控件）通过layout_width和layout_height等相关布局属性在App运行时“动态” 计算出来的，上述两个属性可以取的值有三种：&lt;/p>
&lt;ul>
&lt;li>固定值：比如100dp&lt;/li>
&lt;li>wrap_content：数值依控件所显示的具体内容而定&lt;/li>
&lt;li>match_parent：与其父控件的数值相匹配（一致）&lt;/li>
&lt;/ul>
&lt;h3 id="度量">度量
&lt;/h3>&lt;p>采用设备无关的像素（dp：Density-independent Pixel），能够让图像在不同分辨率的屏幕上都显示出一样的大小。&lt;/p>
&lt;p>布局通常使用dp作为单位，而字体尺寸则使用sp（Scalable pixels） 作为单位，这两者基本上是一样的，只不过sp会保留用户的设置（比如 用户可以选择使用大字体来显示App上的文本）&lt;/p>
&lt;h3 id="颜色">颜色
&lt;/h3>&lt;p>Android系统有12种已经定义好的颜色，具体的类型定义在Color类中。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">textView&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">setTextColor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Color&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">RED&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在布局文件中设置颜色需要在色值前面加“#”，如 android:textColor=&amp;quot;#000000&amp;quot;。 也可以通过Color.rgb(int red, int green, int blue) 和Color.argb(int alpha, int red, int green, int blue)这两种方法指定颜色，后者可以同时指定“透明度”。 在代码中设置颜色可以直接填八位的十六进制数值，如 setTextColor(0xff00ff000)&lt;/p>
&lt;h5 id="colorsxml">colors.xml
&lt;/h5>&lt;p>res/values目录下有个colors.xml文件，可用于定义颜色常量。&lt;/p>
&lt;ul>
&lt;li>如果要在布局、样式等XML文件中使用颜色常量，可以使用“@color/ 颜色常量名”的方式&lt;/li>
&lt;li>如果要在代码中使用XML颜色常量，在Activity中可通过这行代码获取： getResources().getColor(R.color.颜色常量名)。&lt;/li>
&lt;/ul>
&lt;h3 id="布局控件">布局控件
&lt;/h3>&lt;p>早期的Andorid提供了很多种布局控件， 不少都被废弃了，就当前的学习者来 说，只需要掌握&lt;strong>LinearLayout、 FrameLayout、ConstraintLayout&lt;/strong> 这三种控件就足以应付大多数Android 应用开发场景&lt;/p>
&lt;ul>
&lt;li>
&lt;p>LinearLayout:&lt;/p>
&lt;p>LinearLayout是一种Android中最常 用的布局，它将自己包含的子元素按 照一个特定的方向进行排列。&lt;/p>
&lt;p>排列方向有两种：水平和垂直&lt;/p>
&lt;/li>
&lt;li>
&lt;p>FrameLayout:&lt;/p>
&lt;p>所有的子控件都被放置在FrameLayout区域最左上 的区域。而且无法为这些控件指定一个精确的位置， 但可以通过layout_gravity指定放置区域。&lt;/p>
&lt;p>如果一个FrameLayout里边有多个子控件，不做任 何调整的话，那么后边的子控件的显示会重叠在前一个控件上。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ConstraintLayout:&lt;/p>
&lt;p>Very important&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>扁平的控件层次结构优于多层 的控件层次结构。&lt;/p>
&lt;p>因此，为了能提升Android应用界面的绘制速度，现在推荐使用 “扁平化”的ConstraintLayout来设计那些比较复杂的原先必须 使用“多层嵌套”才能实现的用户界面。&lt;/p>
&lt;h5 id="layout_gravity和gravity">layout_gravity和gravity
&lt;/h5>&lt;p>layout_gravity设定该控件与上级 级控件的对齐方式，而gravity设定 布局内部子控件对齐与排列方式。&lt;/p>
&lt;p>使用layout_gravity，通常 要求控件的尺寸是 &amp;ldquo;wrap_content&amp;rdquo;，而要使用 gravity，控件的尺寸通常 是&amp;quot;match_parent&amp;quot;&lt;/p>
&lt;h5 id="weightsum和layout_weight">weightSum和layout_weight
&lt;/h5>&lt;p>“指定所有子控件weight 之和”。 • 子控件的layout_weight值设定其在 weightSum中所占的份额。&lt;/p>
&lt;p>也可以不指定weightSum，直接按照子 控件的layout_weight值“协商”瓜分 可用的空间，值大的，占据更大的空间。&lt;/p>
&lt;h2 id="constraintlayout">ConstraintLayout
&lt;/h2>&lt;p>在build.gradle中添加以下依赖：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-gradle" data-lang="gradle">&lt;span class="line">&lt;span class="cl">&lt;span class="n">dependencies&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">implementation&lt;/span> &lt;span class="s1">&amp;#39;androidx.constraintlayout:constraintlayout:2.1.3&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Android内置的控件，比如TextView，可以直接在XML中使用其 类名。另外，其属性名前通常有“android:”前缀，表明它是 系统内置的控件，随着用户手机操作系统而一同安装，App可以 直接使用它们。&lt;/p>
&lt;p>ConstraintLayout是一个外部库（library）控件，并不是 Android的有机组成部分。它本身必须被打包到Apk中，与应用一起 安装。它的属性以app:开头&lt;/p>
&lt;h2 id="activity生命周期">Activity生命周期
&lt;/h2>&lt;p>状态：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Initialized&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Created&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Started&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Resumed&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Destroyed&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>在Android 中，Activity 的生命周期交给操作系统统一管理。&lt;/p>
&lt;p>在android.app.Activity 类中，Android 定义了一系列与生命周期相 关的方法，这些方法将被系统在合适的时机回调，我们可以根据 需要“覆盖（或重写，override）”特定的方法。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">Activity&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">protected&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">onCreate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Bundle&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">savedInstanceState&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">protected&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">onStart&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">protected&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">onResume&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">protected&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">onPause&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">protected&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">onStop&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="kd">protected&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">onDestroy&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="C:%5cUsers%5cdyhes%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20220415145259260.png"
loading="lazy"
alt="image-20220415145259260"
>&lt;/p>
&lt;p>调用Activity的finish()方法可以通知Android销毁Activity对 象并将它从Back Stack（回退堆栈）中移除，这时，onDestory() 方法会被调用，可以在此方法中“清理必要的资源”&lt;/p>
&lt;h3 id="创建activity">创建activity
&lt;/h3>&lt;ul>
&lt;li>为新Activity创建一个布局文件，设计好其布局。&lt;/li>
&lt;li>在App的清单文件中注册这个Activity。&lt;/li>
&lt;li>创建一个Intent实例，调用startActivity(intent)方法，即可启动并显示这个Activity。&lt;/li>
&lt;li>创建一个Activity类，并且在Activity的onCreate()方法中将布局文件与Activity关联起来&lt;/li>
&lt;/ul>
&lt;h3 id="activity信息交流">activity信息交流
&lt;/h3>&lt;ul>
&lt;li>Intent提供了putExtra()系列 方法将信息放到Bundle中&lt;/li>
&lt;li>可以使用getXXExtra()系列 方法取出信息&lt;/li>
&lt;/ul>
&lt;p>如果是离散的基础数据类型（比如Int和String）信息，直接调用putXXX系 列方法存入&lt;/p>
&lt;p>如果是一个对象，需要进行特殊的处理，让其实现Parcelable接口，并 附加@Parcelize注解&lt;/p>
&lt;p>随着技术的不断演进，特别是Android Jetpack相关组件的推出，现在更推荐 采用“单Activity多Fragment”的方式&lt;/p>
&lt;h2 id="back-stack">Back Stack
&lt;/h2>&lt;p>用户使用App的过程可以看成是多个Activity顺序显示 的过程，用户可以随时使用“Back”键回退回前一 个Activity。但这里有一个问题，那就是Android有可 能会销毁掉不在前台的Activity，所以，Android引入 了一个Task的机制解决这个问题。Activity可以被销 毁，但它的相关信息仍然放在Task中，依据这些信息 Android就可以重新创建并显示“前一个”Activity。&lt;/p>
&lt;ul>
&lt;li>位于Task栈顶的Activity称为“前台Activity”，用户可以看到它，并且能与它交互。&lt;/li>
&lt;li>其余的Activity称为“后台Activity”，用户看不到它，只有它上面的Activity被移除之后，它成为栈顶，才能被用户看到。&lt;/li>
&lt;/ul>
&lt;p>由于用户影响Task栈的最常见也是最主要的方式是使用手机的“Back”按键，所以，Task栈通常被称为“回退堆栈（Back Stack）”或“返回栈”。
当系统资源紧张时，Android可以销毁掉一些“后台Activity&lt;/p>
&lt;h3 id="task">Task
&lt;/h3>&lt;p>Android操作系统允许用户打开多个App，每个打开的App都对应着一个Task。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>当前正在与用户交互的App所对应着的Task，称为“前台Task”&lt;/p>
&lt;/li>
&lt;li>
&lt;p>其他的App对应的Task，称为“后台Task”&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="activity启动模式">activity启动模式
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;activity&lt;/span> &lt;span class="na">android:name=&lt;/span>&lt;span class="s">&amp;#34;.MainActivity&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">android:launchMode=&lt;/span>&lt;span class="s">&amp;#34;standard&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>standard：这是默认模式，每次激活Activity时都会创建Activity实例，并放入Back Stack中。&lt;/li>
&lt;li>singleTop：如果在栈顶已有一个实例，则重用此实例，并调用此实例的onNewIntent 方法。否则，创建新的实例并放入栈顶（即使栈中已经存在该Activity的实例，只要不在栈顶，都会创建实例）&lt;/li>
&lt;li>singleTask: 这种模式的Activity在一个Task中只能有一个实例存在。当需要启 动一个SingleTask模式的Activity时，如果所有前台后台Task中都没 有它的实例，系统就会创建它并将它压入当前Task的堆栈中。如果另外的Task中已存在该Activity 的实例，则系 统会通过调用这一Activity的 onNewIntent() 方法将 intent 转送给它，而不是创建新实例&lt;/li>
&lt;li>singleInstance：在一个新栈中创建实例，并让多个应用共享该实例。一 旦该模式的Activity的实例已经存在，任何应用在激活该Activity时，都会重 用该栈中的实例（并会自动调用其onNewIntent 方法）。&lt;/li>
&lt;/ul>
&lt;h2 id="intent">Intent
&lt;/h2>&lt;p>Android平台采用“松散协同配合”的理念进行设计，淡化了进程的概念。
Android应用可以使用多个不同来源的可重用组件以聚合的方式构建（比如在你的应用中直接集成Android系统提供的拍照程序完成照像功能）。&lt;/p>
&lt;p>为了让这些组件能相互沟通和协作，Android引入了“Intent”这一特殊的组件当作“信使”，完成组件间相互通信的工作。&lt;/p>
&lt;p>&lt;img src="C:%5cUsers%5cdyhes%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20220415155533031.png"
loading="lazy"
alt="image-20220415155533031"
>&lt;/p>
&lt;h3 id="intent-filter">Intent Filter
&lt;/h3>&lt;p>每个Activity都可以指定一个或多个Intent Filter，以便告诉系统该 Activity 可以响应什么类型的Intent&lt;/p>
&lt;h3 id="类型">类型
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>显式（Explicit）Intent&lt;/p>
&lt;p>直接启动特定的Activtity，只需要两个参数：context和要启动的Activity的类型，通常用于在同一个App内切换显示Activity&lt;/p>
&lt;/li>
&lt;li>
&lt;p>隐式（implicit）Intent&lt;/p>
&lt;p>告诉Android“你想干什么”，由Android帮助你筛选启动特定的Activtity，至少需要两个参数：一个是Action，另一个是Data URI，还可以附加有其他的参数（比如Category，Extra等）&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="fragment">Fragment
&lt;/h2>&lt;p>将复杂的Activity进行分解，使Android App应用更为模块化。&lt;/p>
&lt;p>可使用代码方便地进行控制，因此可以构建出高度灵活的UI。
它是许多其它Android技术的基础，比如一些控件（ViewPages）就使用Fragment作为其界面元素，Jetpack架构组件（比如导航）也是以Fragment作为基本构建单元的。&lt;/p>
&lt;p>Fragment由两部分组成：一个是布局文件，另一个是派生 自Fragment的自定义类，至少要重写onCreateView方法。&lt;/p>
&lt;h4 id="规范">规范
&lt;/h4>&lt;p>Fragment类名称通常采用驼峰命名法，以“Fragment”结束： 例如：SignInFragment&lt;/p>
&lt;p>相应的XML文件应该遵守以下命名规范： fragment_&amp;lt;FRAGMENT_NAME&amp;gt;.xml例如：fragment_sign_in.xml&lt;/p>
&lt;h3 id="状态">状态
&lt;/h3>&lt;p>Resumed：处于可见状态，能接收用户响应&lt;/p>
&lt;p>Started：处于可见状态，但不能接收用户响应&lt;/p>
&lt;p>Created：处于不可见状态&lt;/p>
&lt;p>&lt;img src="C:%5cUsers%5cdyhes%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20220415162002907.png"
loading="lazy"
alt="image-20220415162002907"
>&lt;/p>
&lt;h3 id="信息交流">信息交流
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>from Activity&lt;/p>
&lt;ul>
&lt;li>
&lt;p>直接（不推荐）&lt;/p>
&lt;p>Activity可以通过FragmentManager的findFragmentByTag等方法获取 特定Fragment对象的引用，然后直接访问Fragment类所定义的公有属性或 方法，即可向这一Fragment对象传送特定的信息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Arguments实现（推荐）&lt;/p>
&lt;p>为了解决Activity向Fragment传送信息比较麻烦且易出错的问题， Android为Fragment提供了一个名为arguments的Bundle对象，使用它 来传送信息，就不会出错。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>工厂方法&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>
&lt;p>to Activity&lt;/p>
&lt;ol>
&lt;li>
&lt;p>定义一个专用接口，此接口中所定义方法的参数代表Fragment需要传给Activity的信息；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在Fragment内部定义一个类型为这个接口的属性；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Activity实现这个接口，并在App运行创建Fragment时，将自身引用传给Fragment；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Fragment在适合的时机，回调Activity实现的接口方法。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>与Fragment&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="jetpack">Jetpack
&lt;/h2>&lt;h3 id="构成">构成
&lt;/h3>&lt;ul>
&lt;li>基础组件&lt;/li>
&lt;li>架构组件&lt;/li>
&lt;li>行为组件&lt;/li>
&lt;li>界面组件&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="C:%5cUsers%5cdyhes%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20220415163749383.png"
loading="lazy"
alt="image-20220415163749383"
>&lt;/p>
&lt;p>由于Android Jetpack提供了现成的ViewModel、DataBinding等组件， 所以，MVVM就成为了推荐的Android App UI层设计模式&lt;/p>
&lt;p>&lt;img src="C:%5cUsers%5cdyhes%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20220415164658083.png"
loading="lazy"
alt="image-20220415164658083"
>&lt;/p>
&lt;h2 id="lifecycles">Lifecycles
&lt;/h2>&lt;p>&lt;img src="C:%5cUsers%5cdyhes%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20220415165548612.png"
loading="lazy"
alt="image-20220415165548612"
>&lt;/p>
&lt;h2 id="viewmodel">ViewModel
&lt;/h2>&lt;p>ViewModel是一个类，它包容那 些Activity/Fragment需要显示 的数据&lt;/p>
&lt;h2 id="架构">架构
&lt;/h2>&lt;p>&lt;img src="C:%5cUsers%5cdyhes%5cAppData%5cRoaming%5cTypora%5ctypora-user-images%5cimage-20220415173711644.png"
loading="lazy"
alt="image-20220415173711644"
>&lt;/p>
&lt;h2 id="viewpage">ViewPage
&lt;/h2>&lt;p>ViewPage主要用于实现界面的切换&lt;/p>
&lt;h2 id="进程与线程">进程与线程
&lt;/h2>&lt;p>郑乐祺：注册/登录&lt;/p>
&lt;p>李赛伽：校园论坛+学生事务&lt;/p>
&lt;p>余力：校园监测&lt;/p>
&lt;p>林宏鹏：主页+教务管理&lt;/p></description></item></channel></rss>